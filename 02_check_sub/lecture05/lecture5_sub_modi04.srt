1
00:00:00,475 --> 00:00:02,925
好的,大家都能听到我讲话吗?
Okay, can everyone hear me okay? 

2
00:00:02,975 --> 00:00:05,250
好的,欢迎回来.
Okay, so welcome back.

3
00:00:05,250 --> 00:00:10,225
有些事儿我想讲一下.
I'm gonna address a couple of items in kind of the administratrivia. 

4
00:00:10,225 --> 00:00:14,950
第一周结束时,我们发了封电子邮件
With the end of the first week,we sent an email, 

5
00:00:14,950 --> 00:00:19,300
通知你们第一周的视频已经上传,
noticing you that we have uploaded the videos for the first week, 

6
00:00:19,300 --> 00:00:20,875
你们可以在网上找到它们.
so you can now find them online.

7
00:00:20,875 --> 00:00:25,375
视频里有课程的全程录像,
They have all the screen recordings for the things that we were doing, 

8
00:00:25,375 --> 00:00:27,125
你们回头可以看看,
so you can go back to them.

9
00:00:27,125 --> 00:00:30,675
如果对我们里面讲得快的东西感到困惑,
Look if you're were confused about if we did something quick 

10
00:00:30,700 --> 00:00:35,650
或者讲义里有看不太懂的,可以随时向我们提问.
and, again, feel free to ask us any questions if anything in the lecture notes is not clear. 

11
00:00:35,650 --> 00:00:41,500
我们还发了一份调查问卷,你们可以给我们反馈,
We also kind of sent you a survey so you can give us feedback about 

12
00:00:41,500 --> 00:00:46,455
告诉我们哪些地方不清楚,或是需要更详细的解释,
what was not clear, what items you would want a more thorough explanation

13
00:00:46,455 --> 00:00:48,940
或者其他任何问题,
 or any other item, 

14
00:00:48,940 --> 00:00:52,475
如果你们发现练习太难或太容易,
if you're finding the exercises too hard, too easy, 

15
00:00:52,475 --> 00:00:58,050
请在那个网址里留言,我们会非常感激你们的反馈,
go into that URL and we'll really appreciate getting that feedback, 

16
00:00:58,050 --> 00:01:04,075
因为这会让接下来的讲座和未来的开课变得更好.
because that will kind of make the course better \N for the remaining lectures and for future iterations of the course.  

17
00:01:04,075 --> 00:01:07,000
这些事情说完了,
With that out of the way ...

18
00:01:07,000 --> 00:01:11,700
我们尽量及时上传视频,
Oh, and we're gonna try to upload the videos in a more timely manner. 

19
00:01:11,800 --> 00:01:15,100
不会等到周末才上传,
We don't want to kind of wait until the end of the week for that. 

20
00:01:15,100 --> 00:01:16,200
所以请持续关注.
So keep tuned for that.

21
00:01:18,475 --> 00:01:21,075
这些都说完了,现在我要开始这次讲座了,
That out of the way, now I'm gonna...

22
00:01:21,075 --> 00:01:24,025
这次的讲座是关于命令行环境的,
This lecture's called command-line environment 

23
00:01:24,025 --> 00:01:28,000
我们会讲一些不同的主题.
and we're going to cover a few different topics. 

24
00:01:28,000 --> 00:01:34,925
我在这里写一下,你们可以方便参考,
So the main topics we're gonna cover, so you can keep track, 

25
00:01:34,925 --> 00:01:38,175
可能在这里更好.
it's probably better here, keep track of what I'm talking.

26
00:01:38,175 --> 00:01:42,325
第一个是作业控制,
The first is gonna be job control. 

27
00:01:42,325 --> 00:01:46,825
第二个是终端复用器.
The second one is gonna be terminal multiplexers.

28
00:01:51,750 --> 00:01:57,675
然后我会解释什么是dotfiles以及如何配置你的shell.
Then I'm gonna explain what dotfiles are and how to configure your shell.

29
00:01:57,675 --> 00:02:01,525
最后,如何高效地使用服务器.
And lastly, how to efficiently work with remote machines. 

30
00:02:01,525 --> 00:02:08,500
请记住这个结构.
So if things are not fully clear, kind of keep the structure. 

31
00:02:08,500 --> 00:02:12,850
它们在一定程度上有交叉,比如终端的使用方法上,
They all kind of interact in some way, of how you use your terminal,

32
00:02:12,850 --> 00:02:16,825
但它们依然是一些相对独立的话题.
but they are somewhat separate topics, so keep that in mind. 

33
00:02:16,825 --> 00:02:20,175
那么我们就来看一下作业控制.
So let's go with job control. 

34
00:02:20,175 --> 00:02:26,325
到目前为止,我们使用shell的方式一直很单一,
So far we have been using the shell in a very, kind of mono-command way. 

35
00:02:26,325 --> 00:02:29,350
比如,你写一个命令,然后命令被执行,
Like, you execute a command and then the command executes, 

36
00:02:29,350 --> 00:02:32,275
然后你得到一些输出,这就是你目前经常做的.
then you get some output, and that's all about what you can do.

37
00:02:32,275 --> 00:02:35,825
如果你想同时运行几个东西,
And if you want to run several things,

38
00:02:35,825 --> 00:02:37,550
或者如果你想停止一个程序的执行,
it's not clear how you will do it. 

39
00:02:37,550 --> 00:02:41,725
那就不清楚该怎么做了.
Or if you want to stop the execution of a program, it's again,

40
00:02:41,725 --> 00:02:44,650
那这些又该怎么做呢?
like how do I know how to stop a program? 

41
00:02:44,650 --> 00:02:48,325
我们可以用一个叫做"sleep"的命令来演示这一点.
Let's showcase this with a command called "sleep".

42
00:02:48,325 --> 00:02:51,150
"sleep"是一个带有参数的命令,
"sleep" is a command that takes an argument, 

43
00:02:51,150 --> 00:02:54,300
这个参数是一个整数,执行这个命令后会休眠.
and that argument is going to be an integer number, and it will sleep.

44
00:02:54,300 --> 00:02:58,725
它会在后台睡眠这么多秒.
It will just kind of be there, on the background, for that many seconds. 

45
00:02:58,725 --> 00:03:03,775
如果我们执行比如{\rcode}sleep 20{\r}的命令,该进程将会休眠20秒.
So if we do something like "sleep 20", this process is gonna be sleeping for 20 seconds.

46
00:03:03,775 --> 00:03:08,125
但我们不想等20秒.
But we don't want to wait 20 seconds for the command to complete. 

47
00:03:08,125 --> 00:03:10,875
因此,我们可以输入"Ctrl+C".
So what we can do is type "Ctrl+C".

48
00:03:10,875 --> 00:03:13,081
通过输入"Ctrl+C",
By typing "Ctrl+C" 

49
00:03:13,081 --> 00:03:14,775
我们可以看到,在这里,
We can see that, here, 

50
00:03:14,775 --> 00:03:18,325
终端这样("^C")通知我们(进程已经停止),
the terminal kind of let us know in this,

51
00:03:18,325 --> 00:03:23,325
这是我们在上一节关于vim的讲座中介绍过的一部分,
be one of the syntaxes that we covered in the editors last vim lecture, 

52
00:03:23,325 --> 00:03:27,625
我们输入了"Ctrl+C",它停止了进程的执行.
that we typed "Ctrl+C" and it stopped the execution of the process.

53
00:03:27,650 --> 00:03:31,125
实际上,这里正在使用
What is actually going on here is 

54
00:03:31,125 --> 00:03:35,425
一种名为信号的Unix通信机制.
that this is using a Unix communication mechanism called signals.

55
00:03:35,425 --> 00:03:42,000
当我们键入"Ctrl+C"时,
When we type "Ctrl+C", what the terminal did for us, or the shell did for us,

56
00:03:42,000 --> 00:03:46,442
终端向程序发送了一个名为"SIGINT"的信号,
is send a signal called "SIGINT",

57
00:03:46,442 --> 00:03:48,925
该信号表示信号中断,
that stands for SIGnal INTerrupt, 

58
00:03:48,925 --> 00:03:51,600
告诉程序停止自己.
that tells the program to stop itself.

59
00:03:51,600 --> 00:03:55,650
还有许多这样的信号.
And there are many, many, many signals of this kind. 

60
00:03:55,650 --> 00:04:05,225
{\rstrange}如果你输入"man signal",然后向下滚动,你就会看到信号的列表.{\r}
If you do "man signal", and just go down a little bit, here you have a list of them.

61
00:04:05,225 --> 00:04:07,700
{\rstrange}它们都有数字标识符,{\r}
They all have like number identifiers, 

62
00:04:07,700 --> 00:04:11,150
{\rstrange}名称和一些描述.{\r}
they have kind of a short name and you can find a description.

63
00:04:11,150 --> 00:04:16,775
{\rstrange}例如,刚刚用的那个信号在这,编号为 2,叫"SIGINT".{\r}
So for example, the one I have just described is here, number 2, "SIGINT".

64
00:04:16,775 --> 00:04:22,325
{\rstrange}这是终端在想要中断程序执行时发送的信号.{\r}
This is the signal that a terminal will send to a program when it wants to interrupt its execution.

65
00:04:22,325 --> 00:04:28,750
{\rstrange}还有一些信号需要知道,例如"SIGQUIT",{\r}
A few more to be kind of familiar with is "SIGQUIT",

66
00:04:28,750 --> 00:04:34,800
{\rstrange}这也是终端上退出程序执行的信号.{\r}
This is... again if you work from a terminal and you want to quit the execution of a program,

67
00:04:34,800 --> 00:04:37,975
{\rstrange}对于大多数程序,它们将执行相同的操作,{\r}
which for most programs it will do the same thing. 

68
00:04:37,975 --> 00:04:41,625
{\rstrange}但等会我们将用一个程序,{\r}
But we're gonna showcase now a program which will be different,

69
00:04:41,625 --> 00:04:44,025
{\rstrange}来演示一下发送不同信号的效果{\r}
and this is the signal that will be sent. 

70
00:04:44,025 --> 00:04:46,775
{\rstrange}这几个信号可能会有些混淆.{\r}
It can be confusing sometimes. 

71
00:04:46,775 --> 00:04:48,875
{\rstrange}我们来看看这些信号,{\r}
Kind of looking at these signals, for example, 

72
00:04:48,875 --> 00:04:54,450
{\rstrange}例如,"SIGTERM"在大多数情况下等同于"SIGINT"和"SIGQUIT",{\r}
the "SIGTERM" is for most cases equivalent to "SIGINT" and "SIGQUIT" 

73
00:04:54,450 --> 00:04:58,025
{\rstrange}但是它并不通过终端发送.{\r}
but it's just when it's not sent through a terminal.

74
00:04:59,575 --> 00:05:04,000
{\rstrange}我们将要介绍的其他一些信号包括"SIGHUP",{\r}
A few more that we're gonna cover is "SIGHUP", 

75
00:05:04,000 --> 00:05:06,625
{\rstrange}它表示终端出现挂起(hang-up).{\r}
it's when there's like a hang-up in the terminal.

76
00:05:06,625 --> 00:05:08,775
{\rstrange}例如,当你在终端中运行程序时,{\r}
So for example, when you are in your terminal, 

77
00:05:08,775 --> 00:05:13,825
{\rstrange}如果你关闭终端,但终端中仍在运行一些程序,{\r}
if you close your terminal and there are still things running in the terminal,

78
00:05:13,825 --> 00:05:20,150
{\rstrange}那么程序将发送该信号来关闭所有进程,{\r}
that's the signal that the program is gonna send to all the processes to tell that they should close,

79
00:05:20,200 --> 00:05:26,500
{\rstrange}比如命令行通信中出现了故障,就应该关闭相应进程.{\r}
like there was a hang-up in the command line communication and they should close now. 

80
00:05:28,650 --> 00:05:34,800
{\rstrange}信号可以做更多的事,而不仅限于停止,中断程序.{\r}
Signals can do more things than just like stopping, like interrupting programs and like asking them to finish.

81
00:05:34,800 --> 00:05:41,700
{\rstrange}你可以使用"SIGSTOP"暂停程序的执行,{\r}
You can for example use the "SIGSTOP" to pause the execution of the program, 

82
00:05:41,700 --> 00:05:47,075
{\rstrange}然后使用"SIGCONT"信号,{\r}
and then you can use the "SIGCONT" command for continuing, 

83
00:05:47,075 --> 00:05:50,675
{\rstrange}使其在稍后继续执行程序.{\r}
to continue the execution of the program at a point later in time.

84
00:05:50,700 --> 00:05:56,575
{\rstrange}单单讲这些信号可能有些抽象,让我们看一些例子.{\r}
Since all of this might be slightly too abstract, let's see a few examples.

85
00:05:56,575 --> 00:06:03,425
首先,让我们来看一个python程序.
First, let's showcase a python program. 

86
00:06:03,425 --> 00:06:06,650
我先非常快速地浏览一遍程序.
I'm going to very quickly go through the program.

87
00:06:06,650 --> 00:06:11,416
这是一个python程序,像大多数python程序一样,
This is a python program, and like most python programs,

88
00:06:11,416 --> 00:06:17,900
它正在导入这个"signal"库并在此处定义这个"handler"函数.
is importing this signal library and is defining this handler here. 

89
00:06:17,900 --> 00:06:20,525
这个"handler"是在输出,
And this handler is writing,

90
00:06:20,525 --> 00:06:23,375
"哦,我收到了一个'SIGINT',但我不会停止执行."
"Oh, I got a 'SIGINT', but I'm not gonna stop here." 

91
00:06:23,375 --> 00:06:25,275
之后,
And after that,

92
00:06:25,275 --> 00:06:28,675
我们告诉python,当它收到"SIGINT"时,
 we kind of tell python that we want this program, 

93
00:06:28,675 --> 00:06:31,100
执行这个"handler"函数.
when it gets a "SIGINT", to stop.

94
00:06:31,100 --> 00:06:33,656
程序的其余部分是一个非常简单的程序,
The rest of the program is a very silly program 

95
00:06:33,656 --> 00:06:35,250
只会打印数字.
that is just gonna be printing numbers. 

96
00:06:35,250 --> 00:06:37,675
让我们运行看看.
So let's see this in action.

97
00:06:37,675 --> 00:06:39,850
我们运行{\rcode}python sigint.py{\r}.
We do "python sigint.py". 

98
00:06:39,850 --> 00:06:41,375
它正在计数.
And it's counting. 

99
00:06:41,375 --> 00:06:45,300
我们尝试使用"Ctrl+C"来停止它,这会发送"SIGINT",
We try doing "Ctrl+C", this sends a "SIGINT",

100
00:06:45,300 --> 00:06:47,375
但程序实际上并没有停止.
but the program didn't actually stop. 

101
00:06:47,375 --> 00:06:52,375
这是因为这个程序可以处理"SIGINT",它不想退出执行,
This is because we have a way in the program of \ndealing with this exception, and we didn't want to kind of exit.

102
00:06:52,375 --> 00:07:00,200
如果我们按"Ctrl+\"来发送"SIGQUIT",
If we send a "SIGQUIT", which is done through "Ctrl+\", here, 

103
00:07:00,200 --> 00:07:04,050
我们可以看到,由于程序没有处理"SIGQUIT"的方法,
we can see that since the program doesn't have a way of dealing with "SIGQUIT",

104
00:07:04,050 --> 00:07:08,375
它会执行默认操作,即终止程序.
it does the default operation, which is kind of terminate the program.

105
00:07:08,375 --> 00:07:14,600
这有啥用呢?例如,如果有人"Ctrl+C"了你的程序,
And you could use this, for example, if someone "Ctrl+C" your program, 

106
00:07:14,600 --> 00:07:16,575
你的程序应该执行某些操作,
and your program is supposed to do something,

107
00:07:16,575 --> 00:07:20,550
例如保存程序的中间状态到文件中,
like you maybe want to save the intermediate state of your program to a file, 

108
00:07:20,550 --> 00:07:22,200
以便以后恢复.
so you can recover it for later.

109
00:07:22,200 --> 00:07:25,325
这就是你编写此类处理程序的用处.
This is how you could write a handler like this.

110
00:07:29,600 --> 00:07:31,575
你能再重复一遍问题吗?
Can you repeat the question? 

111
00:07:35,750 --> 00:07:39,950
我输入了"Ctrl+C"尝试停止它,但它没有停止,
So what I typed is, I type "Ctrl+C" to try to stop it but it didn't, 

112
00:07:39,950 --> 00:07:42,350
因为"SIGINT"被程序捕获了.
because "SIGINT" is captured by the program. 

113
00:07:42,350 --> 00:07:44,517
然后我输入了"Ctrl+\",
Then I type "Ctrl+\",

114
00:07:44,517 --> 00:07:48,650
这会发送一个不同的信号"SIGQUIT",
 which sends a "SIGQUIT", which is like a different signal,

115
00:07:48,650 --> 00:07:51,875
而这个信号没有被程序捕获.
and this signal is not captured by the program. 

116
00:07:51,875 --> 00:07:54,319
值得一提的是,
It's also worth mentioning that there is 

117
00:07:54,319 --> 00:07:57,525
有一些信号是软件无法捕获的.
a couple of signals that cannot be captured by software. 

118
00:07:57,625 --> 00:08:05,871
例如,有一些信号像"SIGKILL"是不能被捕获的.
There is a couple of signals like "SIGKILL" that cannot be captured. 

119
00:08:05,871 --> 00:08:09,500
如果发送"SIGKILL",它无论如何都将终止进程的执行.
Like that, it will terminate the execution of the process, no matter what. 

120
00:08:09,500 --> 00:08:11,400
这有时可能是有害的.
And it can be sometimes harmful. 

121
00:08:11,400 --> 00:08:12,900
你不应该默认调用它.
You do not want to be using it by default, 

122
00:08:12,900 --> 00:08:17,075
因为这可能会留下孤儿进程.
because this can leave for example an orphan child,\n orphaned children processes. 

123
00:08:17,100 --> 00:08:20,750
例如,如果一个进程会启动其他子进程,
Like if a process has other small children processes that it started, 

124
00:08:20,800 --> 00:08:26,050
而你"SIGKILL"它,所有子进程都会继续在那里运行,
and you "SIGKILL" it, all of those will keep running in there, 

125
00:08:26,050 --> 00:08:28,043
但它们没有了父进程,
but they won't have a parent,

126
00:08:28,043 --> 00:08:31,300
就很可能会遇到非常奇怪的行为.
 and you can might have a really weird behavior going on.

127
00:08:32,775 --> 00:08:36,250
如果我们注销,程序会收到什么信号?
What signal is given to the program if we log off? 

128
00:08:36,250 --> 00:08:37,475
如果你注销?
If you log off?

129
00:08:37,475 --> 00:08:38,925
那将是...
That would be... 

130
00:08:38,925 --> 00:08:42,275
例如,如果你在ssh连接中关闭连接,
so for example, if you're in an ssh connection and you close the connection, 

131
00:08:42,275 --> 00:08:47,800
那就是挂起信号"SIGHUP",
that is the hang-up signal,"SIGHUP",

132
00:08:47,800 --> 00:08:49,900
我举个例子.
which I'm gonna cover in an example. 

133
00:08:49,975 --> 00:08:51,325
"SIGHUP"就是会被发送的信号.
So this is what would be sent up.

134
00:08:51,325 --> 00:08:58,150
你可以编写一个包装器(比如异常处理),忽略该信号,
And you could write for example, if you want the process to keep working even if you close that, 

135
00:08:58,150 --> 00:09:02,175
以使该进程在关闭连接后继续工作.
you can write a wrapper around that to ignore that signal.

136
00:09:05,250 --> 00:09:10,375
让我们演示一下"SIGSTOP"和"SIGCONT".
Let's display what we could do with the stop and continue.

137
00:09:10,375 --> 00:09:14,025
例如,我们可以启动一个耗时很长的进程.
So, for example, we can start a really long process. 

138
00:09:14,025 --> 00:09:16,775
比如我们睡眠一千秒,这将花费很长时间.
Let's sleep a thousand, we're gonna take forever.

139
00:09:16,775 --> 00:09:20,450
我们可以按"Ctrl+C",不对,"Ctrl+Z",
We can "Ctrl+C", "Ctrl+Z", sorry, 

140
00:09:20,500 --> 00:09:25,150
如果我们这样做,我们可以看到终端显示"已暂停."
and if we do "Ctrl+Z" we can see that the terminal is saying "it's suspended".

141
00:09:25,150 --> 00:09:30,575
这实际上意味着该进程被发送了一个"SIGSTOP"信号,
What this actually meant is that this process was sent a "SIGSTOP" signal 

142
00:09:30,575 --> 00:09:34,350
现在仍然在那里,你可以继续执行它,
and now is still there, you could continue its execution, 

143
00:09:34,350 --> 00:09:37,275
不过现在它被暂停了,依然在后台,
but right now it's completely stopped and in the background

144
00:09:37,275 --> 00:09:41,825
我们可以启动一个不同的程序.
and we can launch a different program. 

145
00:09:41,825 --> 00:09:47,125
当我要运行这个命令,注意我在末尾加了一个"&".
When we try to run this program, please notice that I have included an "&" at the end. 

146
00:09:47,125 --> 00:09:52,525
这告诉bash我希望该程序在后台运行.
This tells bash that I want this program to start running in the background.

147
00:09:52,525 --> 00:09:58,781
这个程序依然是在运行当中,
This is kind of related to all these concepts of running programs in the shell,

148
00:09:58,781 --> 00:10:00,050
只不过是在后台运行的.
but backgrounded.

149
00:10:00,050 --> 00:10:04,873
程序将开始运行,
And what is gonna happen is the program is gonna start

150
00:10:04,873 --> 00:10:07,600
但不会在提示符旁边显示出来.
 but it's not gonna take over my prompt.

151
00:10:07,600 --> 00:10:10,331
如果我只是运行此命令而没有这个"&"符号,
If I just ran this command without this, 

152
00:10:10,331 --> 00:10:11,700
我将无法继续执行任何操作.
I could not do anything. 

153
00:10:11,700 --> 00:10:14,775
在命令完成或我手动终结它之前,
I would have no access to the prompt until the command 

154
00:10:14,775 --> 00:10:18,300
我将无法继续使用提示符.
either finished or I ended it abruptly. 

155
00:10:18,300 --> 00:10:23,300
但如果我这样做,它会说"有一个新的进程是这个".
But if I do this, it's saying "oh,like there's a new process which is this".

156
00:10:23,350 --> 00:10:27,350
这是进程的标识号,我们现在可以忽略它.
This is the process identifying number, we can ignore this for now. 

157
00:10:27,350 --> 00:10:30,175
如果我键入{\rcode}jobs{\r}命令,
And if I type the command "jobs", 

158
00:10:30,175 --> 00:10:35,825
我会得到输出,表示我有一个已暂停的作业,即{\rcode}sleep 1000{\r}.
I get the output that I have a suspended job that is the "sleep 1000" job. 

159
00:10:35,825 --> 00:10:41,425
然后我有另一个正在运行的作业,即{\rcode}nohup sleep 2000{\r}.
And then I have another running job, which is this "NOHUP sleep 2000". 

160
00:10:41,425 --> 00:10:45,775
假设我想继续第一个作业.
Say I want to continue the first job.

161
00:10:45,775 --> 00:10:49,000
第一个作业已暂停,不再执行.
The first job is suspended, it's not executing anymore. 

162
00:10:49,000 --> 00:10:53,675
我可以通过{\rcode}bg %1{\r}命令继续执行.
I can continue that doing "bg %1"

163
00:10:53,675 --> 00:11:01,300
"%"后加上我想引用的特定进程.
That "%" is referring to the fact that I want to refer to this specific process. 

164
00:11:01,300 --> 00:11:06,500
现在,如果我这样做并查看作业,现在这个作业继续运行了.
And now, if I do that and I look at the jobs, now this job is running again. 

165
00:11:06,500 --> 00:11:08,800
现在两个都在运行.
Now both of them are running. 

166
00:11:08,800 --> 00:11:14,100
如果我想停止所有这些,我可以使用"kill"命令.
If I wanted to stop these all, I can use the "kill" command.

167
00:11:14,100 --> 00:11:22,550
"kill"命令用于杀死作业,即停止它们,
The kill command is kind of for killing jobs, which is just like stopping them, intuitively, 

168
00:11:22,550 --> 00:11:24,350
这非常有用.
but actually it's really useful. 

169
00:11:24,350 --> 00:11:28,275
"kill"命令允许你发送任何类型的Unix信号.
Like the kill command just allows you to send any sort of Unix signal.

170
00:11:28,275 --> 00:11:34,750
例如,在这里,我们不完全杀死它,而是发送一个暂停信号.
So here for example, instead of killing it completely, we just send a stop signal.

171
00:11:34,750 --> 00:11:38,950
我将发送一个暂停信号,这将再次暂停该进程.
Here I'm gonna send a stop signal, which is gonna pause the process again. 

172
00:11:38,950 --> 00:11:41,875
我仍然需要打上标识符,
And I still have to include the identifier,

173
00:11:41,875 --> 00:11:46,950
因为没有标识符,shell将不知道暂停哪一个.
because without the identifier the shell wouldn't know whether to stop the first one or the second one.

174
00:11:46,950 --> 00:11:52,375
现在它说已被暂停,因为它收到了一个暂停信号.
Now that's said this has been suspended, because there was a signal sent.

175
00:11:52,375 --> 00:11:53,953
如果我再次键入{\rcode}jobs{\r}命令,
If I do "jobs", again, 

176
00:11:53,953 --> 00:12:00,125
我们可以看到第二个正在运行,而第一个已被暂停.
we can see that the second one is running and the first one has been stopped.

177
00:12:00,125 --> 00:12:07,375
回到之前的一个问题,如果你关闭终端窗口,会发生什么?
Going back to one of the questions, what happens when you close the shell, for example,

178
00:12:07,375 --> 00:12:10,475
为什么有时候人们会建议
and why sometimes people will say that

179
00:12:10,475 --> 00:12:16,425
在远程会话中运行作业之前加上"nohup"?
you should use this "nohup" command before your run jobs in a remote session. 

180
00:12:16,425 --> 00:12:23,800
这是因为如果我们尝试向第一个作业发送挂起命令,
This is because if we try to send a hang up command to the first job

181
00:12:23,800 --> 00:12:28,375
类似于其他信号,第一个作业将会被挂起,
it's gonna, in a similar fashion as the other signals, 

182
00:12:28,375 --> 00:12:32,525
这将终止该作业.
it's gonna hang it up and that's gonna terminate the job.

183
00:12:32,600 --> 00:12:39,450
第一个作业不再存在,而第二个作业仍在运行.
And the first job isn't there anymore whereas we have still the second job running.

184
00:12:39,450 --> 00:12:44,500
然而,如果我们尝试向第二个作业发送信号,
However, if we try to send the signal to the second job what will happen 

185
00:12:44,500 --> 00:12:48,950
如果我们现在关闭终端窗口,它仍将继续运行.
if we close our terminal right now is it's still running. 

186
00:12:48,950 --> 00:12:52,525
就像"nohup"一样,
Like "nohup", what it's doing is kind of encapsulating

187
00:12:52,525 --> 00:12:57,625
它将所执行的命令封装起来,
whatever command you're executing and ignoring wherever you get a hang up signal,

188
00:12:57,625 --> 00:13:02,200
忽略任何挂起信号,并使其继续运行.
and just ignoring that so it can keep running.

189
00:13:02,775 --> 00:13:09,275
如果我们向第二个作业发送"kill"信号,
And if we send the "kill" signal to the second job, 

190
00:13:09,275 --> 00:13:13,150
那么它将无法被忽略,这将杀死该作业,无论如何.
that one can't be ignored and that will kill the job, no matter what.

191
00:13:13,175 --> 00:13:16,100
我们就没有任何作业在运行了.
And we don't have any jobs anymore. 

192
00:13:16,100 --> 00:13:22,925
作业控制部分就讲完了.
That kind of completes the section on job control.

193
00:13:22,925 --> 00:13:24,623
到目前为止有没有什么问题?
Any questions so far?

194
00:13:24,623 --> 00:13:28,425
有没有什么没讲清楚的地方?
Anything that wasn't kind of fully clear?

195
00:13:28,500 --> 00:13:31,079
"bg"是干啥的?
What does "bg" do?  

196
00:13:31,079 --> 00:13:33,625
"bg"相关的有两个命令.
So "bg"...There are like two commands. 

197
00:13:33,625 --> 00:13:39,550
当你的作业被放到后台并暂停执行时,
Whenever you have a command that has been backgrounded and it is stopped  

198
00:13:39,550 --> 00:13:44,800
你可以使用"bg"(background)命令来继续运行后台进程.
you can use "bg" short for "background" to continue that process running on the background.


199
00:13:44,800 --> 00:13:51,050
这相当于向其发送一个继续信号,使其继续运行.
That's equivalent of just kind of sending it a continue signal, so it keeps running.

200
00:13:51,050 --> 00:13:53,800
然后还有一个对应的命令叫做"fg",
And then there's another one which is called "fg", 

201
00:13:53,800 --> 00:13:59,900
"fg"用在你想将其恢复到前台并重新连接到标准输出.
if you want to kind of recover it to the foreground and you want to reattach your standard output.

202
00:14:04,700 --> 00:14:12,725
好的,作业控制和这些信号是很有用的,
Okay, good. Jobs are useful and in general, I think knowing about signals can be really beneficial 

203
00:14:12,725 --> 00:14:14,725
尤其是在处理一些Unix系统的问题上
when dealing with some part of Unix.

204
00:14:14,725 --> 00:14:18,275
但是通常情况下
But most of the time what you actually want to do is 

205
00:14:18,275 --> 00:14:23,950
你想要一个窗口放编辑器,另一个窗口跑程序,
something along the lines of having your editor in one side and then the program in another, 

206
00:14:23,950 --> 00:14:28,575
并且可能还要在标签页里监视资源消耗,
and maybe monitoring what the resource consumption is in our tab. 

207
00:14:28,575 --> 00:14:34,450
解决的办法你们应该也看到过很多次了,
We could achieve this using probably what you have seen a lot of the time,

208
00:14:34,450 --> 00:14:35,725
就是打开更多的窗口.
which is just opening more windows. 

209
00:14:35,725 --> 00:14:37,575
我们可以一直打开终端窗口.
We can keep opening terminal windows. 

210
00:14:37,575 --> 00:14:41,575
但事实上,有更方便的解决方案,
But the fact is there are kind of more convenient solutions to this 

211
00:14:41,575 --> 00:14:43,725
就是使用终端复用器.
and this is what a terminal multiplexer does. 

212
00:14:43,725 --> 00:14:51,600
像tmux这样的终端复用器可以让你创建不同的工作空间,
A terminal multiplexer like tmux will let you create different workspaces 

213
00:14:51,625 --> 00:14:54,450
快速地重新排列环境,
that you can work in, and quickly kind of,

214
00:14:54,450 --> 00:14:57,733
而且它还有很多其他功能.
this has a huge variety of functionality, 

215
00:14:57,733 --> 00:15:01,275
它可以让你重新排列环境,
It will let you kind of rearrange the environment 

216
00:15:01,275 --> 00:15:03,100
并且可以让你拥有不同的会话.
 and it will let you have different sessions. 

217
00:15:03,175 --> 00:15:08,075
还有一个更古老的命令,叫做"screen",
There's another more older command, which is called "screen", 

218
00:15:08,075 --> 00:15:09,675
它可能字面上更容易理解.
that might be more readily available.

219
00:15:09,675 --> 00:15:12,500
我认为这俩的核心理念都是一致的.
But I think the concept kind of extrapolates to both. 

220
00:15:12,500 --> 00:15:16,100
我们推荐学习tmux,
We recommend tmux, that you go and learn it.

221
00:15:16,100 --> 00:15:17,625
我们有相应的tmux的练习.
And in fact, we have exercises on it. 

222
00:15:17,625 --> 00:15:20,800
现在我将展示一个不同的场景.
I'm gonna showcase a different scenario right now. 

223
00:15:20,850 --> 00:15:22,250
当我谈及...
So whenever I talked...

224
00:15:22,250 --> 00:15:24,850
哦,让我简单在黑板写一下.
Oh, let me make a quick note. 

225
00:15:24,850 --> 00:15:29,100
tmux有三个核心概念,我会详细讲解.
There are kind of three core concepts in tmux, that I'm gonna go through 

226
00:15:29,200 --> 00:15:36,625
主要思想是有所谓的"会话(session)",
and the main idea is that there are what is called "sessions". 

227
00:15:38,000 --> 00:15:44,875
会话包含"窗口(window)",而窗口包含"面板(pane)".
Sessions have "windows" and windows have "panes". 

228
00:15:45,725 --> 00:15:50,075
记住这个层次结构非常必要.
It's gonna be kind of useful to keep this hierarchy in mind.

229
00:15:50,075 --> 00:15:54,121
你可以将"窗口(window)"基本上等同于
You can pretty much equate "windows" to 

230
00:15:54,121 --> 00:16:00,625
其他编辑器和浏览器中的"标签(tabs)".
what "tabs" are in other editors and others,like for example your web browser. 

231
00:16:00,625 --> 00:16:06,800
我将主要介绍你在不同层次上能做什么.
I'm gonna go through the features, mainly what you can do at the different levels.

232
00:16:06,800 --> 00:16:10,675
首先,当我们运行tmux时,它会启动一个会话.
So first, when we do tmux, that starts a session. 

233
00:16:10,675 --> 00:16:15,025
在这里,现在似乎什么都没有改变,
And here right now it seems like nothing changed

234
00:16:15,025 --> 00:16:20,925
但现在我们在可以理解为另一个shell中.
but what's happening right now is we're within a shell\n that is different from the one we started before.

235
00:16:20,925 --> 00:16:24,325
因此,在我们原本的shell中,
So in our shell we started a process, 

236
00:16:24,325 --> 00:16:25,000
我们启动tmux进程,
that is tmux

237
00:16:25,000 --> 00:16:27,293
然后 tmux 启动了一个新的shell,
 and that tmux started a different process, 

238
00:16:27,293 --> 00:16:28,825
即我们当前所在的shell.
which is the shell we're currently in.

239
00:16:28,825 --> 00:16:34,400
这很好,这个tmux进程与原始shell进程是分开的.
And the nice thing about this is that that tmux process is separate from the original shell process.

240
00:16:34,400 --> 00:16:44,875
在这里,我们可以做一些事情.
So here, we can do things. 

241
00:16:44,925 --> 00:16:49,050
例如,我们可以执行{\rcode}ls -la{\r},查看当前目录有啥.
We can do "ls -la", for example, to tell us what is going on in here.

242
00:16:49,100 --> 00:16:54,300
然后可以运行我们的程序,它将在在这里运行,
And then we can start running our program, and it will start running in there

243
00:16:54,300 --> 00:17:15,725
我们可以使用"Ctrl+A d"来分离会话.
and we can do "Ctrl+A d", for example, to detach to detach from the session. 

244
00:17:15,775 --> 00:17:21,975
如果我们使用"tmux a",那么我们会重新连接到会话.
And if we do "tmux a" that's gonna reattach us to the session. 

245
00:17:21,975 --> 00:17:25,025
我们暂且离开那个python计数程序,
So the process, we abandon the process kind of counting numbers.

246
00:17:25,025 --> 00:17:30,825
那是个很简单的python计数程序,我们就让它在那儿跑着,
This really silly python program that was just counting numbers, we like left it running there.

247
00:17:30,825 --> 00:17:31,875
并且如果我们tmux...
And if we tmux... 

248
00:17:31,875 --> 00:17:34,125
嘿,进程仍然在那里运行.
Hey, the process is still running there. 

249
00:17:34,125 --> 00:17:37,925
我们可以关闭这个终端并打开一个新的终端,
And we could close this entire terminal and open a new one 

250
00:17:37,925 --> 00:17:42,675
我们仍然可以重新连接,因为这个tmux会话仍在运行.
and we could still reattach because this tmux session is still running.

251
00:17:43,225 --> 00:17:44,875
再次说明,
Again, we can... 

252
00:17:44,875 --> 00:17:48,725
在更深入之前...
Before I go any further.

253
00:17:48,725 --> 00:17:53,950
与Vim不同,它没有模式的概念,
Tmux is unlike Vim, where you have this notion of modes,

254
00:17:53,950 --> 00:18:01,650
而是采用了更类似于Emacs的方式,
tmux will work in a more emacsy way, which is every command,\N pretty much every command in tmux,

255
00:18:02,450 --> 00:18:06,000
你可以emmm
you could enter it through the... 

256
00:18:06,000 --> 00:18:08,250
几乎每个tmux命令都可以通过其命令行输入.
it has a command line, that we could use. 

257
00:18:08,250 --> 00:18:11,675
但我建议你熟悉它的快捷键.
But I recommend you to get familiar with the key bindings.

258
00:18:11,675 --> 00:18:17,475
一开始可能有点难以理解,但一旦你熟悉了它们...
It can be somehow non intuitive at first, but once you get used to them...

259
00:18:17,475 --> 00:18:24,725
现在":exit",嗯,"Ctrl+C"
":exit" right now, "Ctrl+C",yeah

260
00:18:24,725 --> 00:18:26,509
当你熟悉了它们之后,
When you get familiar with them, 

261
00:18:26,509 --> 00:18:31,100
快捷键会比用命令更快.
you will be much faster just using the key bindings than using the commands.

262
00:18:31,100 --> 00:18:33,425
关于快捷键的有一个注意点:
One note about the key bindings: 

263
00:18:33,425 --> 00:18:35,949
所有的快捷键都有一个形式,
all the key bindings have a form that is 

264
00:18:35,949 --> 00:18:40,225
需要你输入一个前缀,然后再按一些其他键.
like you type a prefix and then some key.

265
00:18:40,225 --> 00:18:45,000
例如,要分离,我们要按下"Ctrl+A",然后再按"D".
So for example, to detach we do "Ctrl+A" and then "D". 

266
00:18:45,000 --> 00:18:49,900
这意味着你首先按下"Ctrl+A",然后松开它,再按"D"来分离.
This means you press "Ctrl+A" first, you release that, and then press "D" to detach.

267
00:18:49,900 --> 00:18:54,575
在默认的tmux中,前缀是"Ctrl+B",
On default tmux, the prefix is "Ctrl+B", 

268
00:18:54,575 --> 00:18:59,100
但你会发现大多数人将其重新映射为"Ctrl+A",
but you will find that most people will have this remapped to "Ctrl+A"

269
00:18:59,100 --> 00:19:02,450
因为在键盘上更加人性化.
because it's a much more ergonomic type on the keyboard. 

270
00:19:02,450 --> 00:19:06,525
你可以在笔记中了解如何进行这些操作,
You can find more about how to do these things in one of the exercises,

271
00:19:06,525 --> 00:19:13,325
我们会链接到基础知识和如何利用tmux进行效率提升.
where we link you to the basics and how to do some kind of quality of life modifications to tmux.

272
00:19:13,325 --> 00:19:16,150
回到会话的概念,
Going back to the concept of sessions, 

273
00:19:16,150 --> 00:19:22,341
我们可以通过像{\rcode}tmux new{\r}这样的命令创建一个新的会话,
we can create a new session just doing something like "tmux new"

274
00:19:22,341 --> 00:19:24,700
我们可以给会话命名.
 and we can give sessions names. 

275
00:19:24,700 --> 00:19:27,331
所以我们可以像{\rcode}tmux new -t foobar{\r}这样做,
So we can do like "tmux new -t foobar" 

276
00:19:27,331 --> 00:19:31,675
我们就又打开了一个完全不同的会话.
and this is a completely different session, that we have started.

277
00:19:31,675 --> 00:19:36,800
我们可以在这里工作,也可以从中分离出来.
We can work here, we can detach from it. 

278
00:19:36,800 --> 00:19:40,900
{\rcode}tmux ls{\r}会告诉我们我们有两个不同的会话:
"tmux ls" will tell us that we have two different sessions:

279
00:19:40,900 --> 00:19:43,800
第一个是命名为"0",因为我没有给它命名,
the first one is named "0", because I didn't give it a name, 

280
00:19:43,800 --> 00:19:46,025
第二个被称为"foobar".
and the second one is called "foobar".

281
00:19:46,025 --> 00:19:53,600
我可以连接到"foobar"会话,也可以结束它.
I can attach the "foobar" session and I can end it.

282
00:19:53,600 --> 00:19:55,900
这非常好,
And it's really nice

283
00:19:55,900 --> 00:20:00,650
因为有了这个,你可以在完全不同的项目中工作.
 because having this you can kind of work in completely different projects.

284
00:20:00,650 --> 00:20:06,229
例如,有两个不同的tmux会话和不同的编辑器会话,
For example, having two different tmux sessions and different editor sessions,

285
00:20:06,229 --> 00:20:08,000
不同的进程正在运行......
different processes running...

286
00:20:08,000 --> 00:20:15,300
当你处于一个会话中,我们从窗口的概念开始讲起.
When you are within a session, we start with the concept of windows. 

287
00:20:15,300 --> 00:20:17,375
这里我们有一个单独的窗口,
Here we have a single window, 

288
00:20:17,375 --> 00:20:23,800
但是我们可以使用"Ctrl+A c"("c"表示"create")来创建一个新窗口.
but we can use "Ctrl+A c" (for "create") to open a new window. 

289
00:20:23,800 --> 00:20:26,950
这里没有执行任何操作.
And here nothing is executing.

290
00:20:26,950 --> 00:20:29,725
它的作用是,tmux为我们打开了一个新的shell,
What it's doing is, tmux has opened a new shell for us 

291
00:20:29,725 --> 00:20:35,300
我们可以在这里运行这些程序.
and we can start running another one of these programs here.

292
00:20:35,300 --> 00:20:43,000
为了快速跳转标签,我们可以按"Ctrl+A p",
And to quickly jump between the tabs, we can do "Ctrl+A p",

293
00:20:43,000 --> 00:20:48,050
"p"(表示"previous")来切换到上一个窗口.
"p" for "previous", and that will go up to the previous window.

294
00:20:48,050 --> 00:20:51,700
"Ctrl+A n"("n"表示"next")来到下一个窗口.
"Ctrl+A n", to go to the next window. 

295
00:20:51,700 --> 00:20:53,700
你也可以使用数字.
You can also use the numbers. 

296
00:20:53,700 --> 00:20:56,250
所以如果我们打开了很多这些标签,
So if we start opening a lot of these tabs,

297
00:20:56,250 --> 00:21:04,825
我们可以使用"Ctrl+A 1"来特定地跳转到编号为"1"的窗口.
we could use "Ctrl+A 1", to specifically jump to the to the window that is number "1".

298
00:21:04,825 --> 00:21:10,700
最后,当然你也可以重新命名它们.
And, lastly, it's also pretty useful to know sometimes that you can rename them.

299
00:21:10,700 --> 00:21:13,734
例如,这里我正在执行这个python进程,
For example here I'm executing this python process, 

300
00:21:13,734 --> 00:21:16,927
但是这个窗口不能见名知意,我想......
but that might not be really informative and I want...

301
00:21:16,950 --> 00:21:21,325
我可能想要有像"execution"之类的名字,
I maybe want to have something like "execution" or something like that 

302
00:21:21,325 --> 00:21:27,250
那我们就可以重命名该窗口,以便有个良好的窗口管理.
and that will rename the name of that window so you can have this really neatly organized.

303
00:21:27,250 --> 00:21:36,000
这样做并不能满足你想要在终端中同时显示两个栏目的需求.
This still doesn't solve the need when you want to have two things \n at the same time in your terminal,like in the same display. 

304
00:21:36,000 --> 00:21:37,925
这就是面板(pane)存在的原因.
This is what panes are for. 

305
00:21:37,925 --> 00:21:40,969
现在,这里这个窗口只有一个面板,
Right now, here we have a window with a single pane 

306
00:21:40,969 --> 00:21:44,069
到目前为止,我们打开的所有窗口都只有一个面板.
all the windows that we have opened so far have a single pane. 

307
00:21:44,069 --> 00:21:51,254
但是如果我们按下{\rcode}Ctrl+A "{\r},(两个引号)
But if we do 'Ctrl+A '' ", 

308
00:21:51,254 --> 00:21:56,875
这将把当前显示屏分成两个不同的面板.
this will split the current display into two different panes.

309
00:21:56,875 --> 00:22:01,700
你看,我们打开的下面的窗口是一个新的shell,
So, you see, the one we open below is a different shell from the one we have above,

310
00:22:01,700 --> 00:22:05,450
我们可以在这里运行任何进程.
and we can run any process that we want here. 

311
00:22:05,450 --> 00:22:12,600
我们可以继续分裂,如果我们按下{\rcode}Ctrl+A %{\r},那么就会垂直分裂.
We can keep splitting this, if we do "Ctrl+A %" that will split vertically. 

312
00:22:12,675 --> 00:22:18,250
你可以使用许多不同的命令来重新排列这些选项卡.
And you can kind of rearrange these tabs using a lot of different commands.

313
00:22:18,250 --> 00:22:25,425
其中一个非常有用的命令是,当你需要重新排列它们.
One that I find very useful, when you are starting and it's kind of frustrating, rearranging them. 

314
00:22:25,425 --> 00:22:29,350
要移动这些面板,
Before I explain that, to move through these panes, 

315
00:22:29,350 --> 00:22:32,900
这是你想一直做的事情,
which is something you want to be doing all the time 

316
00:22:32,900 --> 00:22:35,925
你只需按下"Ctrl+A"和箭头键,
You just do "Ctrl+A" and the arrow keys, 

317
00:22:35,925 --> 00:22:41,650
这样就可以快速浏览不同的窗口
and that will let you quickly navigate through the different windows, 

318
00:22:41,650 --> 00:22:44,200
并再次执行操作...
and execute again...

319
00:22:44,200 --> 00:22:48,600
比如我正在做很多{\rcode}ls -la{\r},我可以做{\rcode}htop{\r},
Like I'm doing a lot of "ls -la", I can do "htop", 

320
00:22:48,600 --> 00:22:53,300
我们将在调试和分析讲座中解释"htop".
that we'll explain in the debugging and profiling lecture.

321
00:22:53,850 --> 00:22:55,850
我们可以浏览它们,
And we can just navigate through them, 

322
00:22:55,925 --> 00:22:59,550
重新组织它们,还有一堆其他的命令,
again like to rearrange there's another slew of commands,

323
00:22:59,550 --> 00:23:04,350
你可以在练习中学习它们,"Ctrl+A Space"是个很有用的命令,
you will go through some in the exercises, "Ctrl+A " is pretty neat,

324
00:23:04,500 --> 00:23:07,625
它会将当前的选项卡等距分布,
because it will kind of equispace the current ones

325
00:23:07,625 --> 00:23:10,900
让你可以进行不同的布局.
and let you through different layouts. 

326
00:23:10,900 --> 00:23:16,250
有些布局里的窗口太小了.
Some of them are too small for my current terminal config.

327
00:23:16,250 --> 00:23:19,250
我现在已经讲了tmux的大部分内容.
but that covers, I think, most of it. 

328
00:23:19,325 --> 00:23:24,600
哦,还有,例如,
Oh, there's also, here, for example, 

329
00:23:24,600 --> 00:23:29,319
这个刚启动的vim界面,
this vim execution that we have started, 

330
00:23:29,319 --> 00:23:34,000
对于当前的tmux面板来说太小了.
is too small for what the current tmux pane is. 

331
00:23:34,000 --> 00:23:38,750
因此,相对于拥有多个终端窗口,
So one of the things that really is much more convenient to do in tmux,

332
00:23:38,750 --> 00:23:42,700
一个非常方便的事情就是可以在tmux中放大它,
in contrast to having multiple terminal windows, 

333
00:23:42,700 --> 00:23:48,625
你可以通过按下"Ctrl+A z"来要求"扩张".
is that you can zoom into this, you can ask by doing "Ctrl+A z", for "zoom".

334
00:23:48,625 --> 00:23:53,225
它会将整个空间占满,
It will expand the pane to take over all the space, 

335
00:23:53,225 --> 00:23:57,025
然后再按下"Ctrl+A z"即可返回.
and then "Ctrl+A z" again, will go back to it.

336
00:24:02,775 --> 00:24:09,425
对于终端多路复用器或tmux有什么问题吗?
Any questions for terminal multiplexers, or like, tmux concretely?

337
00:24:11,650 --> 00:24:16,850
它们是在运行所有相同的东西吗?
Is it running all the same thing? 

338
00:24:16,850 --> 00:24:23,850
在不同的窗口中运行是否有任何执行差异?
Like, is there any difference in execution between running it in different windows or like different (blabla...)?

339
00:24:23,850 --> 00:24:28,675
tmux分割开的shell是否完全相同?
Is it really just doing it all the same, so that you can see it? 

340
00:24:28,675 --> 00:24:35,325
是的,它和打开两个终端窗口没有任何区别.
Yeah, it wouldn't be any different from having two terminal windows open in your computer.

341
00:24:35,325 --> 00:24:36,925
这两个终端窗口都将一起运行.
Like both of them are gonna be running. 

342
00:24:36,925 --> 00:24:41,750
当然,当它到达CPU时,这将再次多路复用.
Of course, when it gets to the CPU, this is gonna be multiplexed again.

343
00:24:41,750 --> 00:24:46,300
这里有一个时间共享机制,但没有任何区别.
Like there's like a timesharing mechanism going there but there's no difference. 

344
00:24:46,300 --> 00:24:50,075
tmux通过为你提供这个
like tmux is just making this much more convenient to use 

345
00:24:50,075 --> 00:24:55,300
可以快速操作的可视化布局,使用会变得更加方便.
by giving you kind of this visual layout that you can quickly manipulate through. 

346
00:24:55,300 --> 00:25:00,050
其中有一项优势会在我们等会讲服务器时体现,
And one of the main advantages will come when we reach the remote machines

347
00:25:00,050 --> 00:25:02,450
因为你可以留下其中之一,
because you can leave one of these, 

348
00:25:02,450 --> 00:25:05,800
我们可以从其中一个tmux系统中分离出来,
we can detach from one of these tmux systems,

349
00:25:05,800 --> 00:25:09,149
关闭连接,即使我们关闭连接
close the connection and even if we close the connection 

350
00:25:09,200 --> 00:25:11,950
并且终端将发送挂起信号,
and the terminal is gonna send a hang-up signal,

351
00:25:11,950 --> 00:25:16,550
但这也不会关闭所有已启动的tmux.
that's not gonna close all the tmuxes that have been started.

352
00:25:17,025 --> 00:25:19,225
还有其他问题吗?
Any other questions?

353
00:25:21,950 --> 00:25:29,000
让我禁用按键记录器.
Let me disable the key-caster.

354
00:25:33,300 --> 00:25:37,675
现在我们要开始讲解dotfiles,
So now we're gonna move into the topic of dotfiles and, 

355
00:25:37,675 --> 00:25:42,934
以及一般如何配置你的shell以执行你想要执行的任务,
in general, how to kind of configure your shell to do the things you want to do

356
00:25:42,975 --> 00:25:46,450
主要是如何更快,更方便地执行它们.
and mainly how to do them quicker and in a more convenient way. 

357
00:25:46,450 --> 00:25:49,700
首先要讲一下别名,别名就是一个很方便的东西.
I'm gonna motivate this using aliases first.

358
00:25:49,700 --> 00:25:56,050
所谓别名,就是比如某件事儿你可能需要做很多次,
So what an alias is, is that by now, you might be starting to do something like a lot of the time, 

359
00:25:56,050 --> 00:25:58,074
例如,我想查看一个目录,
I just want to ls a directory 

360
00:25:58,074 --> 00:26:05,175
并将所有内容以列表格式和可读格式显示出来.
and I want to display all the contents into a list format and in a human readable thing. 

361
00:26:05,175 --> 00:26:06,550
这很好.
And it's fine. 

362
00:26:06,550 --> 00:26:07,925
它不是那么长的命令.
Like it's not that long of a command.

363
00:26:07,925 --> 00:26:10,600
但是,随着你构建越来越长的命令,
But as you start building longer and longer commands, 

364
00:26:10,600 --> 00:26:14,900
反复输入它们可能会变得有点麻烦.
it can become kind of bothersome having to retype them again and again.

365
00:26:14,900 --> 00:26:17,725
别名在这种情况下就可以非常方便.
This is one of the reasons why aliases are useful. 

366
00:26:17,725 --> 00:26:21,950
别名可以映射长命令为一个短的字符串,
Alias is a command that will be a built-in in your shell,

367
00:26:21,950 --> 00:26:28,200
然后内置在你的shell当中.
and what it will do is it will remap a short sequence of characters to a longer sequence.

368
00:26:28,200 --> 00:26:36,950
例如,如果我执行{\rcode}alias ll="ls -lah"{\r},
So if I do, for example, here alias ll="ls -lah"

369
00:26:36,950 --> 00:26:42,750
如果我执行此命令,这将把此参数传递给"alias"命令
If I execute this command, this is gonna call the "alias" command with this argument

370
00:26:42,750 --> 00:26:49,200
然后我的shell环境就会知道这个映射的存在.
and this is gonna update the environment in my shell to be aware of this mapping.

371
00:26:49,200 --> 00:26:52,850
因此,如果我现在执行{\rcode}ll{\r},
So if I now do "ll",

372
00:26:52,850 --> 00:26:57,925
{\rstrange}他将会执行"ls -lah",我们不必键入完整的命令.{\r}
it's executing that command without me having to type the entire command.

373
00:26:57,925 --> 00:27:01,450
{\rstrange}它非常方便,有很多很多用途.{\r}
It can be really handy for many, many reasons. 

374
00:27:01,450 --> 00:27:06,075
{\rstrange}需要注意的一件事是,{\r}
One thing to note before I go any further is that here, 

375
00:27:06,075 --> 00:27:10,150
{\rstrange}这里的"alias"与其他命令没有什么特殊之处,{\r}
"alias" is not anything special compared to other commands, 

376
00:27:10,150 --> 00:27:11,925
{\rstrange}它只是接受单个参数.{\r}
it's just taking a single argument.

377
00:27:11,925 --> 00:27:15,257
{\rstrange}在等号周围不能有空格,{\r}
And there is no space around this equals

378
00:27:15,257 --> 00:27:18,950
{\rstrange}因为别名只接受一个参数,{\r}
 and that's because alias takes a single argument

379
00:27:18,950 --> 00:27:25,325
如果你你在等号周围加空格,它会认为你给了它仨参数,
and if you try doing something like this, that's giving it more than one argument

380
00:27:25,325 --> 00:27:29,250
那是不起作用的,因为那不符合它的格式.
and that's not gonna work because that's not the format it expects. 

381
00:27:29,250 --> 00:27:33,975
除此之外,别名还有其他用法,
So other use cases that work for aliases,

382
00:27:33,975 --> 00:27:40,125
例如,对于某些事情来说,使用别名可能更方便,
as I was saying, for some things it might be much more convenient,

383
00:27:40,125 --> 00:27:43,775
比如我的最爱之一就是{\rcode}git status{\r}.
like one of my favorites is "git status". 

384
00:27:43,775 --> 00:27:47,875
它非常长,我不喜欢经常输入那么长的命令,
It's extremely long, and I don't like typing that long of a command every so often,

385
00:27:47,875 --> 00:27:49,725
因为这最终会花费很多时间.
because you end up taking a lot of time. 

386
00:27:49,725 --> 00:27:53,850
因此,把{\rcode}git status{\r}替换为"gs".
So "gs" will replace for doing the "git status"

387
00:27:53,850 --> 00:27:58,860
你还可以使用别名来更正经常打错的命令.
You can also use them to alias things that you mistype often, 

388
00:27:58,860 --> 00:28:02,750
比如说"sl=ls".
so you can do "sl=ls",that will work. 

389
00:28:06,075 --> 00:28:11,100
还有些有用的映射是,
Other useful mappings are,

390
00:28:11,100 --> 00:28:17,750
你可能想将一个命令的别名设置为带有默认标志的命令本身.
you might want to alias a command to itself but with a default flag.  

391
00:28:17,750 --> 00:28:21,325
比如我现在要创建一个别名,
So here what is going on is I'm creating an alias

392
00:28:21,325 --> 00:28:24,050
它是"mv"的别名,
which is an alias for the move command which is "mv",

393
00:28:24,050 --> 00:28:30,125
并将其别名为"mv",但添加了"-i"标志.
and I'm aliasing it to the same command but adding the "-i" flag.

394
00:28:30,150 --> 00:28:33,650
如果你查看man页面,
And this "-i" flag, if you go through the man page and look at it, 

395
00:28:33,650 --> 00:28:34,850
你会发现"-i"标志代表"interactive".
it stands for "interactive". 

396
00:28:34,850 --> 00:28:39,950
这将在我覆盖文件之前提示我.
And what it will do is it will prompt me before I do an overwrite.

397
00:28:39,950 --> 00:28:42,275
一旦我执行了这个命令,
So once I have executed this, 

398
00:28:42,275 --> 00:28:48,075
我就可以像这样移动"aliases.sh"到"case.sh".
I can do something like I want to move "aliases.sh" into "case.sh".

399
00:28:48,075 --> 00:28:53,100
默认情况下,"mv"命令不会询问,如果"case.sh"已经存在,它将被覆盖.
By default "mv" won't ask, and if "case.sh" already exists, it will be over.

400
00:28:53,100 --> 00:28:56,200
那很好,我要覆盖那里的任何东西.
That's fine, I'm going to overwrite whatever that's there. 

401
00:28:56,200 --> 00:29:01,825
但现在,"mv"已经被扩展为"mv -i",
But here it's now expanded,"mv" has been expanded into this "mv -i" 

402
00:29:01,825 --> 00:29:07,700
执行它会来询问"你确定要覆盖它吗?
and it's using that to ask me "Oh, are you sure you want to overwrite this?"

403
00:29:07,700 --> 00:29:12,275
我可以选择不覆盖,以避免丢失文件.
And I can say no, I don't want to lose that file. 

404
00:29:12,275 --> 00:29:19,150
最后,你可以使用{\rcode}alias mv{\r}命令来查询这个别名的含义.
Lastly, you can use "alias mv" to ask for what this alias stands for. 

405
00:29:19,150 --> 00:29:22,000
这样可以快速确定
So it will tell you so you can quickly make sure

406
00:29:22,000 --> 00:29:26,025
你实际执行的命令是什么.
what the command that you are actually executing is. 

407
00:29:26,275 --> 00:29:30,300
但是有一个不方便的地方,
One inconvenient part about, for example, having aliases is 

408
00:29:30,300 --> 00:29:35,738
如果你设置了别名,那么如何将它们持久化到你当前的环境中呢?
how will you go about persisting them into your current environment? 

409
00:29:35,738 --> 00:29:40,600
如果我现在关闭这个终端,所有这些别名都会消失.
Like, if I were to close this terminal now, all these aliases will go away. 

410
00:29:40,600 --> 00:29:44,475
你不想一遍又一遍地重新输入这些命令.
And you don't want to be kind of retyping these commands and more generally, 

411
00:29:44,475 --> 00:29:46,775
更一般地说,如果你开始配置你的shell,
if you start configuring your shell more and more, 

412
00:29:46,775 --> 00:29:51,200
你需要某种方式来存储所有这些配置.
you want some way of bootstrapping all this configuration. 

413
00:29:51,650 --> 00:30:01,900
你会发现许多shell程序都会使用基于文本的配置文件.
You will find that most shell command programs will use some sort of text based configuration file. 

414
00:30:01,900 --> 00:30:04,024
由于历史原因,我们通常称其为"dotfiles",
And this is what we usually all "dotfiles",

415
00:30:04,024 --> 00:30:07,275
因为它们以"."开头.
 because they start with a dot for historical reasons.

416
00:30:07,275 --> 00:30:15,250
所以对于我们的shell,比如bash,我们可以查看".bashrc"文件.
So for bash in our case, which is a shell, we can look at the ".bashrc". 

417
00:30:15,250 --> 00:30:20,250
我一直在使用zsh在演示,这不是Linux默认的shell,
For demonstration purposes, here I have been using zsh,which is a different shell,

418
00:30:20,250 --> 00:30:24,775
我现在配置bash,然后启动bash.
and I'm gonna be configuring bash, and starting bash. 

419
00:30:24,775 --> 00:30:30,400
所以比如我在这里创建一个别名,
So if I create an entry here and I say

420
00:30:30,400 --> 00:30:36,400
我说{\rcode}sl{\r}映射到{\rcode}ls{\r}.我已经修改了它,现在我启动bash.
"sl" maps to "ls". And I have modified that, and now I start bash.

421
00:30:36,400 --> 00:30:41,800
bash现在是完全未配置的,但现在如果我输入{\rcode}sl{\r}...
bash is kind of completely unconfigured, but now if I do "sl"... 

422
00:30:41,925 --> 00:30:44,425
芜湖~翻车了.
Hm, that's unexpected.

423
00:30:46,125 --> 00:30:48,350
哦,好的.
Oh, good. Good getting that. 

424
00:30:48,350 --> 00:30:52,175
那很重要,
So it matters where you config file is,

425
00:30:52,175 --> 00:30:55,575
你的配置文件要放在你的home目录中.
your config file needs to be in your home folder. 

426
00:30:55,575 --> 00:31:01,150
因此,bash的配置文件将位于"~"中,
So your configuration file for bash will live in that "~",

427
00:31:01,150 --> 00:31:06,225
它会扩展到你的home目录,然后是".bashrc"
which will expand to your home directory, and then ".bashrc".

428
00:31:06,225 --> 00:31:10,450
在这里,我们可以创建别名,
And here we can create the alias 

429
00:31:10,450 --> 00:31:16,175
现在我们开启一个bash会话并运行{\rcode}sl{\r}.
and now we start a bash session and we do "sl". 

430
00:31:16,175 --> 00:31:17,400
现在它已经加载了这个别名,
Now it has been loaded,

431
00:31:17,400 --> 00:31:24,650
在bash程序启动时会自动加载配置文件中的配置.
and this is loaded at the beginning when this bash program is started. 

432
00:31:24,650 --> 00:31:31,775
现在不仅可以使用别名,还可以有很多其他的配置.
And all this configuration is loaded, and you can not only use aliases, \N they can have a lot of parts of configuration.

433
00:31:31,775 --> 00:31:36,125
例如,在这里,我有一个相当无用的提示符.
So for example here, I have a prompt which is fairly useless. 

434
00:31:36,125 --> 00:31:40,950
它只告诉我使用的shell名称是bash,版本是5.0.
Like it has just given me the name of the shell, which is bash, and the version, which is 5.0. 

435
00:31:40,950 --> 00:31:43,675
我不想显示它,
I don't want this to be displayed 

436
00:31:43,675 --> 00:31:46,950
而且在你的shell中也有许多像这样没啥用的东西,
and as with many things in your shell, 

437
00:31:46,950 --> 00:31:49,000
这只是一个环境变量.
this is just an environment variable. 

438
00:31:49,000 --> 00:31:55,275
"PS1"是用于提示符的提示字符串(默认是"bash-5.0$"),
So the "PS1" is just the prompt string for your prompt 

439
00:31:55,275 --> 00:32:03,050
我们可以修改它,使其成为一个"> ".
and we can actually modify this to just be a "> " symbol.

440
00:32:03,050 --> 00:32:06,100
现在已经修改过了,我们已经有了这个.
and now that has been modified, and we have that. 

441
00:32:06,100 --> 00:32:10,175
但是,如果我们退出并再次调用bash,这个修改就会丢失.
But if we exit and call bash again, that was lost. 

442
00:32:10,175 --> 00:32:14,150
但是,如果我们添加这个条目并说,
However, if we add this entry and say, 

443
00:32:14,150 --> 00:32:20,800
我们希望"PS1"是这样的,然后再次调用bash,
oh we want "PS1" to be this and we call bash again, 

444
00:32:20,800 --> 00:32:22,025
这个修改就会被保留下来.
this has been persisted. 

445
00:32:22,025 --> 00:32:25,575
我们可以继续修改这个配置.
And we can keep modifying this configuration.

446
00:32:25,575 --> 00:32:33,525
所以也许我们想在提示符里显示出我们当前的工作目录,
So maybe we want to include where the working directory that we are in, 

447
00:32:33,525 --> 00:32:37,600
这就和其他shell的提示符一样了.
and that's telling us the same information that we had in the others.

448
00:32:37,600 --> 00:32:43,725
还有许多选项,Shell是高度可配置的,
And there are many, many options, like shells are highly, highly configurable, 

449
00:32:43,725 --> 00:32:50,675
不仅Shell是通过这些文本文件来配置的,
and it's not only shells that are configured through these files, 

450
00:32:50,675 --> 00:32:52,750
还有许多其他程序.
there are many other programs. 

451
00:32:52,750 --> 00:32:55,278
就像我们在编辑器讲座中看到的那样,
As we saw for example in the editors lecture, 

452
00:32:55,278 --> 00:32:57,075
Vim也是通过这种方式进行配置的.
Vim is also configured this way. 

453
00:32:57,075 --> 00:32:59,887
我们给你这个vimrc文件,
We gave you this vimrc file

454
00:32:59,887 --> 00:33:07,050
并告诉你将它放在"~/.vimrc"下,
 and told you to put it under your "~/.vimrc" 

455
00:33:07,050 --> 00:33:10,650
这是相同的概念,但只是针对Vim.
and this is the same concept, but just for Vim. 

456
00:33:10,650 --> 00:33:15,275
即在启动时让Vim加载一系列的指令,
It's just giving it a set of instructions that it should load when it's started, 

457
00:33:15,275 --> 00:33:19,300
以便你可以保持所需的配置.
so you can keep a configuration that you want.

458
00:33:19,300 --> 00:33:24,150
还有许多程序也支持这种方式进行配置.
And even kind of a lot of programs will support this. 

459
00:33:24,150 --> 00:33:27,550
例如,另一个例子是我的终端模拟器,
For instance, my terminal emulator, which is another concept,

460
00:33:27,550 --> 00:33:36,075
它是个运行shell的程序,会将其显示在计算机屏幕上.
which is the program that is running the shell,\N in a way, and displaying this into the screen in my computer.

461
00:33:36,075 --> 00:33:38,400
它也可以通过这种方式进行配置,
It can also be configured this way, 

462
00:33:38,400 --> 00:33:42,835
因此如果我修改它的配置文件,
so if I modify this 

463
00:33:42,835 --> 00:33:50,075
比如更改字体的大小.
I can change the size of the font. 

464
00:33:50,075 --> 00:33:56,000
例如现在,出于演示目的,我已经放大了字体,
Like right now, for example, I have increased the font size a lot for demonstration purposes, 

465
00:33:56,000 --> 00:34:03,550
但如果我更改这个条目并使其为28,保存一下,
but if I change this entry and make it for example 28 and write this value, 

466
00:34:03,550 --> 00:34:07,275
你会发现字体的大小已经改变了,
you see that the size of the font has changed,

467
00:34:07,275 --> 00:34:14,000
因为我编辑了这个配置文件,它告诉了我的终端模拟器应该如何工作.
because I edited this text file that specifies how my terminal emulator should work.

468
00:34:19,350 --> 00:34:22,575
关于dotfiles,还有其他问题吗?
Any questions so far? With dotfiles.

469
00:34:27,775 --> 00:34:36,100
好的,这么多的配置可能会让人有些不知所措,对吧?
Okay, it can be a bit daunting knowing that there is like this endless wall of configurations,

470
00:34:36,100 --> 00:34:41,050
你咋知道哪些内容可以进行配置呢?
and how do you go about learning about what can be configured?

471
00:34:41,050 --> 00:34:49,375
好消息是,我们在讲义中已经为你提供了非常好的资源链接.
The good news is that we have linked you to really good resources in the lecture notes.

472
00:34:49,375 --> 00:34:55,325
很多人喜欢配置这些工具,
But the main idea is that a lot of people really like just configuring these tools 

473
00:34:55,325 --> 00:34:59,375
他们把自己的配置文件上传到了GitHub这样的在线仓库中.
and have uploaded their configuration files to GitHub, 

474
00:35:01,650 --> 00:35:03,950
例如,在GitHub上
So for example, here we are on GitHub,

475
00:35:03,950 --> 00:35:06,146
搜索"dotfiles",你会发现
we search for "dotfiles", and can see that 

476
00:35:06,146 --> 00:35:11,650
有成千上万的人在分享他们的配置文件.
there are like thousands of repositories of people sharing their configuration files. 

477
00:35:12,475 --> 00:35:15,750
我们的几个讲师也链接了我们的dotfiles.
We have also like, the class instructors have linked our dotfiles. 

478
00:35:15,750 --> 00:35:20,025
因此,如果你想知道我们配置中的每一行是如何工作的,
So if you really want to know how any part of our setup is working

479
00:35:20,025 --> 00:35:22,450
你可以查看这些文件并尝试弄清楚.
you can go through it and try to figure it out. 

480
00:35:22,450 --> 00:35:24,600
也欢迎你们随时向我们询问.
You can also feel free to ask us. 

481
00:35:24,600 --> 00:35:27,650
例如,如果我们转到这个仓库,
If we go for example to this repository here

482
00:35:27,650 --> 00:35:31,375
我们会发现有很多文件可以配置.
we can see that there's many, many files that you can configure. 

483
00:35:31,375 --> 00:35:35,350
例如,有一个用于bash的文件,有几个用于git,
For example, there is one for bash, the first couple of ones are for git, 

484
00:35:35,350 --> 00:35:41,850
这些可能会在版本控制讲座中进行介绍.
that will be probably be covered in the version control lecture tomorrow. 

485
00:35:41,850 --> 00:35:45,575
例如我们转到".bash_profile",
If we go for example to the bash profile, which is

486
00:35:45,575 --> 00:35:49,550
它和我们之前看到的".bashrc"有点不同,
 a different form of what we saw in the bashrc,

487
00:35:49,550 --> 00:35:55,950
它非常有用,你可以通过查看手册页来学习如何配置,
it can be really useful because you can learn through just looking at the manual page, 

488
00:35:55,950 --> 00:36:03,500
但是手册页通常只是对所有不同选项的描述性解释,
but the manual pages is, a lot of the time just kind of\N like a descriptive explanation of all the different options

489
00:36:03,500 --> 00:36:10,650
我们可以通过看其他人的配置文件并试着理解他们为什么这样做
and sometimes it's more helpful going through examples of \N what people have done and trying to understand why they did it

490
00:36:10,650 --> 00:36:12,200
以及它如何完善他们的工作流程来学习.
and how it's helping their workflow. 

491
00:36:12,200 --> 00:36:17,750
我们可以看到这里进行了不区分大小写的文件名扩展操作.
We can say here that this person has done case-insensitive globbing.

492
00:36:17,750 --> 00:36:21,733
我们在第二堂课中介绍了globbing(通配符扩展)
We covered globbing as this kind of filename expansion 

493
00:36:21,733 --> 00:36:25,850
这种文件名展开技巧.
trick in the shell scripting and tools.

494
00:36:25,850 --> 00:36:30,900
这里假如你想"不,我不想区分大小写."
And here you say no, I don't want this to matter, whether using uppercase and lowercase, 

495
00:36:30,900 --> 00:36:35,650
只需在shell中设置此选项即就可使shell按照你期望的方式运行.
and just setting this option in the shell for these things to work this way

496
00:36:35,650 --> 00:36:38,100
类似地,还有一些别名.
Similarly, there is for example aliases. 

497
00:36:38,100 --> 00:36:41,325
在这里,你可以看到这个人做了很多别名.
Here you can see a lot of aliases that this person is doing. 

498
00:36:41,325 --> 00:36:43,325
例如,"d"代表"cd ~/Document/Dropbox"
For example, "d" for "cd ~/Document/Dropbox"

499
00:36:43,650 --> 00:36:47,675
因为这样更短.
sorry, because that's just much shorter. 

500
00:36:47,675 --> 00:36:49,000
"g"代表"git"...
"g" for "git"...

501
00:36:49,000 --> 00:36:52,650
我们来看一下vimrc.
Say we go, for example, with vimrc. 

502
00:36:52,650 --> 00:36:55,775
我们可以查看它并试着提取有用信息,
It can be actually very, very informative, going through this 

503
00:36:55,775 --> 00:36:59,100
这些配置文件实际上信息量很大.
and trying to extract useful information.

504
00:36:59,100 --> 00:37:07,125
我们不建议只是将一个巨大的配置文件复制到你的配置文件中,
We do not recommend just kind of getting one huge blob of this and copying this into your config files,

505
00:37:07,125 --> 00:37:13,125
虽然这可能看起来更漂亮,但你可能不了解其中的细节.
because maybe things are prettier, but you might not really understand what is going on.

506
00:37:13,125 --> 00:37:20,375
最后,关于dotfiles我想提到的一件事是,
Lastly one thing I want to mention about dotfiles is that

507
00:37:20,375 --> 00:37:27,200
人们将这些文件推送到GitHub中
people not only try to push these files into GitHub 

508
00:37:27,200 --> 00:37:30,675
不仅是方便其他人阅读,这是一个原因.
just so other people can read it, that's one reason. 

509
00:37:30,675 --> 00:37:36,250
这样还可以让他们很快重现他们的配置.
They also make really sure they can reproduce their setup. 

510
00:37:36,250 --> 00:37:39,950
为此,他们使用了各种不同的工具.
And to do that they use a slew of different tools.

511
00:37:39,950 --> 00:37:42,200
咦,有点儿大了.
Oops, went a little too far. 

512
00:37:42,200 --> 00:37:45,175
例如GNU Stow,
So GNU Stow is, for example, one of them 

513
00:37:45,175 --> 00:37:49,200
他们的技巧是,
and the trick that they are doing is 

514
00:37:49,200 --> 00:37:53,885
他们将所有的dotfiles都放在一个文件夹中,
they are kind of putting all their dotfiles in a folder

515
00:37:53,885 --> 00:37:56,975
并通过一个工具瞒天过海,
 and they are kind of faking to the system, 

516
00:37:56,975 --> 00:38:00,041
这是一种名为符号链接的工具,
using a tool called symlinks, 

517
00:38:00,041 --> 00:38:02,200
它会让伪装的文件看起来是真的.
that they are actually what they're not. 

518
00:38:02,225 --> 00:38:06,050
我来快速画个示意图解释一下.
I'm gonna draw really quick what I mean by that. 

519
00:38:06,050 --> 00:38:11,225
通常的文件夹结构可能是这样的:你有你的home文件夹,
So a common folder structure might look like you have your home folder 

520
00:38:11,225 --> 00:38:17,300
在这个home文件夹中可能会有你的bashrc,
and in this home folder you might have your bashrc, 

521
00:38:17,300 --> 00:38:21,400
它包含了你的bash配置,你可能会有你的vimrc,
that contains your bash configuration, you might have your vimrc 

522
00:38:21,400 --> 00:38:26,700
如果你能把它们放在git下就太好了.
and it would be really great if you could keep this under version control. 

523
00:38:26,700 --> 00:38:30,050
但是问题是,你可能不想在你的home文件夹中放置一个git仓库.
But the thing is, you might not want to have a git repository,

524
00:38:30,100 --> 00:38:32,450
关于git的内容明天会讲到
which will be covered tomorrow, in your home folder. 

525
00:38:32,450 --> 00:38:37,800
所以人们通常会创建一个dotfiles仓库,
So what people usually do is they create a dotfiles repository,

526
00:38:37,800 --> 00:38:45,750
然后在这里创建他们的bashrc和vimrc.
and then they have entries here for their bashrc and their vimrc. 

527
00:38:45,750 --> 00:38:50,200
这其实就是真正文件所在的地方,
And this is where actually the files are 

528
00:38:50,200 --> 00:38:56,050
他们只是告诉操作系统,
and what they are doing is they're just telling the OS to forward, 

529
00:38:56,050 --> 00:39:00,075
无论何时有人想要读取这个文件或者写入这个文件,
whenever anyone wants to read this file or write to this file, 

530
00:39:00,175 --> 00:39:02,650
都把这个请求转移到请求另一个文件.
just forward this to this other file.

531
00:39:02,650 --> 00:39:08,550
这是一个叫做符号链接的概念,在这种情况下很有用,
This is a concept called symlinks and it's useful in this scenario,

532
00:39:08,550 --> 00:39:12,850
它是Unix中一个非常有用的工具,
but it in general it's a really useful tool in Unix 

533
00:39:12,850 --> 00:39:15,450
我们在讲座中还没有讲过,
that we haven't covered so far in the lectures

534
00:39:15,450 --> 00:39:18,800
但是你应该知道它.
but you might be... that you should be familiar with. 

535
00:39:18,800 --> 00:39:25,225
通常情况下,语法是使用"ln -s"指定一个符号链接,
And in general, the syntax will be "ln -s" for specifying a symbolic link 

536
00:39:25,225 --> 00:39:30,650
然后把你想要创建的文件的路径
and then you will put the path to the file

537
00:39:30,650 --> 00:39:36,525
和你想要创建的符号链接放在一起.
that you want to create and then the symlink that you want to create.

538
00:39:42,313 --> 00:39:46,200
所有这些高级工具,我们在这里列出来的,
And all these kind of fancy tools that we're seeing here listed,

539
00:39:46,200 --> 00:39:49,325
它们都可以用一些技巧实现,
they all amount to doing some sort of this trick, 

540
00:39:49,325 --> 00:39:54,025
这样你就可以把所有的dotfiles整齐地放在一个文件夹里,
so that you can have all your dotfiles neat and tidy into a folder, 

541
00:39:54,025 --> 00:39:57,125
它们可以使用git来管理,
and then they can be version-controlled, 

542
00:39:57,125 --> 00:39:59,127
也可以被符号链接,
and they can be symlinked 

543
00:39:59,127 --> 00:40:03,575
这样其它程序也可以在默认位置上找到它们.
so the rest of the programs can find them in their default locations.

544
00:40:04,550 --> 00:40:09,825
关于dotfiles有什么问题吗?
Any questions regarding dotfiles?

545
00:40:11,300 --> 00:40:16,300
你需要在你的home文件夹
Do you need to have the dotfiles in your home folder, 

546
00:40:16,300 --> 00:40:20,525
和git文件夹中都有dotfiles吗?
and then also dotfiles in the version control folder?

547
00:40:21,000 --> 00:40:26,075
几乎每个程序,例如,
So what you will have is, pretty much every program, for example 

548
00:40:26,075 --> 00:40:29,675
bash程序总是会查找"~/.bashrc".
bash will always look for "~/.bashrc". 

549
00:40:29,675 --> 00:40:34,075
这就是程序要查找的位置.
That's where the program is going to look for.

550
00:40:34,075 --> 00:40:36,770
当你创建一个符号链接时,
What you do when you do a symlink is, 

551
00:40:36,770 --> 00:40:41,000
你把你的"~/.bashrc"放在一个特殊的Unix文件中,
you place your "~/.bashrc"

552
00:40:41,000 --> 00:40:45,375
这个文件只是Unix中的一种特殊的文件,
it's just a file that is kind of a special file in Unix, 

553
00:40:45,375 --> 00:40:50,250
它说:"无论何时你想读取这个文件,都要去找那个文件."
that says oh, whenever you want to read this file go to this other file.

554
00:40:50,250 --> 00:40:54,000
这个文件没有内容,
There's no content, like there is no... 

555
00:40:54,000 --> 00:40:56,350
比如你的别名不是这个dotfiles的一部分.
your aliases are not part of this dotfile. 

556
00:40:56,350 --> 00:40:59,600
这个文件只是一个指针,告诉你应该去哪个地址,
That file is just kind of like a pointer, saying now you should go that other way. 

557
00:40:59,600 --> 00:41:04,200
这样,你可以把你的配置文件放在dotfile文件夹中.
And by doing that you can have your other file in that other folder.

558
00:41:04,200 --> 00:41:09,550
如果版本控制没用,那么如果你想将它们放到Dropbox文件夹中,
If version controlling is not useful, think about what if you want to have them in your Dropbox folder, 

559
00:41:09,550 --> 00:41:12,025
这样它们就可以同步到云端,
so they're synced to the cloud, for example.  

560
00:41:12,025 --> 00:41:16,000
还有另一种情况,这时符号链接也非常有用,
That's kind of another use case where like symlinks could be really useful

561
00:41:16,000 --> 00:41:20,642
你不需要将dotfiles文件夹放在主目录中,对吧?
So you don't need the folder dotfiles to be in the home directory, right? 

562
00:41:20,650 --> 00:41:23,525
因为你可以使用符号链接,指向其他位置.
Because you can just use the symlink, that points somewhere else.

563
00:41:23,525 --> 00:41:30,425
只要你让默认路径解析到真正的位置就可以了.
As long as you have a way for the default path to resolve wherever you have it, yeah.

564
00:41:33,825 --> 00:41:37,900
最后我想说...
Last thing I want to cover in the lecture... 

565
00:41:37,900 --> 00:41:41,100
哦,抱歉,有没有其他关于dotfiles的问题?
Oh, sorry, any other questions about dotfiles?

566
00:41:48,650 --> 00:41:52,875
最后我想在讲座中讲讲与远程服务器的交互,
Last thing I want to cover in the lecture is working with remote machines, 

567
00:41:52,875 --> 00:41:57,150
这是你迟早都要碰到的.
which is a thing that you will run into, sooner or later. 

568
00:41:57,150 --> 00:42:00,350
如果你知道一些东西,
And there are a few things that will make your life much easier 

569
00:42:00,350 --> 00:42:04,575
它们会让你在与远程服务器交互时更加轻松.
when dealing with remote machines if you know about them. 

570
00:42:04,575 --> 00:42:08,725
也许现在因为你在使用{\rcode2}Athena集群[*]{\r},
Right now maybe because you are using the Athena cluster,
{\rdefault2}*[MIT提供的一种高性能计算机资源共享平台,\N Athena用户可以通过网络连接到这个集群上运行科学计算程序.]{\r}

571
00:42:08,725 --> 00:42:11,000
但在你的编程生涯中,
but later on, during your programming career, 

572
00:42:11,000 --> 00:42:14,350
有一个非常普遍的概念,
it's pretty sure that there is a fairly ubiquitous concept of

573
00:42:14,350 --> 00:42:17,850
就是你有你的本地工作环境,
 having kind of your local working environment 

574
00:42:17,925 --> 00:42:19,400
然后有一些运行代码的生产服务器,
and then having some production server 

575
00:42:19,400 --> 00:42:21,925
你需要得到服务器上的一些信息
that is actually running the code, really good to get for me, 

576
00:42:21,950 --> 00:42:27,625
因此熟悉如何与远程服务器进行交互非常重要.
so it is really good to get familiar about how to work in/with remote machines.

577
00:42:27,625 --> 00:42:34,200
处理远程服务器的主要命令是"ssh".
So the main command for working with remote machines is "ssh".It's "ssh".

578
00:42:38,525 --> 00:42:40,928
"ssh"就像一个安全的shell,
"ssh" is just like a secure shell, 

579
00:42:40,928 --> 00:42:46,025
它将负责送我们到想要到达的地方
it's just gonna take the responsibility for kind of reaching wherever we want 

580
00:42:46,025 --> 00:42:50,975
或者告诉它在那个地方去打开一个会话.
or tell it to go and trying to kind of open a session there.

581
00:42:50,975 --> 00:42:53,250
这里的语法是:
So here the syntax is: 

582
00:42:53,250 --> 00:42:56,875
"jjgo"是我在远程服务器上使用的用户名,
"jjgo" is the user that I want to use in the remote machine,

583
00:42:56,875 --> 00:43:01,750
这是因为该用户与我本地机器上的用户不同,
and this is because the user is different from the one I have my local machine, 

584
00:43:01,750 --> 00:43:03,675
这在很多情况下都是这样,
which will be the case a lot of the time,

585
00:43:03,675 --> 00:43:12,875
然后"@"这个符号分离了用户名和地址.
then the "@" is telling the terminal that this separates what the user is from what the address is.

586
00:43:12,875 --> 00:43:14,850
这里我使用的是一个IP地址,
And here I'm using an IP address 

587
00:43:14,850 --> 00:43:23,425
因为现在连接的服务器实际上是我电脑里的一个虚拟机,
because what I'm actually doing is I have a virtual machine \N in my computer, that is the one that is remote right now.  

588
00:43:23,425 --> 00:43:25,725
我将要通过ssh连接它.
And I'm gonna be ssh'ing into it. 

589
00:43:25,725 --> 00:43:28,750
这是我使用的URL,抱歉,
This is the URL that I'm using, sorry, 

590
00:43:28,750 --> 00:43:32,750
是我的IP地址,但是你也可能会看到类似这样的东西:
the IP that I'm using, but you might also see things like

591
00:43:32,750 --> 00:43:39,950
我想以在"foobar.mit.edu"上以"jjgo"的名义使用ssh连接.
oh I want to ssh as "jjgo" at "foobar.mit.edu"

592
00:43:39,950 --> 00:43:47,050
如果你使用一些具有DNS名称的远程服务器,这可能是更常见的.
That's probably something more common, if you are using some remote server that has a DNS name.

593
00:43:48,350 --> 00:43:52,575
回到常规命令,
So going back to a regular command,

594
00:43:53,250 --> 00:43:58,500
我们尝试ssh,它会要求我们输入密码,这是很正常.
we try to ssh, it asks us for a password, really common thing. 

595
00:43:58,500 --> 00:44:00,550
现在我们已经连接成功了.
And now we're there. We have...

596
00:44:00,550 --> 00:44:02,924
我们仍然在同一个终端中,
we're still in our same terminal emulator 

597
00:44:02,925 --> 00:44:11,875
但现在ssh会将远程shell正在显示的内容转发到当前的界面
but right now ssh is kind of forwarding the entire virtual \N display to display what the remote shell is displaying. 

598
00:44:11,875 --> 00:44:17,850
我们可以在这里执行命令并查看远程文件.
And we can execute commands here and we'll see the remote files 

599
00:44:17,850 --> 00:44:21,050
关于ssh,
A couple of handy things to know about ssh, 

600
00:44:21,050 --> 00:44:25,075
有一些操作在数据整理讲座中简要介绍过,
that were briefly covered in the data wrangling lecture, 

601
00:44:25,075 --> 00:44:29,925
它不仅仅适用于连接,
is that ssh is not only good for just opening connections. 

602
00:44:29,925 --> 00:44:33,975
还可以让你远程执行命令.
It will also let you just execute commands remotely.

603
00:44:33,975 --> 00:44:39,725
例如,如果我这样做,它会再次询问我的密码.
So for example, if I do that, it's gonna ask me "what is my password?" again. 

604
00:44:39,725 --> 00:44:43,500
它会执行这个命令,然后回到我的终端,
And it's executing this command then coming back to my terminal 

605
00:44:43,500 --> 00:44:47,700
通过当标准输出,将该命令在远程服务器的输出,
and piping the output of what that command was, in the remote machine,

606
00:44:47,700 --> 00:44:50,650
在当前的shell里显示.
through the standard output in my current shell. 

607
00:44:50,650 --> 00:44:54,500
然后我可以使用这个.
And I could have this in...

608
00:44:58,150 --> 00:45:02,825
我可以将其放入管道中,
I could have this in a pipe, and this will work 

609
00:45:02,825 --> 00:45:08,375
{\rstrange}并在本地管道中继续工作.{\r}
and we'll just drop all this output and then have a local pipe where I can keep working.

610
00:45:08,375 --> 00:45:12,750
{\rstrange}到目前为止,老是要输入密码有点不方便.{\r}
So far, it has been kind of inconvenient, having to type our password. 

611
00:45:12,750 --> 00:45:15,100
{\rstrange}有个技巧可以解决这个问题.{\r}
There's one really good trick for this.

612
00:45:15,100 --> 00:45:17,400
{\rstrange}它就是我们一个叫"ssh密钥"的东西.{\r}
It's we can use something called "ssh keys". 

613
00:45:17,400 --> 00:45:22,900
{\rstrange}ssh密钥使用非对称加密来创建一对ssh密钥,{\r}
ssh keys just use public key encryption to create a pair of ssh keys, 

614
00:45:22,900 --> 00:45:29,800
{\rstrange}一个公钥和一个私钥,然后你可以将公钥给服务器.{\r}
a public key and a private key, and then you can give the server the public part of the key.

615
00:45:29,800 --> 00:45:35,550
{\rstrange}因此,每当你进行身份验证时,不用使用密码{\r}
So you copy the public key and then whenever you try to authenticate instead of using your password, 

616
00:45:35,550 --> 00:45:39,525
{\rstrange}而是使用私钥向服务器证明你的身份.{\r}
it's gonna use the private key to prove to the server that you are actually who you say you are.

617
00:45:41,750 --> 00:45:49,675
我们快速演示一下.
We can quickly showcase how you will go about doing this.

618
00:45:49,675 --> 00:45:54,125
现在我没有任何ssh密钥,所以我要创建一对.
Right now I don't have any ssh keys, so I'm gonna create a couple of them. 

619
00:45:54,125 --> 00:45:59,125
首先,它会问我想让这个密钥存储在哪里.
First thing, it's just gonna ask me where I want this key to live.

620
00:45:59,125 --> 00:46:01,025
显然,它正在执行这个操作.
Unsurprisingly, it's doing this. 

621
00:46:01,025 --> 00:46:05,725
这是我的home文件夹,然后它使用这个".ssh"路径,
This is my home folder and then it's using this ".ssh" path,

622
00:46:05,725 --> 00:46:09,850
这是我们之前提到过的dotfiles.
which refers back to the same concept that we covered earlier about having dotfiles. 

623
00:46:09,850 --> 00:46:17,450
".ssh"是一个包含许多配置文件的文件夹,用于配置ssh.
Like ".ssh" is a folder that contains a lot of the configuration files for how you want ssh to behave. 

624
00:46:17,675 --> 00:46:20,025
因此,它会要求我们输入一个密码.
So it will ask us a passphrase.

625
00:46:20,025 --> 00:46:23,075
这个密码是用来加密密钥的私钥部分的,
The passphrase is to encrypt the private part of the key 

626
00:46:23,075 --> 00:46:25,550
因为如果有人得到了你的私钥,
because if someone gets your private key, 

627
00:46:25,550 --> 00:46:28,525
而你的私钥没有受到密码保护,
if you don't have a password protected private key, 

628
00:46:28,525 --> 00:46:32,650
他们得到了私钥,他们就可以在服务器上冒充你.
if they get that key they can use that key to impersonate you in any server. 

629
00:46:32,650 --> 00:46:38,325
而如果你添加了密码,他们必须知道密码才能使用私钥.
Whereas if you add a passphrase, they will have to know what the passphrase is to actually use the key.

630
00:46:40,200 --> 00:46:43,650
现在创建了一对密钥.
It has created a key(?). 

631
00:46:43,650 --> 00:46:51,925
我们可以检查这两个文件现在是否在".ssh"下,
We can check that these two files are now under ".ssh".

632
00:46:51,925 --> 00:46:53,400
我们可以看到...
And we can see...

633
00:46:53,400 --> 00:47:00,275
我们有这两个文件:
We have these two files: 

634
00:47:00,275 --> 00:47:02,950
我们有了私钥和公钥.
we have the 25519 and the public key.

635
00:47:02,950 --> 00:47:06,410
如果我们用"cat"查看这个密钥,
And if we "cat" through the output, 

636
00:47:06,410 --> 00:47:11,585
发现这个密钥实际上不是什么复杂的二进制文件,
that key is actually not like any fancy binary file, 

637
00:47:15,700 --> 00:47:24,400
它只是一个文本文件,里面包含了公钥和一些别名,
it's just a text file that has the contents of the public key and some alias name for it, 

638
00:47:24,400 --> 00:47:27,125
这样我们就知道这个公钥是什么.
so we can know what this public key is. 

639
00:47:27,125 --> 00:47:30,175
我们告诉服务器
The way we can tell the server that 

640
00:47:30,175 --> 00:47:36,000
我们有ssh授权,
we're authorized to ssh there is by just actually copying this file, 

641
00:47:36,000 --> 00:47:38,750
可以通过将这个文件复制到 
like copying this string into a file,

642
00:47:38,750 --> 00:47:41,300
".ssh/authorized_keys" 文件中
 that is ".ssh/authorized_keys". 

643
00:47:41,300 --> 00:47:46,900
这里
So here what I'm doing is 

644
00:47:46,900 --> 00:47:50,269
我用"cat"查看这个文件的输出,
I'm catting the output of this file 

645
00:47:50,269 --> 00:47:53,750
它只是一个我们想要复制的文本行,
which is just this line of text that we want to copy

646
00:47:53,750 --> 00:47:56,125
然后将其传输到 ssh 中,
and I'm piping that into ssh 

647
00:47:56,125 --> 00:47:59,350
然后远程使用 "tee" 命令
and then remotely I'm asking "tee" 

648
00:47:59,350 --> 00:48:05,225
将标准输入的内容输入到 ".ssh/authorized_keys" 中.
to dump the contents of the standard input into ".ssh/authorized_keys". 

649
00:48:05,225 --> 00:48:11,500
如果我们这样做,显然会要求我们输入密码.
And if we do that, obviously it's gonna ask us for a password.

650
00:48:14,375 --> 00:48:22,225
复制成功后,我们可以检查一下,如果再次尝试ssh,
It was copied, and now we can check that if we try to ssh again,

651
00:48:22,225 --> 00:48:29,550
它会首先要求我们输入密码,但是你可以将其设置为在会话中保存,
It's gonna first ask us for a passphrase but you can arrange that so that it's saved in the session

652
00:48:29,550 --> 00:48:35,025
这样我们就不必为服务器键入密钥.
and we didn't actually have to type the key for the server.

653
00:48:35,025 --> 00:48:37,400
再演示一下.
And I can kind of show that again.

654
00:48:45,675 --> 00:48:47,675
还有更多有用的内容.
More things that are useful. 

655
00:48:47,675 --> 00:48:49,200
哦,我们可以做...
Oh, we can do... 

656
00:48:49,200 --> 00:48:52,150
如果那个命令看起来有点奇怪,
If that command seemed a little bit janky,

657
00:48:52,150 --> 00:48:55,225
你实际上可以使用专门为此构建的命令,
you can actually use this command that is built for this, 

658
00:48:55,225 --> 00:49:00,750
这样你就不必敲那个很长的命令了.
so you don't have to kind of craft this "ssh" command.

659
00:49:00,750 --> 00:49:04,275
这个命令就叫做"ssh-copy-id".
That is just called "ssh-copy-id". 

660
00:49:04,275 --> 00:49:09,925
我们可以做同样的事情,它会复制密钥.
And we can do the same and it's gonna copy the key. 

661
00:49:09,925 --> 00:49:14,650
现在,如果我们尝试 ssh,
And now, if we try to ssh,

662
00:49:14,650 --> 00:49:20,375
我们可以不用输入任何密钥或密码就进行ssh连接.
we can ssh without actually typing any key at all, or any password.

663
00:49:20,375 --> 00:49:21,750
还有一件事儿.
More things. 

664
00:49:21,750 --> 00:49:24,200
我们可能想要复制文件.
We will probably want to copy files. 

665
00:49:24,200 --> 00:49:29,900
你不能使用"cp"命令,但可以使用"scp"命令,即"ssh 复制".
You cannot use "cp" but you can use "scp", for "ssh copy".

666
00:49:29,900 --> 00:49:33,386
在这里,我们可以指定要复制的
And here we can specify that we want to copy this

667
00:49:33,386 --> 00:49:37,400
本地文件名为"notes.md",语法和"mv"有些相似.
 local file called notes and the syntax is kind of similar.

668
00:49:37,400 --> 00:49:40,005
我们要将它复制到远程这个位置,
We want to copy to this remote 

669
00:49:40,005 --> 00:49:44,250
然后使用":"分隔要复制到的路径.
and then we have a colon to separate what the path is going to be.

670
00:49:44,250 --> 00:49:47,078
然后我们指定要将其复制为"notes",
And then we have oh, we want to copy this as "notes" 

671
00:49:47,078 --> 00:49:51,175
但我们也可以将其复制为"foobar".
but we could also copy this as "foobar".

672
00:49:51,175 --> 00:49:55,980
如果我们这样做,它将被执行,
And if we do that, it has been executed 

673
00:49:55,980 --> 00:49:59,775
并告诉我们所有的内容都已经被复制到那里了.
and it's telling us that all the contents have been copied there.

674
00:49:59,775 --> 00:50:02,565
如果你要复制很多文件,
If you're gonna be copying a lot of files, 

675
00:50:02,565 --> 00:50:05,325
那么你应该使用一个更好的命令,
there is a better command that you should be using

676
00:50:05,400 --> 00:50:11,575
它叫做"rsync".例如,在这里仅通过指定这三个标志,
that is called "rsync". For example, here just by specifying these three flags,

677
00:50:11,575 --> 00:50:16,500
我告诉"rsync"在可能的情况下保留所有权限,
I'm telling "rsync" bo kind of preserve all the permissions whenever possible

678
00:50:16,500 --> 00:50:20,000
以尝试检查文件是否已经被复制.
to try to check if the file has already been copied. 

679
00:50:20,000 --> 00:50:24,050
例如,"scp"复制已经存在的文件时,
For example, "scp" will try to copy files that are already there.

680
00:50:24,050 --> 00:50:29,200
如果在复制过程中断开连接,
This will happen for example if you are trying to copy \N and the connection interrupts in the middle of it. 

681
00:50:29,200 --> 00:50:32,254
"scp"会从头开始复制每个文件,
"scp" will start from the very beginning, trying to copy every file,

682
00:50:32,254 --> 00:50:36,525
而"rsync"会从停止的地方继续.
whereas "rsync" will continue from where it stopped.

683
00:50:36,550 --> 00:50:43,450
在这里,我们要求它复制整个文件夹,
And here, we ask it to copy the entire folder 

684
00:50:43,450 --> 00:50:47,475
它只需要很快地复制整个文件夹.
and it's just really quickly copied the entire folder. 

685
00:50:47,475 --> 00:50:54,417
另一个需要知道的事情是,
One of the other things to know about ssh is that

686
00:50:54,417 --> 00:51:00,175
".ssh/config"相当于是ssh的dotfile.
the equivalent of the dotfile for ssh is the ".ssh/config".

687
00:51:00,175 --> 00:51:06,850
因此,如果我们编辑ssh配置文件,
So if we edit the ".ssh/config" to be..

688
00:51:13,250 --> 00:51:18,207
如果我将ssh配置文件编辑成这样,
If I edit the ssh config to look something like this, 

689
00:51:18,207 --> 00:51:23,266
就不必每次都输入
instead of having to, every time, type "ssh jjgo",

690
00:51:23,266 --> 00:51:25,150
"ssh jjgo"这个非常长的字符串,
like having this really long string 

691
00:51:25,150 --> 00:51:30,400
这样我就可以用特定的身份来连接远程服务器.
so I can like refer to this specific remote, I want to refer, with the specific user name,

692
00:51:30,400 --> 00:51:32,777
这里可以加上一些内容,
I can have something here like 

693
00:51:32,777 --> 00:51:35,450
例如这是用户名,这是主机名,
that says this is the username, this is the host name, 

694
00:51:35,450 --> 00:51:41,150
该主机所指的内容以及身份验证文件.
that this host is referring to and you should use this identity file. 

695
00:51:41,150 --> 00:51:46,375
如果我将此内容复制到本地文件夹中,
And if I copy this,this is right now in my local folder, 

696
00:51:46,375 --> 00:51:49,325
我可以将其复制到ssh中.
I can copy this into ssh.

697
00:51:49,325 --> 00:51:53,100
现在,不用输入这个很长的命令
Now, instead of having to do this really long command, 

698
00:51:53,100 --> 00:51:57,750
我只需要说我想要ssh连接到名为"vm"的主机.
I can just say I just want to ssh into the host called "vm".

699
00:51:57,750 --> 00:51:59,844
通过这样做,
And by doing that, 

700
00:51:59,844 --> 00:52:04,725
{\rstrange}它会从ssh配置中获取所有的配置并将其应用于这里.{\r}
it's grabbing all that configuration from the ".ssh/config" and applying it here.

701
00:52:04,725 --> 00:52:10,550
{\rstrange}这个解决方案比创建ssh别名之类的东西要好得多,{\r}
And this solution is much better than something like creating an alias for ssh,

702
00:52:10,550 --> 00:52:16,150
{\rstrange}因为像"scp"和"rsync"这样的其他程序也知道ssh的dotfiles,{\r}
because other programs like "scp" and "rsync" also know about the dotfiles for ssh 

703
00:52:16,350 --> 00:52:20,550
{\rstrange}并且有时会使用它们.{\r}
and will use them whenever they are there.

704
00:52:21,375 --> 00:52:26,175
{\rstrange}关于远程服务器,我最后要讲的是,{\r}
Last thing I want to cover about remote machines is that here, 

705
00:52:26,175 --> 00:52:33,450
例如,我们有tmux,
for example, we'll have tmux and we can, like I was saying before, 

706
00:52:33,450 --> 00:52:36,096
我们可以像之前说的那样编辑某个文件,
we can start editing some file

707
00:52:36,096 --> 00:52:44,725
并运行某个程序.
and we can start running some job.

708
00:52:53,150 --> 00:52:56,400
例如,运行个像"htop"这样的程序.
For example, something like "htop". 

709
00:52:56,400 --> 00:53:06,000
这正在运行,我们可以从中分离,关闭连接,然后再次ssh.
And this is running here, we can detach from it, close the connection and then ssh back. 

710
00:53:06,000 --> 00:53:09,200
然后,如果你执行{\rcode}tmux a{\r},一切都与你离开的状态一样,
And then, if you do "tmux a", everything is as you left it, 

711
00:53:09,200 --> 00:53:11,400
就好像什么也没有改变.
like nothing has really changed. 

712
00:53:11,400 --> 00:53:16,400
如果在后台有正在执行的作业,它们将继续执行.
And like if you have things executing there in the background, they will keep executing.

713
00:53:16,400 --> 00:53:23,725
我想这就是我要讲的有关这个工具的所有内容.
I think that, pretty much, ends all I have to say for this tool.

714
00:53:23,725 --> 00:53:26,950
关于这个主题,有什么问题吗?
Any questions related to remote machines?

715
00:53:32,725 --> 00:53:37,625
这是一个非常好的问题.让我想想该怎么回答.
That's a really good question. So what I do for that,

716
00:53:37,625 --> 00:53:45,050
哦,是的.问题是,如何在本地机器上使用tmux,
Oh, yes, sorry. So the question is, how do you deal with trying to use tmux in your local machine,

717
00:53:45,050 --> 00:53:47,950
同时又要在远程机器上使用tmux?
and also trying to use tmux in the remote machine? 

718
00:53:47,950 --> 00:53:51,150
有几个处理这个问题的技巧.
There are a couple of tricks for dealing with that.

719
00:53:51,150 --> 00:53:53,750
第一个是更改前缀.
The first one is changing the prefix. 

720
00:53:53,750 --> 00:54:00,300
例如,我在本地机器上将前缀从"Ctrl+B"更改为"Ctrl+A",
So what I do, for example, is in my local machine the prefix I have changed from "Ctrl+B" to "Ctrl+A" and

721
00:54:00,300 --> 00:54:03,125
然后在远程机器上仍为"Ctrl+B".
then in remove machines this is still "Ctrl+B". 

722
00:54:03,125 --> 00:54:05,518
所以我可以在两者之间切换,
So I can kind of swap between,

723
00:54:05,525 --> 00:54:08,575
如果我想对本地的tmux执行操作,
if I want to do things to the local tmux 

724
00:54:08,575 --> 00:54:10,075
我会按"Ctrl+A",
I will do "Ctrl+A"

725
00:54:10,075 --> 00:54:13,775
如果我想对远程的tmux执行操作,我会按"Ctrl+B".
 and if I want to do things to the remote tmux I would do "Ctrl+B".

726
00:54:13,775 --> 00:54:20,350
另一件事是你可以有不同的配置文件,
Another thing is that you can have separate configs, 

727
00:54:20,350 --> 00:54:25,125
所以我可以做类似于这样的事情......
so I can do something like this, and then...

728
00:54:25,125 --> 00:54:31,000
哦,因为我没有自己的ssh配置文件.
Ah, because I don't have my own ssh config, yeah. 

729
00:54:31,000 --> 00:54:32,950
但如果你......
But if you...

730
00:54:32,950 --> 00:54:34,950
嗯,我可以{\rcode}ssh vm{\r}.
Um, I can "ssh vm". 

731
00:54:34,950 --> 00:54:40,825
这里,你看到的两个条之间的差异,
Here, what you see, the difference between these two bars, 

732
00:54:40,825 --> 00:54:44,100
例如,是因为tmux配置不同.
for example, is because the tmux config is different.

733
00:54:44,100 --> 00:54:54,075
你在练习中会知道,tmux配置在".tmux.conf"文件中,
As you will see in the exercises, the tmux configuration is in the ".tmux.conf"

734
00:54:54,075 --> 00:54:59,700
你可以在".tmux.conf"中做很多事情,
And in ".tmux.conf", here you can do a lot of things 

735
00:54:59,700 --> 00:55:02,650
比如根据你所在的主机更改颜色,
like changing the color depending on the host you are...

736
00:55:02,650 --> 00:55:07,300
以便快速获得视觉反馈,
so you can get like quick visual feedback about where you are, 

737
00:55:07,300 --> 00:55:08,800
或者如果你有一个嵌套会话.
or like if you have a nested session.

738
00:55:08,800 --> 00:55:10,950
此外,
Also, tmux will...

739
00:55:10,975 --> 00:55:12,625
如果你在同一台主机上,
if you're in the same host

740
00:55:12,625 --> 00:55:15,675
并且尝试在一个tmux会话中使用tmux,
 and you try to tmux within a tmux session, 

741
00:55:15,675 --> 00:55:19,525
tmux会阻止你这样做,以避免出现问题.
it will kind of prevent you from doing it so you don't run into issues.

742
00:55:21,625 --> 00:55:26,300
如果有其他问题,请随意问.
Any other questions related, to kind of all the topics we have covered.

743
00:55:28,425 --> 00:55:31,175
对于那个问题的另一个答案是,
Another answer to that question is also, 

744
00:55:31,175 --> 00:55:35,175
如果你将前缀键击两次,它会将其发送一次到底层shell.
if you type the prefix twice, it sends it once to the underlying shell.

745
00:55:35,175 --> 00:55:40,425
因此,本地绑定是"Ctrl+A",远程绑定是"Ctrl+A",
So the local binding is "Ctrl+A" and the remote binding is "Ctrl+A", 

746
00:55:40,425 --> 00:55:45,600
你可以键入"Ctrl+A","Ctrl+A",然后键入"D",例如从远程分离.
You could type "Ctrl+A", "Ctrl+A" and then "D", for example, detaches from the remote, basically.

747
00:55:52,375 --> 00:55:56,400
我想今天的课程到此结束了,
I think that ends the class for today, 

748
00:55:56,400 --> 00:55:59,700
有很多与所有这些主题相关的练习,
there's a bunch of exercises related to all these main topics 

749
00:55:59,700 --> 00:56:03,200
我们今天也有办公时间.
and we're gonna be holding office hours today, too. 

750
00:56:03,250 --> 00:56:05,950
可以随时来问我们问题.
So feel free to come and ask us any questions.

