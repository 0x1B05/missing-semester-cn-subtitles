1
00:00:00,000 --> 00:00:02,225
Okay, cool. 

2
00:00:02,225 --> 00:00:06,575
So, welcome to the third lecture of the missing semester of your CS education. 

3
00:00:06,575 --> 00:00:09,075
Today we're going to be talking about text editors. 

4
00:00:09,075 --> 00:00:11,200
This is a topic that I really like. 

5
00:00:11,200 --> 00:00:14,275
I think it's one of the most valuable topics that we're teaching in this class ,

6
00:00:14,275 --> 00:00:15,725
because as programmers, 

7
00:00:15,725 --> 00:00:19,375
you spend so much of your time editing text and editing programs that 

8
00:00:19,375 --> 00:00:22,950
if you invest time into making yourself more efficient at doing this, 

9
00:00:23,000 --> 00:00:25,925
you'll save a ton of time, probably hundreds of hours 

10
00:00:25,950 --> 00:00:29,325
over the course of your undergrad or over the course of your career. 

11
00:00:30,450 --> 00:00:36,250
So text editors are a little bit different than other programs you might use to edit, say, 

12
00:00:36,350 --> 00:00:40,800
things like English prose because programming is different than writing English prose. 

13
00:00:40,800 --> 00:00:42,275
When you're programming, 

14
00:00:42,300 --> 00:00:44,779
you spend a lot of time reading what you've written, 

15
00:00:44,825 --> 00:00:47,050
you spend a lot of time navigating around a buffer, 

16
00:00:47,050 --> 00:00:50,150
and you spend a lot of time making little edits to code all over the place, 

17
00:00:50,200 --> 00:00:54,375
rather than just writing in a long stream like you do when you're writing an essay or something. 

18
00:00:54,400 --> 00:00:57,500
And so it makes sense that there are different programs for these different purposes, right? 

19
00:00:57,500 --> 00:00:59,575
So yeah, things like Microsoft Word for writing essays and 

20
00:00:59,625 --> 00:01:03,125
things like vim and Emacs and VS Code and Sublime for writing code. 

21
00:01:04,825 --> 00:01:09,875
So, the way you learn a text editor and become really good at it is you start with a tutorial, 

22
00:01:09,900 --> 00:01:13,223
and so that's basically going to be the function of today's lecture,

23
00:01:13,223 --> 00:01:15,223
 plus the exercises we've given you. 

24
00:01:15,275 --> 00:01:20,850
And then after the tutorial, you need to stick with the editor for all your editing tasks. 

25
00:01:20,900 --> 00:01:23,225
And when you're learning a sophisticated tool, 

26
00:01:23,300 --> 00:01:24,572
so today we're going to teach you vim, 

27
00:01:24,572 --> 00:01:27,075
which is one powerful editor that a lot of programmers use, 

28
00:01:27,300 --> 00:01:29,400
when you're learning such a sophisticated tool, 

29
00:01:29,400 --> 00:01:31,450
it may be the case that initially 

30
00:01:31,450 --> 00:01:34,550
switching to this tool slows you down a little bit when you're programming, 

31
00:01:34,575 --> 00:01:40,850
but stick with it because I'd say that in about 20 hours of programming using a new editor, 

32
00:01:40,975 --> 00:01:44,525
you'll be back to the same speed at which you programmed using your old tool, 

33
00:01:44,550 --> 00:01:46,275
and then after that, the benefits will start, 

34
00:01:46,275 --> 00:01:48,850
and you'll get faster and faster as you learn more. 

35
00:01:49,100 --> 00:01:52,100
With these sophisticated programs like vim, 

36
00:01:52,150 --> 00:01:55,950
it takes not way too long to learn the basics but a lifetime to master. 

37
00:01:55,950 --> 00:01:59,250
And so throughout the time you're using this tool, 

38
00:01:59,250 --> 00:02:01,093
 make sure you look things up as you go

39
00:02:01,100 --> 00:02:04,850
If you ever get to a point where you're like, "Oh, this is a really inefficient way of doing things. 

40
00:02:04,875 --> 00:02:05,800
Is there a better way?" 

41
00:02:05,800 --> 00:02:08,100
The answer is almost always yes 

42
00:02:08,650 --> 00:02:12,450
because these text editors were written by programmers for programmers 

43
00:02:12,450 --> 00:02:13,335
and so of course, 

44
00:02:13,335 --> 00:02:16,935
like the people who wrote these tools, ran into the same kinds of issues and fixed them 

45
00:02:16,950 --> 00:02:18,700
so that you don't need to deal with these anymore. 

46
00:02:18,700 --> 00:02:22,925
And so yeah, as you're learning, make sure you look things up as you go, either use Google 

47
00:02:22,950 --> 00:02:26,225
or feel free to send us emails if you have questions or come to office hours, 

48
00:02:26,425 --> 00:02:28,950
and we'll help you figure out how to do things really fast. 

49
00:02:30,200 --> 00:02:32,275
As far as which editor to learn, 

50
00:02:32,300 --> 00:02:35,800
in previous iterations of this class, we actually avoided teaching a specific editor 

51
00:02:35,800 --> 00:02:37,975
because we didn't want to enforce our opinions on you guys, 

52
00:02:38,225 --> 00:02:40,898
but we actually think that it's really useful to teach you 

53
00:02:40,898 --> 00:02:42,898
how to use one particular tool and use it well. 

54
00:02:42,898 --> 00:02:46,273
And so people have really strong opinions about editors, 

55
00:02:46,273 --> 00:02:49,523
so you can see the course notes for more links on this topic. 

56
00:02:50,800 --> 00:02:55,000
Looking at which editors have been popular over the years, Stack Overflow, 

57
00:02:55,675 --> 00:02:57,075
I'm sure you've all heard of that, 

58
00:02:57,075 --> 00:03:00,005
does a survey every year asking developers various questions, 

59
00:03:00,005 --> 00:03:02,450
and one thing to ask is which text editor do you use, 

60
00:03:02,450 --> 00:03:07,125
and it seems to be that currently, the most popular kind of graphical editor is VS Code, 

61
00:03:07,150 --> 00:03:11,975
and the most popular editor that is based within a command line interface is vim. 

62
00:03:12,025 --> 00:03:14,400
So we're going to be teaching you vim, 

63
00:03:14,450 --> 00:03:15,650
and there are a couple of reasons for this. 

64
00:03:15,675 --> 00:03:17,175
One is that all the instructors, 

65
00:03:17,175 --> 00:03:19,850
so me, John, and Jose, use vim as our primary editor, 

66
00:03:19,950 --> 00:03:21,250
and we've been doing this for many years, 

67
00:03:21,250 --> 00:03:22,550
and we've been very happy with it. 

68
00:03:23,700 --> 00:03:27,225
We think that there are a lot of interesting ideas behind vim, 

69
00:03:27,225 --> 00:03:32,000
so even if you don't end up using this particular tool in the long term,

70
00:03:32,000 --> 00:03:34,000
 I think it's valuable to learn these ideas. 

71
00:03:34,100 --> 00:03:38,725
Also, a lot of tools have actually been really excited about the ideas in vim, 

72
00:03:38,725 --> 00:03:41,625
and so they support a vim emulation mode. 

73
00:03:41,800 --> 00:03:47,625
For example, VS Code, what is apparently the most popular editor in use today, supports vim bindings, 

74
00:03:47,625 --> 00:03:51,725
and this vim emulation mode as of now has like 1.4 million downloads. 

75
00:03:51,725 --> 00:03:54,802
As you'll see over the course of this lecture, 

76
00:03:54,802 --> 00:04:01,577
a lot of different tools, including your shell, including things like the Python , REPL and Jupyter notebook, 

77
00:04:01,625 --> 00:04:05,400
and all sorts of other things, even your web browser, can support a vim emulation mode. 

78
00:04:05,425 --> 00:04:08,900
So yeah, we're going to be teaching you this really neat tool today.

79
00:04:09,475 --> 00:04:14,625
And in this lecture, we can't really cover all of them, right, it's a very powerful tool, 

80
00:04:14,625 --> 00:04:19,925
but our goal is to teach you the core philosophy of them, like the really neat ideas behind it, 

81
00:04:19,950 --> 00:04:21,525
and then in addition to that, 

82
00:04:21,525 --> 00:04:25,525
some of the basics like how do you open a file, close a file, navigate around a file, make edits, 

83
00:04:25,575 --> 00:04:26,475
and things like that. 

84
00:04:26,550 --> 00:04:31,650
You may not remember every single little detail from this lecture because we're gonna go pretty fast through some of the material, 

85
00:04:31,700 --> 00:04:33,175
but it's all on the lecture notes, 

86
00:04:33,200 --> 00:04:36,925
and then the exercises actually give you links to some tutorials and things. 

87
00:04:36,925 --> 00:04:42,250
So I highly recommend that you actually go through all the exercises, at least the non-advanced exercises. 

88
00:04:42,900 --> 00:04:45,250
Any questions so far?

89
00:04:46,935 --> 00:04:48,310
Great.

90
00:04:48,725 --> 00:04:53,600
Okay so one of the really cool ideas behind vim is that vim is a modal editor. 

91
00:04:53,600 --> 00:04:56,400
What does this mean? Modal comes from the word mode, 

92
00:04:56,400 --> 00:04:59,475
and this means that vim has multiple operating modes, 

93
00:04:59,500 --> 00:05:03,875
and this is kind of developed from the idea that when you're programming, 

94
00:05:03,875 --> 00:05:06,050
there are often times where you're doing different types of things. 

95
00:05:06,100 --> 00:05:07,525
Like sometimes you're reading code, 

96
00:05:07,525 --> 00:05:09,650
sometimes you're making small edits to code, 

97
00:05:09,650 --> 00:05:13,075
like you're finding a particular point and changing a little thing somewhere. 

98
00:05:13,075 --> 00:05:18,100
Sometimes you're just writing a lot of code in one go, like suppose you're just writing a function from scratch. 

99
00:05:18,200 --> 00:05:21,675
And so there are different operating modes for doing these different types of things. 

100
00:05:22,200 --> 00:05:27,525
And so I'm actually going to write this down on the blackboard so I'll have a useful thing to refer to later. 

101
00:05:27,575 --> 00:05:33,675
When you start vim up, it starts up in what's called normal mode. 

102
00:05:33,700 --> 00:05:37,400
And in this mode, all the different key combinations behave in one way. 

103
00:05:37,425 --> 00:05:41,750
And then there are different key combinations that switch you between normal mode and other modes, 

104
00:05:41,750 --> 00:05:43,850
which change the meaning of different keys. 

105
00:05:43,850 --> 00:05:51,300
So for the most part, you'll be spending most of your time in vim in normal mode or what is called insert mode. 

106
00:05:53,550 --> 00:05:58,150
And to go to insert mode, you press the key "i" for normal mode, 

107
00:05:58,150 --> 00:06:02,300
and to go from insert mode back to normal mode, you press the "Escape" key. 

108
00:06:04,900 --> 00:06:07,800
A little note on notation because we'll need this later. 

109
00:06:08,475 --> 00:06:11,255
In the notation, I'm going to be using in this lecture 

110
00:06:11,255 --> 00:06:14,500
and what's also in the lecture notes and what vim uses to give you feedback, 

111
00:06:14,500 --> 00:06:17,175
they have a couple of different ways of talking about different keys. 

112
00:06:17,200 --> 00:06:21,467
So when they're talking about bare keys like just the "i" key on your keyboard, they'll just say "i" .

113
00:06:21,525 --> 00:06:25,075
But for different key combinations, like when you press "Ctrl" and something 

114
00:06:25,100 --> 00:06:30,650
like say, control-V, it's notated in one of approximately three ways. 

115
00:06:30,650 --> 00:06:35,075
One way that can be notated is a caret and then the control character "^V". 

116
00:06:35,075 --> 00:06:36,900
So this is "^V". 

117
00:06:37,000 --> 00:06:39,176
Another way this might be written I think,

118
00:06:39,176 --> 00:06:42,025
we've written it this way in lecture notes as "Ctrl-V", 

119
00:06:42,025 --> 00:06:43,700
this is probably the one you're more used to seeing. 

120
00:06:43,700 --> 00:06:50,250
And then in some parts of vim, this is written as angle brackets C, V close angle bracket "".

121
00:06:50,325 --> 00:06:52,775
So just a little bit of notation that will be useful later. 

122
00:06:53,650 --> 00:06:57,150
So yeah, vim has a couple of different modes, 

123
00:06:57,150 --> 00:06:59,596
where normal mode is designed for 

124
00:06:59,596 --> 00:07:03,675
navigating around a file, reading things, going from file to file, things like that. 

125
00:07:03,675 --> 00:07:06,300
And then insert mode is where you type in text. 

126
00:07:06,350 --> 00:07:09,975
So most keys that you press here will just go into your text buffer, 

127
00:07:10,000 --> 00:07:13,600
whereas keys that you press here are not being put into the buffer 

128
00:07:13,600 --> 00:07:16,325
and instead are used for things like navigation or making edits. 

129
00:07:19,100 --> 00:07:21,750
And actually, the picture is a little bit more complicated than this. 

130
00:07:21,750 --> 00:07:23,425
There are a whole bunch of other modes, 

131
00:07:23,425 --> 00:07:26,550
and I'm just gonna write them down here because we'll have them here to refer to later. 

132
00:07:26,600 --> 00:07:30,050
And so vim also has a replace mode, 

133
00:07:30,050 --> 00:07:35,650
for rather than inserting text and kind of pushing what's ahead of it forward, it will overwrite text. 

134
00:07:35,700 --> 00:07:39,050
And then it has a bunch of different modes for selection, 

135
00:07:43,425 --> 00:07:45,550
so it has a mode called visual mode, 

136
00:07:45,550 --> 00:07:50,000
and then it has visual line and visual block. 

137
00:07:51,625 --> 00:08:00,850
This one is entered via the "r" key; this was entered via the "v" key; this one is entered via "S-v", 

138
00:08:00,850 --> 00:08:04,025
and this one is entered via "C-v". 

139
00:08:04,800 --> 00:08:16,000
And then there's the command line mode, which is entered via the ":" key. 

140
00:08:19,175 --> 00:08:32,650
Okay, so now that we have that on the board to refer to later, we can actually try some of this out. 

141
00:08:33,675 --> 00:08:36,700
All right, so one thing we noticed looking at that picture 

142
00:08:36,700 --> 00:08:40,050
is that to go from normal mode to any of the other modes, we press some key, 

143
00:08:40,100 --> 00:08:42,375
but to go from any of the other modes back to normal mode, 

144
00:08:42,375 --> 00:08:43,725
where we spend a lot of our time, 

145
00:08:43,725 --> 00:08:45,900
we use the "Escape" on our keyboard. 

146
00:08:46,725 --> 00:08:50,500
So for this reason, since you'll be pressing the "Escape" a lot when using vim, 

147
00:08:50,500 --> 00:08:54,075
a lot of programmers rebind one of the keys on their keyboard to be Escape, 

148
00:08:54,075 --> 00:08:59,150
because it's really inconvenient to reach up with your left pinkie to press   that tiny little "Escape" in the corner of your keyboard. 

149
00:08:59,200 --> 00:09:01,650
And so a lot of people use the "CapsLK" key instead, 

150
00:09:01,650 --> 00:09:03,800
so it's right there in the home row, 

151
00:09:04,000 --> 00:09:08,475
and we have some links in the lecture notes for how you can do this key rebinding. 

152
00:09:13,575 --> 00:09:17,125
Okay, so now that we've talked about kind of one of the core ideas of vim, 

153
00:09:17,125 --> 00:09:19,600
the idea of modal editing, we can talk about some of the basics, 

154
00:09:19,600 --> 00:09:24,400
like how do you open up this text editor, how do you open file save files, and things like that. 

155
00:09:24,550 --> 00:09:29,850
And so this is a command-line based program, although there are some graphical variants, 

156
00:09:29,850 --> 00:09:33,150
and the way you start this program is by running "vim". 

157
00:09:33,225 --> 00:09:37,950
One thing you might notice is that in the bottom left corner of my screen, they actually saw what I just typed. 

158
00:09:37,950 --> 00:09:42,425
This will be useful later in this lecture, where I'm actually typing in commands for vim, 

159
00:09:42,425 --> 00:09:44,175
and I'll be saying what I'm typing, 

160
00:09:44,175 --> 00:09:45,650
but you'll also see it on the screen. 

161
00:09:45,650 --> 00:09:49,225
So if I press "Ctrl+C", you'll see it says "^C" over there. 

162
00:09:49,225 --> 00:09:51,850
Is that text big enough for everybody to read? 

163
00:09:52,650 --> 00:10:00,325
Great. okay, So the way we open Vim is just by running the program "Vim" on our command line, 

164
00:10:00,325 --> 00:10:02,775
and this comes pre-installed on most systems. 

165
00:10:02,775 --> 00:10:05,900
If you don't have it, you can install it using your package manager. 

166
00:10:05,900 --> 00:10:09,425
vim can also take an argument if we want to use it to edit a particular file 

167
00:10:09,425 --> 00:10:12,450
instead of just opening up the program then later opening a file.

168
00:10:12,475 --> 00:10:18,000
So for example, I have a file in this directory; this is actually the lecture notes for this lecture. 

169
00:10:18,025 --> 00:10:20,600
So, I can do "vim editors.md" and press "ENTER", 

170
00:10:20,650 --> 00:10:22,650
and then boom, vim is started. 

171
00:10:23,225 --> 00:10:28,825
And then in this lecture, I'm not running vim in the completely Exton configuration.

172
00:10:28,850 --> 00:10:35,150
I've configured a couple of things that behave a little bit nicer by default,

173
00:10:35,150 --> 00:10:39,700
little things like having line numbers on the left or having some more status information on the bottom. 

174
00:10:39,700 --> 00:10:42,000
If you want to start with this default configuration, 

175
00:10:42,000 --> 00:10:46,025
we have a link to this in the lecture notes so you can get a slightly more sane config by default. 

176
00:10:48,650 --> 00:10:51,467
So, once you've opened vim, what do you do? 

177
00:10:51,467 --> 00:10:53,800
Well, as I said earlier, vim starts in normal mode. 

178
00:10:53,800 --> 00:10:58,925
So, if I just start typing letters like, say, type "x", it doesn't insert "x" into the buffer. 

179
00:10:58,925 --> 00:11:02,750
You can see the cursor up in the top left: it actually deleted one of the characters. 

180
00:11:02,750 --> 00:11:05,300
That's because I'm in normal mode, not insert mode. 

181
00:11:05,300 --> 00:11:10,200
So, insert mode is basically what you're used to with all the other text editors you've used in the past, 

182
00:11:10,200 --> 00:11:11,906
 where there's a cursor somewhere, you press the character, 

183
00:11:11,906 --> 00:11:14,306
and it just goes into your buffer. 

184
00:11:14,600 --> 00:11:17,775
I'm instead in vim, you start in normal mode, 

185
00:11:17,775 --> 00:11:19,800
and you can press "i" to go into insert mode. 

186
00:11:19,800 --> 00:11:24,950
so see I've pressed "i", and then in the bottom left, notice that it says "INSERT--".

187
00:11:25,125 --> 00:11:29,175
The bottom left always tells you what mode you're in, unless this normal mode, in which case it's blank. 

188
00:11:29,250 --> 00:11:35,000
Now that I'm in insert mode, if I press the "x" character, for example, it just gets inserted into my text buffer, 

189
00:11:35,025 --> 00:11:37,375
and I can backspace over it, type other stuff, 

190
00:11:37,375 --> 00:11:41,475
and now my text editor kind of behaves like you'd expect any other program to behave. 

191
00:11:42,000 --> 00:11:46,675
So from this point, how do I go back to normal mode if I want to stop inserting characters? 

192
00:11:47,250 --> 00:11:53,900
Yes, exactly. I press "Escape". And that's the symbol my keystroke visualizer uses for "Escape", 

193
00:11:53,900 --> 00:11:56,175
so just be aware of that. 

194
00:11:57,650 --> 00:12:01,775
Vim has this idea that using the mouse is inefficient. 

195
00:12:01,775 --> 00:12:06,225
Like, your hands are on the keyboard, moving your hand over to the mouse takes a lot of time, right? 

196
00:12:06,225 --> 00:12:10,700
You don't want to waste those couple of milliseconds while you're programming, like in the middle of things. 

197
00:12:10,700 --> 00:12:15,125
So, instead, all vim functionality can be accessed just through the keyboard. 

198
00:12:15,125 --> 00:12:20,900
And it's all sorts of things you might be used to doing, like opening files by going, like, "file open", or "file save", 

199
00:12:20,900 --> 00:12:23,825
or things like that, or instead accessed through the keyboard. 

200
00:12:23,850 --> 00:12:25,125
How is that done? 

201
00:12:25,125 --> 00:12:28,625
That's done through one of the other vim modes that are on the board over there. 

202
00:12:28,625 --> 00:12:31,150
In particular, through command line mode. 

203
00:12:31,450 --> 00:12:35,400
So, if you're in normal mode and you press the ":" key, 

204
00:12:35,400 --> 00:12:37,000
you'll notice that the cursor--

205
00:12:37,000 --> 00:12:40,725
I guess my visualizer is covering the thing right now but it's gone.

206
00:12:40,725 --> 00:12:45,600
The cursor jumps to the bottom left and it shows that ":" I just typed. 

207
00:12:45,650 --> 00:12:47,925
And now, I can type in a command. 

208
00:12:47,975 --> 00:12:52,600
So, you can think of this almost like the command shell   that we've talked been talking about over the last few days, 

209
00:12:52,600 --> 00:12:54,750
except this is vim's command shell, 

210
00:12:54,750 --> 00:12:57,275
so you give vim commands here, instead of shell commands. 

211
00:12:57,550 --> 00:13:00,950
And there are a bunch of built-in commands that do all the things that you're used to. 

212
00:13:00,950 --> 00:13:04,675
Like, for example, one command that you might want to know is how to quit this editor. 

213
00:13:04,675 --> 00:13:06,450
You might notice that if you're in normal mode,  

214
00:13:06,450 --> 00:13:09,186
I can press "Escape" to go back from command line mode to normal mode,

215
00:13:09,200 --> 00:13:14,325
and I press "Ctrl+C", unlike what happens to a lot of programs, this doesn't quit vim. 

216
00:13:14,450 --> 00:13:16,875
So, how do I quit vim? I can press ":", 

217
00:13:16,875 --> 00:13:18,850
and then go into command line mode, 

218
00:13:18,850 --> 00:13:20,525
and then I can type in the command "quit". 

219
00:13:20,550 --> 00:13:21,550
"Q-U-I-T". 

220
00:13:21,850 --> 00:13:23,200
You'll see that  

221
00:13:23,200 --> 00:13:27,250
I maybe I should move this over to the middle or something.

222
00:13:27,250 --> 00:13:30,442
See, it says ":quit" and I press "ENTER",and it quits vim.

223
00:13:30,675 --> 00:13:32,275
I can open vim up again. 

224
00:13:32,275 --> 00:13:35,175
There's actually a short form for this command, just ":q", 

225
00:13:35,350 --> 00:13:37,350
and that'll do the same thing. 

226
00:13:37,575 --> 00:13:40,375
And, there are a bunch of other useful commands like this. 

227
00:13:40,475 --> 00:13:44,275
So, some other handy ones to know are how do you save a file? 

228
00:13:44,275 --> 00:13:47,275
So, suppose I make some edits here, like "hello world". 

229
00:13:47,350 --> 00:13:49,975
So, I pressed "i" to go into insert mode 

230
00:13:50,850 --> 00:13:52,625
or let me redo that.

231
00:13:52,625 --> 00:13:54,500
I press "i" to go into insert mode. 

232
00:13:54,500 --> 00:13:57,900
Right now, I can use "the down arrow" to... 

233
00:14:00,000 --> 00:14:04,000
I think I've slightly I should fix that. Can you fix the config, actually, John? 

234
00:14:05,675 --> 00:14:06,775
Never mind that. 

235
00:14:06,775 --> 00:14:07,575
Okay, 

236
00:14:07,575 --> 00:14:12,125
so, suppose I go down to this line, 

237
00:14:12,400 --> 00:14:14,825
and I press "i" to go into insert mode, 

238
00:14:14,825 --> 00:14:15,850
and type in some text, 

239
00:14:15,950 --> 00:14:18,225
and then press "Escape" to go back to normal mode. 

240
00:14:18,300 --> 00:14:21,625
Now, how do I actually save this file? Well, there's another command for that. 

241
00:14:21,625 --> 00:14:23,625
So, ":" to go into command mode, 

242
00:14:23,625 --> 00:14:25,600
and then I can type "w"

243
00:14:25,600 --> 00:14:28,100
and press "Enter". 

244
00:14:28,100 --> 00:14:29,800
"w" stands for write. 

245
00:14:29,800 --> 00:14:34,825
And, it says in the bottom "editors.md" whatever blah blah written. 

246
00:14:34,975 --> 00:14:39,200
And so, this means it saved the file and so now if I ":q" to quit 

247
00:14:39,200 --> 00:14:43,325
and open the same file, again, you'll see that the changes have been persisted. 

248
00:14:45,700 --> 00:14:47,825
There are a couple other there's... 

249
00:14:47,825 --> 00:14:51,175
So, there's a ton of different vim commands that are useful for different reasons. 

250
00:14:51,175 --> 00:14:54,500
But, I'll just explain a couple more to you now. 

251
00:14:54,500 --> 00:14:57,625
One command that's really useful is "help", ":help".

252
00:14:57,625 --> 00:15:00,300
And you can do ":help", 

253
00:15:00,300 --> 00:15:04,225
and then type in a particular key, or a particular command, 

254
00:15:04,225 --> 00:15:06,750
and get help for that keystroke or that command. 

255
00:15:06,775 --> 00:15:13,275
So, if I want to know what ":w" does, I can do ":help :w", 

256
00:15:13,950 --> 00:15:20,575
and that'll give me the documentation on ":w" or ":write". 

257
00:15:20,625 --> 00:15:24,725
If I do ":q", it'll close this window and bring me back to where I was before. 

258
00:15:24,725 --> 00:15:30,425
And, notice that ":help :w" is different from ":help w", 

259
00:15:30,425 --> 00:15:38,825
because the "w" key is the W that, like, when you're in normal mode and press "w", 

260
00:15:38,825 --> 00:15:41,475
what happens is just the "w" key here without the ":". 

261
00:15:41,600 --> 00:15:45,950
And, if I look for help for ":w", that's the help for the "w" command. 

262
00:15:48,425 --> 00:15:57,625
So, now you basically have the bare fundamentals needed to use vim, right?

263
00:15:57,625 --> 00:15:59,175
You can open the editor, 

264
00:15:59,175 --> 00:16:01,500
use it to edit a particular file, 

265
00:16:01,500 --> 00:16:04,125
press "i" to go into insert mode and type in some text, 

266
00:16:04,125 --> 00:16:05,975
press "Escape" to go back to normal mode, 

267
00:16:05,975 --> 00:16:08,300
and then ":w: to save your changes, ":w" to quit. 

268
00:16:08,300 --> 00:16:14,700
So, like already you have the bare fundamentals necessary to edit files using vim, that will be somewhat inefficiently. 

269
00:16:14,700 --> 00:16:18,875
So, any questions so far?  Yeah in the back. 

270
00:16:22,350 --> 00:16:26,100
Yeah so the question is, What's the benefit of the normal mode? 

271
00:16:26,100 --> 00:16:28,633
And, we'll talk about that in more detail, in like five minutes. 

272
00:16:28,633 --> 00:16:32,450
But, in short, insert mode is just for typing in text. 

273
00:16:32,450 --> 00:16:34,150
So, I'm in insert mode, I can type in text. 

274
00:16:34,150 --> 00:16:39,525
But, when I'm programming, I actually spend a lot of time moving around my file making small little changes. 

275
00:16:39,525 --> 00:16:45,800
So, I go here and like, oh maybe I want to change this "https" link to an "http". 

276
00:16:45,800 --> 00:16:49,150
I can make like small point edits, things like that, in normal mode. 

277
00:16:49,150 --> 00:16:51,600
And we'll see a whole lot more of that in about five minutes. 

278
00:16:51,600 --> 00:16:58,300
Good question! Any other questions? Okay cool. 

279
00:16:58,350 --> 00:17:00,175
So, moving along, 

280
00:17:02,650 --> 00:17:06,675
one other thing that's kind of useful to know, I think, 

281
00:17:06,725 --> 00:17:15,250
is, at a high level, vim's model of buffers versus windows versus tabs. 

282
00:17:15,250 --> 00:17:19,950
So, it's probably the case that whatever program you were using before, like Sublime Text or VS Code or whatever, 

283
00:17:19,950 --> 00:17:22,275
you could open multiple files in it, right, 

284
00:17:22,275 --> 00:17:26,225
and you could probably have multiple tabs open and have multiple windows open of your editor. 

285
00:17:26,225 --> 00:17:29,250
So, vim also has a notion of those different things. 

286
00:17:29,250 --> 00:17:32,950
But, its model is a little bit different than most other programs. 

287
00:17:32,950 --> 00:17:39,700
So, vim maintains a set of open buffers - that's the word it uses for open files   and so, it has a set of open files, 

288
00:17:39,700 --> 00:17:43,250
and then kind of separately from that, you can have a number of tabs, 

289
00:17:43,250 --> 00:17:44,900
and tabs can have windows. 

290
00:17:44,900 --> 00:17:49,425
The kind of weird thing which makes vim a little bit different than   the program you've probably used in the past is that 

291
00:17:49,425 --> 00:17:54,250
there isn't necessarily a one-to-one correspondence between buffers and windows. 

292
00:17:54,275 --> 00:17:56,250
So, one thing I can do, for example, here 

293
00:17:56,250 --> 00:17:58,775
and we'll show you the key combinations and stuff for this later

294
00:17:58,775 --> 00:18:01,775
but one thing you can do is create two different windows. 

295
00:18:01,775 --> 00:18:02,975
So, I have one window up here, 

296
00:18:02,975 --> 00:18:04,700
and then one window down here. 

297
00:18:04,700 --> 00:18:07,650
And, notice that the same files open in both windows. 

298
00:18:07,675 --> 00:18:11,450
So, if I make some edits over here, they actually happen in the bottom window, as well, 

299
00:18:11,450 --> 00:18:13,750
because it's the same buffer that's open in both windows. 

300
00:18:14,575 --> 00:18:19,550
And, this is kind of useful, for, say, looking at two different parts of a single file at the same time. 

301
00:18:19,550 --> 00:18:21,450
Like, so you want to be able to look at the top of a file, 

302
00:18:21,450 --> 00:18:26,225
say at an import to your program, while you're down below, working somewhere else. 

303
00:18:26,225 --> 00:18:32,075
So, this is one helpful thing to keep in mind, that vim has this idea of - there are a number of tabs, 

304
00:18:32,075 --> 00:18:35,650
and each tab has some number of windows, 

305
00:18:35,650 --> 00:18:39,025
and then each window has, uh, corresponds to some buffer. 

306
00:18:39,025 --> 00:18:42,900
But, a particular buffer can be open in zero or more windows at a time. 

307
00:18:42,900 --> 00:18:45,575
Just one thing that confused me when I was initially learning vim, 

308
00:18:45,575 --> 00:18:47,400
so I want to explain that early on. 

309
00:18:47,400 --> 00:18:52,725
And then, the ":q" command, which we talked about earlier, is not exactly quit. 

310
00:18:52,725 --> 00:18:54,925
It's kind of "close the current window", 

311
00:18:54,925 --> 00:18:57,150
and then, when there are no more open windows, vim will quit. 

312
00:18:57,150 --> 00:19:02,500
So, here, if I do ":q", it'll only close the window, I think, on the top here because that's the one I was in, 

313
00:19:02,500 --> 00:19:05,800
and, now, the remaining window becomes fullscreen. 

314
00:19:05,800 --> 00:19:07,625
I can do ":q" again to close this. 

315
00:19:07,625 --> 00:19:09,525
Now we're in the second tab that I'd opened. 

316
00:19:09,525 --> 00:19:13,025
If I do ":q" final time, okay, now, vim exits. 

317
00:19:14,125 --> 00:19:16,650
And if you don't want to press ":q""" way too many times... 

318
00:19:16,650 --> 00:19:18,475
Okay, so, here I have thre"E" split windows. 

319
00:19:18,475 --> 00:19:23,350
If I do ":qa", for quit all, it closes all the open windows. 

320
00:19:25,775 --> 00:19:30,200
All right, so, now, to answer your question of "What is normal mode actually for?" 

321
00:19:30,200 --> 00:19:32,650
This is another, really cool idea in vim, 

322
00:19:32,650 --> 00:19:36,875
and I think this is actually, like, the most fundamentally interesting idea of this program. 

323
00:19:37,225 --> 00:19:39,300
It's that, like, you're all programmers, 

324
00:19:39,300 --> 00:19:40,750
you like programming; 

325
00:19:41,250 --> 00:19:44,300
vim has this idea that vim's normal mode, 

326
00:19:44,300 --> 00:19:48,075
like, vim's interface, itself, is a programming language. 

327
00:19:48,150 --> 00:19:49,900
And, let me repeat that. 

328
00:19:49,900 --> 00:19:54,300
That's like a kind of fundamentally interesting idea - the interface is a programming language. 

329
00:19:54,350 --> 00:19:58,375
What does that mean? It means that different key combinations have different effects, 

330
00:19:58,400 --> 00:20:01,750
and, once you learn the different effects, you can actually combine them together

331
00:20:01,750 --> 00:20:03,100
Just like in a programming language， 

332
00:20:03,100 --> 00:20:06,925
you can learn different functions and stuff and then glue them all together to make an interesting program. 

333
00:20:06,925 --> 00:20:10,375
In the same way, once you learn vim's different movement and editing commands, 

334
00:20:10,375 --> 00:20:15,600
and things like that, you can talk to vim by programming vim through its interface. 

335
00:20:15,600 --> 00:20:21,325
And, once this becomes muscle memory, you can basically edit files at the speed at which you think. 

336
00:20:21,325 --> 00:20:25,500
Like at least for me, I don't think I've been able to do this   with any other text editor that I've used in the past, 

337
00:20:25,500 --> 00:20:27,400
but this one gets pretty close. 

338
00:20:28,300 --> 00:20:31,650
So, let's dig into how exactly normal mode works. 

339
00:20:31,650 --> 00:20:36,200
So, you can try to follow along with this, like, open up some random file in vim, 

340
00:20:36,200 --> 00:20:39,050
and follow some of the key combinations I type in. 

341
00:20:39,050 --> 00:20:42,950
So, one basic thing that you might want to do, is just navigate around a buffer. 

342
00:20:42,950 --> 00:20:45,025
Like, move your cursor up/down/ left/right. 

343
00:20:45,025 --> 00:20:49,125
And so the way you do that in vim, is using the "hjkl" keys, not the arrow keys. 

344
00:20:49,125 --> 00:20:51,344
Though they do work by default, try to avoid them, 

345
00:20:51,344 --> 00:20:54,075
because you don't want to have to move your hand all the way over to the arrow keys. 

346
00:20:54,075 --> 00:20:55,875
like there's a ton of time you're wasting, right? 

347
00:20:55,875 --> 00:20:58,150
"hjkl" is right on the home row. 

348
00:20:58,150 --> 00:21:04,475
And, so, "j" moves down, "k" moves up, "h" moves left, and "l" moves right.

349
00:21:04,800 --> 00:21:07,000
And, this may seem a little unintuitive now, 

350
00:21:07,000 --> 00:21:09,225
there was some historical reason for it, 

351
00:21:09,250 --> 00:21:12,750
like the keyboard the original vi developer used had the "hjkl" keys, 

352
00:21:12,750 --> 00:21:15,925
like labeled and arranged in a way that made this more reasonable. 

353
00:21:15,925 --> 00:21:18,400
But, this will very soon become muscle memory. 

354
00:21:18,400 --> 00:21:22,500
So, this is the basic way you can move your cursor around while in normal mode. 

355
00:21:23,650 --> 00:21:25,050
Now, what else can you do? 

356
00:21:25,050 --> 00:21:28,350
Well, if we had to move around files like this, it'd be really slow. 

357
00:21:28,350 --> 00:21:30,875
We don't want to have to hold down these keys, 

358
00:21:30,875 --> 00:21:33,225
and like, wait for a long time for vim to do its thing. 

359
00:21:33,225 --> 00:21:36,675
And so, there are all these other, different key combinations for doing different movements. 

360
00:21:36,675 --> 00:21:38,650
Also, by the way, this is all in the lecture notes, 

361
00:21:38,650 --> 00:21:41,700
so you don't need to memorize every single key and its meaning right now. 

362
00:21:42,275 --> 00:21:46,675
Just try to understand the overall idea that vim's interface is a programming language. 

363
00:21:46,675 --> 00:21:49,350
So, another thing you can do is press the "w" key. 

364
00:21:49,350 --> 00:21:51,775
This moves the cursor forward by one word. 

365
00:21:51,775 --> 00:21:56,500
And then, similarly, the "b" key moves the cursor backward by one word. 

366
00:21:56,500 --> 00:22:00,100
So, this allows slightly more efficient movement within the line. 

367
00:22:00,100 --> 00:22:03,575
There's also the "e" key for moving to the end of a word. 

368
00:22:03,625 --> 00:22:05,425
I'm going to move this over a little bit. 

369
00:22:05,675 --> 00:22:07,575
So, if I'm here, for example, 

370
00:22:07,575 --> 00:22:11,750
and I press the "e" key it'll go to the end of this word, end of this word, end of the next word and so on. 

371
00:22:12,750 --> 00:22:15,425
You can also move by whole lines, 

372
00:22:15,425 --> 00:22:19,300
so "0" moves to the beginning of a line, "$" moves to the end of a line, 

373
00:22:19,300 --> 00:22:23,725
and "^" moves to the first non-empty character on a line. 

374
00:22:23,725 --> 00:22:28,397
So, let me find one of those, for example. 

375
00:22:29,175 --> 00:22:32,730
So, here, my cursor's right here;   

376
00:22:32,730 --> 00:22:37,050
if I press "0", my cursor goes to the beginning of the line, "$", end of the current line; 

377
00:22:37,050 --> 00:22:40,900
and if I press "^", where, like, on what character will the curser end up? 

378
00:22:40,925 --> 00:22:42,175
Can anybody guess? 

379
00:22:43,350 --> 00:22:49,400
So, "^" goes to the first non-empty character on a line, kind of like Regex "^". 

380
00:22:51,275 --> 00:22:54,075
Yeah, exactly! It goes to this "-". 

381
00:22:55,975 --> 00:22:58,100
Let's talk about some more movement commands. 

382
00:22:58,100 --> 00:23:01,075
There're ways to scroll up and down in a buffer, 

383
00:23:01,075 --> 00:23:04,175
so "Ctrl+U" goes up, 

384
00:23:04,175 --> 00:23:06,875
and "Ctrl+D" scrolls down. 

385
00:23:06,875 --> 00:23:10,350
So, this is better than holding down the "k" or "j" keys, for example. 

386
00:23:10,350 --> 00:23:13,475
This is a lot slower than moving by entire pages. 

387
00:23:13,475 --> 00:23:15,375
"Ctrl+D" and "Ctrl+U". 

388
00:23:16,950 --> 00:23:19,675
There's also ways to move by the entire buffer. 

389
00:23:19,675 --> 00:23:21,850
So, "G" moves all the way down... 

390
00:23:21,850 --> 00:23:23,950
"gg" moves all the way up. 

391
00:23:25,675 --> 00:23:28,325
Some of these movement keys are mnemonics;   

392
00:23:28,325 --> 00:23:30,325
so, they're like, a little bit easier to remember for that reason right,

393
00:23:30,325 --> 00:23:33,075
like, "w" is word, "b" is beginning of word, "e" is end of word. 

394
00:23:33,075 --> 00:23:34,775
Those all seem pretty logical. 

395
00:23:34,775 --> 00:23:37,825
"0", "^" and "$", kind of inspired from Regex, 

396
00:23:37,825 --> 00:23:39,225
so those make a little bit of sense. 

397
00:23:39,225 --> 00:23:42,700
There's some other ones that, like, don't necessarily make way too much sense, 

398
00:23:42,700 --> 00:23:44,225
but, there are only so many keys on your keyboard, 

399
00:23:44,225 --> 00:23:45,225
so what are you going to do? 

400
00:23:45,925 --> 00:23:51,100
For example, the "L" key moves your cursor to the lowest line that's shown on the screen. 

401
00:23:51,100 --> 00:23:53,775
"L" for lowest makes sense, "M" for middle, 

402
00:23:53,775 --> 00:23:56,450
and then "H" for highest, I guess. 

403
00:23:59,700 --> 00:24:03,000
And, there's a whole bunch of other interesting movements like this. 

404
00:24:03,000 --> 00:24:05,775
So, we're obviously not going to be able to cover all of them right now, 

405
00:24:05,800 --> 00:24:10,575
but you'll be able to go through them in the vim tutor exercise, which is exercise number one for this lecture. 

406
00:24:10,575 --> 00:24:17,825
Some other ones I want to talk about now - maybe I'll talk about one more. 

407
00:24:17,825 --> 00:24:19,400
There's another movement called "find". 

408
00:24:19,400 --> 00:24:20,725
This is also kind of useful. 

409
00:24:20,725 --> 00:24:21,850
Suppose I'm on this line, 

410
00:24:21,850 --> 00:24:24,850
and I want to jump to the first character that equal to... 

411
00:24:24,850 --> 00:24:26,725
Like, I want to jump to the first "o". 

412
00:24:26,725 --> 00:24:28,250
I can press "fo", 

413
00:24:28,250 --> 00:24:31,325
and my cursor moves to the first "o". 

414
00:24:31,325 --> 00:24:32,725
I've like, found "o". 

415
00:24:32,725 --> 00:24:35,825
I can do "fw" and it'll move to the first "w", which I think is right here. 

416
00:24:35,825 --> 00:24:38,200
"fc" find the first "c". 

417
00:24:38,949 --> 00:24:41,099
I can also do the same thing, but backwards. 

418
00:24:41,099 --> 00:24:45,300
If I do "Fw", I can find the "w" that's before it. 

419
00:24:45,400 --> 00:24:48,750
"Fs" find the "s" that's before that. 

420
00:24:48,750 --> 00:24:52,300
And then, there's a variant of "f" for "find" - "t" for "to", 

421
00:24:52,350 --> 00:24:54,300
so I can jump to "o", 

422
00:24:54,300 --> 00:24:56,800
and it jumps, like, until it's found "o". 

423
00:24:56,800 --> 00:24:58,550
But not on top of it, right before it. 

424
00:24:58,550 --> 00:25:05,975
And "T" say, "T" jumps backwards to the t except not all the way on top of it, one character before. 

425
00:25:06,275 --> 00:25:07,900
And so, you can already see

426
00:25:07,900 --> 00:25:12,225
that idea I talked about of like, vim is a programming language; you can, like, compose these commands. 

427
00:25:12,225 --> 00:25:18,800
"f" and "t" are "find" and "to", and you can say find a particular character, or jump to a particular character. 

428
00:25:19,400 --> 00:25:21,950
So, those are a couple of vim movement commands. 

429
00:25:21,950 --> 00:25:28,325
So, any questions about those so far? So this is... yeah, question? 

430
00:25:28,725 --> 00:25:31,750
No? Okay, cool. 

431
00:25:31,750 --> 00:25:33,825
So, those are vim movement commands. 

432
00:25:33,825 --> 00:25:37,050
This is how you can navigate around a file quickly in normal mode. 

433
00:25:37,050 --> 00:25:40,700
Now, another category of useful commands are editing commands. 

434
00:25:40,700 --> 00:25:47,000
So, one we kind of already talked about is the "i" command for moving from normal mode to insert mode, 

435
00:25:47,000 --> 00:25:49,000
where you can start just writing text. 

436
00:25:49,000 --> 00:25:50,990
So, suppose I go up here and I press "i". 

437
00:25:50,990 --> 00:25:53,875
Now I can type in whatever text I want "Hello world", "Enter". 

438
00:25:56,250 --> 00:25:58,350
Then, press "Escape" to go back to normal mode, 

439
00:25:58,350 --> 00:26:00,475
and I've made a change to my buffer. 

440
00:26:00,475 --> 00:26:03,925
But, there are a whole bunch of other commands for making efficient edits 

441
00:26:03,925 --> 00:26:06,800
that makes sense for when you're dealing with programming languages. 

442
00:26:06,825 --> 00:26:11,675
So, one useful command that I accidentally used earlier, before teaching you about it, is the "o" command. 

443
00:26:11,675 --> 00:26:14,000
So, suppose my cursor is, like, over here, 

444
00:26:14,000 --> 00:26:19,750
and if I press "o", from normal mode, what it does, is it opens a new line below where my cursor is. 

445
00:26:19,750 --> 00:26:21,350
That's what "o" stands for. 

446
00:26:21,350 --> 00:26:22,975
And it, so it creates a new line,

447
00:26:22,975 --> 00:26:24,000
and it put me into insert mode. 

448
00:26:24,000 --> 00:26:26,750
So, now I can start typing in some text, press "Escape", 

449
00:26:26,750 --> 00:26:28,050
and go back to normal mode. 

450
00:26:28,100 --> 00:26:32,150
And then, just like the "o" command, there's a capital "O" command, 

451
00:26:32,150 --> 00:26:38,850
so if I'm here and I do capital "O", it puts me into insert mode above where I currently am. 

452
00:26:40,425 --> 00:26:42,825
There's another vim command for deleting things. 

453
00:26:42,825 --> 00:26:48,125
So, suppose my cursor is, like, on top of this word right here, 

454
00:26:48,125 --> 00:26:50,275
and I press the "d" key. 

455
00:26:50,275 --> 00:26:51,350
"d" for delete. 

456
00:26:51,350 --> 00:26:56,650
Oh, nothing happens; turns out that the d key needs to be combined with a movement command. 

457
00:26:56,650 --> 00:27:00,075
So, remember we just talked about different movement commands, like "hjkl", 

458
00:27:00,075 --> 00:27:03,625
and, like, word, and backward word, and things like that. 

459
00:27:03,650 --> 00:27:04,950
So, I press "d". 

460
00:27:05,875 --> 00:27:08,550
I press "d" and I can press "w", 

461
00:27:08,550 --> 00:27:10,075
and it's deleted a word. 

462
00:27:10,875 --> 00:27:12,350
So, let me undo that. 

463
00:27:12,350 --> 00:27:14,825
Undoing in vim is just "u" for undo. 

464
00:27:14,825 --> 00:27:16,850
So, notice my cursor's right here. 

465
00:27:16,850 --> 00:27:19,400
I do "dw", it's deleted a word. 

466
00:27:19,400 --> 00:27:20,425
I can move around, 

467
00:27:20,425 --> 00:27:22,100
and then delete another word. 

468
00:27:22,100 --> 00:27:26,800
Suppose I'm... uh, keeps getting in the way. Suppose I'm, like, 

469
00:27:26,800 --> 00:27:28,225
somewhere in the middle of a word, 

470
00:27:28,225 --> 00:27:29,950
and I want to delete to the end of a word. 

471
00:27:29,950 --> 00:27:38,300
Any guesses for what combination of keys I'd use for that? "d" and what? "de", exactly. 

472
00:27:38,300 --> 00:27:40,250
Delete to the end of the word. 

473
00:27:42,200 --> 00:27:44,900
Another useful editing command is the "c" command. 

474
00:27:44,900 --> 00:27:46,500
"c" stands for change. 

475
00:27:46,500 --> 00:27:48,936
So, change is really similar to delete,

476
00:27:48,936 --> 00:27:52,450
except change puts you in insert mode, because, like, I want to delete a thing, 

477
00:27:52,450 --> 00:27:53,975
but change it to something else. 

478
00:27:53,975 --> 00:27:55,050
So, if I'm here, 

479
00:27:55,050 --> 00:27:58,200
and I do "ce", it's like, change to the end of the word. 

480
00:27:58,200 --> 00:28:01,275
And, it gets rid of the contents until the end of the word, 

481
00:28:01,275 --> 00:28:02,850
and notice it put me in insert mode. 

482
00:28:02,850 --> 00:28:05,425
So now, whatever characters I type go into the buffer. 

483
00:28:05,425 --> 00:28:08,750
If I press "Escape", I go back into normal mode. 

484
00:28:08,750 --> 00:28:14,175
And so, "c" and "d" are analogs: they both take motions as arguments. 

485
00:28:14,175 --> 00:28:18,300
And, they will either delete that motion, or change that motion. 

486
00:28:18,300 --> 00:28:23,275
So, for example, if you press the "c" key, 

487
00:28:23,275 --> 00:28:26,587
there's also this pattern that, if you press a particular editing key twice, 

488
00:28:26,587 --> 00:28:28,725
it'll have that effect on the given line. 

489
00:28:28,725 --> 00:28:31,350
So, if I press "dd", that deletes the line. 

490
00:28:31,350 --> 00:28:33,925
If I press "cc", that deletes the given line, 

491
00:28:33,925 --> 00:28:37,375
but puts me in insert mode, so I can replace it with some other line. 

492
00:28:38,950 --> 00:28:42,600
We'll cover a couple other, uh, editing commands, 

493
00:28:42,600 --> 00:28:45,500
because then later we'll see how all these things interact together. 

494
00:28:45,500 --> 00:28:47,675
So, another useful one is the "x" command. 

495
00:28:47,675 --> 00:28:50,050
So, suppose my cursor is over some particular character. 

496
00:28:50,050 --> 00:28:53,050
If I press "x", it just deletes that character. 

497
00:28:56,600 --> 00:28:58,550
There's another command called "r". 

498
00:28:58,550 --> 00:29:00,200
If I'm over a particular character, 

499
00:29:00,200 --> 00:29:03,000
and I press "r", it takes another character as an argument, 

500
00:29:03,000 --> 00:29:06,150
and it replaces that particular character with some other character. 

501
00:29:10,675 --> 00:29:13,450
And, I'll cover a couple more editing commands. 

502
00:29:13,450 --> 00:29:15,325
So, I think one I talked about a moment ago

503
00:29:15,325 --> 00:29:18,200
but, of course you can undo changes you've made in vim. 

504
00:29:18,200 --> 00:29:20,900
And the way you do that is by pressing "u" while you're in normal mode. 

505
00:29:20,900 --> 00:29:23,000
So, "u" for undo is pretty easy to remember. 

506
00:29:23,000 --> 00:29:26,400
So, I press "u" a whole bunch of times, it's undone all the changes I've made. 

507
00:29:26,500 --> 00:29:29,375
And then, the opposite of undo is, of course, redo. 

508
00:29:29,375 --> 00:29:32,200
And, the binding for that in vim is "Ctrl+R". 

509
00:29:37,800 --> 00:29:44,300
All right, one other editing command I'm going to talk about is copy and paste because... Oh yes, question? 

510
00:29:54,225 --> 00:29:56,025
That's a great question! 

511
00:29:56,025 --> 00:30:01,175
So, the question is, "Does 'undo' undo everything you've done   since you've gone into insert mode, or just the last character?" 

512
00:30:01,200 --> 00:30:03,450
It's  actually a little bit more complicated than that. 

513
00:30:03,450 --> 00:30:06,350
"Undo" does, like, undoes the last change you've made. 

514
00:30:06,350 --> 00:30:07,825
So, if you went into insert mode, 

515
00:30:07,825 --> 00:30:08,650
and typed in some stuff, 

516
00:30:08,650 --> 00:30:09,675
and went back into normal mode, 

517
00:30:09,675 --> 00:30:13,350
and then press "u" for "undo", it'll undo all you've done in insert mode. 

518
00:30:13,350 --> 00:30:17,625
But, if you've done some other type of editing command, like, say I press "x" to delete a character... 

519
00:30:17,625 --> 00:30:22,425
If I do "u" for undo, it'll just undo that change that that editing command made. 

520
00:30:23,500 --> 00:30:30,525
Now, does that answer the question? Great! Any other questions? Cool!

521
00:30:30,525 --> 00:30:34,450
So, I'll talk about copy and paste as well, because that's a popular one. 

522
00:30:34,450 --> 00:30:37,025
The "y" command stands for copying, 

523
00:30:37,050 --> 00:30:38,800
and the "p" command stands for pasting. 

524
00:30:38,800 --> 00:30:40,800
"y" for copy, because, "yank". 

525
00:30:40,800 --> 00:30:44,800
Like, that's the word they... That's the terminology that vim uses for copying. 

526
00:30:44,800 --> 00:30:49,500
And, these commands are "y" also takes a motion as an argument. 

527
00:30:49,575 --> 00:30:52,700
So if I do like, "yy", it copies the current line. 

528
00:30:52,700 --> 00:30:54,492
And, if I press "p" for paste, 

529
00:30:54,492 --> 00:30:57,975
notice that now these two lines are identical, because I've just pasted a line below. 

530
00:30:57,975 --> 00:30:59,475
"u" for undo. 

531
00:30:59,475 --> 00:31:02,350
But if I do something like "yw", it's copied the word. 

532
00:31:02,350 --> 00:31:03,550
And then I can do "p", 

533
00:31:03,550 --> 00:31:07,400
and it just pasted that word again, right where my cursor was. 

534
00:31:07,400 --> 00:31:14,000
One useful thing, especially in the context of copy and paste,   is to be able to select a block of stuff and copy it, right? 

535
00:31:14,000 --> 00:31:17,750
Like, this is probably how you used copy and paste in whatever editor you were using before. 

536
00:31:17,750 --> 00:31:20,700
And so, that's where we get into the visual modes. 

537
00:31:20,700 --> 00:31:23,800
So, these are another set of modes that are all related to each other, 

538
00:31:23,800 --> 00:31:25,400
and that can be reached from normal mode, 

539
00:31:25,400 --> 00:31:27,825
and they're used for selecting chunks of text. 

540
00:31:27,825 --> 00:31:30,525
So, one mode is, just, regular visual mode. 

541
00:31:30,525 --> 00:31:32,200
You can enter that by pressing "v". 

542
00:31:32,200 --> 00:31:37,700
And then, once you're in this mode,   you can use most of the regular normal mode commands to move your pointer around. 

543
00:31:37,700 --> 00:31:39,350
And it selects everything in between. 

544
00:31:39,350 --> 00:31:44,650
So I can use, like, "hjkl" just to move the cursor, or I can use "w" to move by words, or different things like that, 

545
00:31:44,650 --> 00:31:46,725
and it will select a block of text. 

546
00:31:46,725 --> 00:31:51,600
And, once I've selected this block of text   there are a whole bunch of different types of useful things you could do with it. 

547
00:31:51,600 --> 00:31:54,275
One of the most popular things to do is copying this. 

548
00:31:54,275 --> 00:31:56,850
So, once I've selected, I can do "y" to copy, 

549
00:31:56,850 --> 00:31:59,050
and it puts me back into normal mode. 

550
00:31:59,050 --> 00:32:01,750
And now, it's copied this to the paste buffer. 

551
00:32:01,750 --> 00:32:03,000
And then if I go somewhere else, 

552
00:32:03,000 --> 00:32:06,100
and press "p", it pastes in that whole chunk of text I copied. 

553
00:32:07,000 --> 00:32:12,950
And it's similar to visual mode, which selects kind of a contiguous stream of text. 

554
00:32:12,975 --> 00:32:16,925
There's visual line mode so that can be reached by pressing "V", 

555
00:32:16,925 --> 00:32:19,150
and that selects whole lines at a time. 

556
00:32:19,175 --> 00:32:22,600
And then there's visual block mode, which can be selected by pressing "Ctrl+V", 

557
00:32:22,625 --> 00:32:24,850
and that can select rectangular blocks of text. 

558
00:32:24,850 --> 00:32:27,500
So this is something your old editor couldn't do. 

559
00:32:29,650 --> 00:32:30,750
Alright, 

560
00:32:30,750 --> 00:32:33,600
so,  there's a lot more vim editing commands to learn. 

561
00:32:33,600 --> 00:32:35,700
There's lots of, like, really weird and fancy things. 

562
00:32:35,700 --> 00:32:41,075
Like, for example, the "~" command changes the case of the character,   or the selection that you've currently selected. 

563
00:32:41,075 --> 00:32:43,500
So for example, I can take this, like, "Visual Studio Code", 

564
00:32:43,500 --> 00:32:47,350
and flip the case on the whole thing, by selecting it and pressing "~". 

565
00:32:47,600 --> 00:32:51,525
And, there's a whole bunch of other things like that, they get more and more esoteric as you go. 

566
00:32:51,525 --> 00:32:53,125
So, we're not going to cover all of those, 

567
00:32:53,125 --> 00:32:55,375
but you'll get to those in the exercises. 

568
00:32:55,725 --> 00:32:57,575
So, those are vim editing commands, 

569
00:32:57,575 --> 00:33:00,150
and a lot of them can be composed with movement commands. 

570
00:33:00,150 --> 00:33:07,675
So, any questions about either of those so far? Cool. 

571
00:33:07,675 --> 00:33:15,100
So, moving along, another category of things of commands   that are mostly relevant to normal mode are counts. 

572
00:33:15,100 --> 00:33:17,950
So, you can give them a number, to do a particular thing, 

573
00:33:17,950 --> 00:33:19,300
some number of times. 

574
00:33:19,300 --> 00:33:21,875
So suppose my cursor is here, 

575
00:33:21,875 --> 00:33:24,775
and I want to move down, like 1, 2, 3, 4 lines. 

576
00:33:24,800 --> 00:33:28,125
One way I can do that is by pressing "j" four times, go down four times. 

577
00:33:28,125 --> 00:33:30,525
"kkkk" goes up four times. 

578
00:33:31,325 --> 00:33:34,750
But, rather than pressing a particular key again, and again, I can use a count. 

579
00:33:34,775 --> 00:33:40,650
So if I press "4j", it does "j" four times, right? Vim's interface is a programming language. 

580
00:33:40,650 --> 00:33:42,800
If I do "4k", it moves up four times. 

581
00:33:42,850 --> 00:33:44,150
If I am here, 

582
00:33:44,150 --> 00:33:46,850
and I press "v" to go into visual mode... 

583
00:33:46,850 --> 00:33:49,575
Okay so now I can move my cursor around, and select blocks of text. 

584
00:33:49,575 --> 00:33:52,450
I can do, like, "eee" to select a couple of words, 

585
00:33:52,450 --> 00:34:00,325
but, I could also go back here. "v" for visual mode and press "3e" to select, like, "three ends of words" forward. 

586
00:34:01,475 --> 00:34:04,700
And then of course these can also be combined with editing commands. 

587
00:34:04,700 --> 00:34:08,700
So, like, suppose I want to delete seven words. 

588
00:34:08,700 --> 00:34:11,450
I can do that by moving my cursor somewhere, 

589
00:34:11,450 --> 00:34:13,350
and doing "7dw". 

590
00:34:13,350 --> 00:34:14,725
Seven delete words. 

591
00:34:15,950 --> 00:34:20,475
And so, this is particularly useful for things like, suppose my cursor is somewhere on the screen, 

592
00:34:20,475 --> 00:34:24,275
and I'm looking somewhere else on the screen, or, I want my cursor to go to that particular line. 

593
00:34:24,275 --> 00:34:27,200
Notice that I've set up relative line numbering on the left. 

594
00:34:27,200 --> 00:34:30,200
So, wherever my cursor is, it shows the current line number, 

595
00:34:30,200 --> 00:34:32,925
but everywhere else, it's just the offset from where I am. 

596
00:34:32,925 --> 00:34:34,800
Now, suppose my cursor is here, 

597
00:34:34,800 --> 00:34:38,200
but I want to move down to the like "Microsoft Word" down here, 

598
00:34:38,200 --> 00:34:39,775
so that's eight lines down. 

599
00:34:39,775 --> 00:34:45,650
So, what combination of keys would I press, to do that? Like, what's the most efficient way? Yeah, exactly! 

600
00:34:45,650 --> 00:34:48,900
Let's try that out. "8j" and my cursor moved down to this line. 

601
00:34:51,725 --> 00:34:58,375
Okay. And then, one final category of key meanings in vim is something called modifiers. 

602
00:34:58,375 --> 00:35:01,350
So we have, so far, movement, edits, counts, 

603
00:35:01,350 --> 00:35:03,200
and, finally, we have modifiers. 

604
00:35:03,200 --> 00:35:07,150
So, modifiers kind of change the meaning of a movement command a little bit. 

605
00:35:07,150 --> 00:35:12,300
And, a couple modifiers that are especially useful are the "a" and "i" modifier. 

606
00:35:12,300 --> 00:35:16,825
So, "a" stands for like around and "i" stands for inside. 

607
00:35:17,150 --> 00:35:22,675
And, to see where this is really useful, I can move my cursor to somewhere like here, for example. 

608
00:35:22,675 --> 00:35:27,225
So, hopefully, most of you are familiar with markdown syntax and if not it doesn't matter too much. 

609
00:35:27,225 --> 00:35:32,500
Uh, this is a link in markdown, it's a text rendered in square brackets("[]"), and then the link in parentheses("()"). 

610
00:35:32,525 --> 00:35:34,175
Suppose my cursor is inside here, 

611
00:35:34,175 --> 00:35:37,275
and I want to change the text corresponding to this link. 

612
00:35:37,650 --> 00:35:40,600
Well, one way I could do that is, like, move back here with "b", 

613
00:35:40,600 --> 00:35:42,625
and, like, "2dw", 

614
00:35:42,625 --> 00:35:44,325
and then "i" to go into insert mode. 

615
00:35:44,325 --> 00:35:46,450
That's one of the many ways I can make this change, 

616
00:35:46,450 --> 00:35:50,150
and I can type in whatever other thing I want, "u" to undo, "u" to undo. 

617
00:35:50,150 --> 00:35:56,200
Another way I could have done that is change two words "c2w" and then type in some other text. 

618
00:35:56,200 --> 00:36:03,700
But, one final way I could do the same change is using the modifier commands to talk about 

619
00:36:03,700 --> 00:36:08,600
how I want to interact with these different types of grouping things like parentheses("()") and square brackets("[]"). 

620
00:36:08,600 --> 00:36:14,250
So, one final way of doing this is change inside square brackets "ci["

621
00:36:14,250 --> 00:36:19,525
and that puts me into insert mode, after deleting the contents that are inside the brackets. 

622
00:36:19,575 --> 00:36:23,550
So, do you see how we can take all these different ingredients, like we talked about "change", 

623
00:36:23,550 --> 00:36:25,400
and we could combine that with different movement commands. 

624
00:36:25,400 --> 00:36:27,725
We talked about inside, how it's a modifier. 

625
00:36:27,725 --> 00:36:29,475
And then we talked about, uh... 

626
00:36:29,475 --> 00:36:31,625
we didn't talk about parentheses("()"). 

627
00:36:31,650 --> 00:36:34,750
But, if your cursor is hovering over a different, uh, 

628
00:36:34,750 --> 00:36:37,425
different types of grouping things like parentheses("()"), or square brackets("[]"), 

629
00:36:37,425 --> 00:36:41,850
you can press the percent movement key to jump back and forth between matching parentheses("()"). 

630
00:36:41,850 --> 00:36:50,825
If I go over here and I do "di(". I can delete the contents inside these parentheses. 

631
00:36:51,325 --> 00:36:55,000
And so, those are vim, uh, modifiers. 

632
00:36:55,000 --> 00:36:56,450
I guess we talked about "i", 

633
00:36:56,450 --> 00:36:57,350
but we didn't talk about "a". 

634
00:36:57,350 --> 00:37:02,900
If I do "da(", it deletes a whole, like parenthesized group including the parentheses("()"). 

635
00:37:03,075 --> 00:37:06,925
So "i" is inside, "a"  is around or including .

636
00:37:09,950 --> 00:37:14,216
All right so those are basically the different categories of things you can combine together,

637
00:37:14,216 --> 00:37:16,766
when interacting with vim's interface. 

638
00:37:16,825 --> 00:37:21,450
So, any questions about that or the overall idea of this interface being a programming language?

639
00:37:24,625 --> 00:37:25,725
Cool. 

640
00:37:25,800 --> 00:37:32,700
So, let's do a quick demo, to kind of demonstrate the power of this editor. 

641
00:37:32,700 --> 00:37:39,275
And, it will kind of help us see how this tool can work really fast and kind of match the speed at which we think. 

642
00:37:39,275 --> 00:37:44,875
So, over here is a very broken "fizzbuzz" implementation that doesn't actually print anything. 

643
00:37:44,875 --> 00:37:49,275
Uh, hopefully, most of you have heard of "fizzbuzz" - if not, I'll explain it super briefly. 

644
00:37:49,275 --> 00:37:53,425
Uh, "fizzbuzz" is a programming exercise where you print the numbers 1 through n, 

645
00:37:53,425 --> 00:37:58,200
but when the number is divisible by 3, you print fizz; when it's divisible by 5, you print buzz. 

646
00:37:58,200 --> 00:38:00,325
And, when it's divisible by both 3 and 5,

647
00:38:00,350 --> 00:38:01,725
you print fizzbuzz. 

648
00:38:01,725 --> 00:38:03,925
And, if none of those apply, you just print the number. 

649
00:38:03,925 --> 00:38:09,725
So, you should print like "1", "2", "fizz', "4", "buzz", and so on. 

650
00:38:09,725 --> 00:38:14,650
But, if I run this program, it doesn't print anything. 

651
00:38:14,975 --> 00:38:18,500
Here, I have them on the left, in just a terminal on the right.

652
00:38:19,300 --> 00:38:21,650
Okay,so there's a bunch of issues with this. 

653
00:38:21,650 --> 00:38:23,775
One is that main is never called, 

654
00:38:23,775 --> 00:38:25,550
so let's start off with fixing that. 

655
00:38:25,550 --> 00:38:32,050
So, here's how I would make this change and notice how few keystrokes this requires: 

656
00:38:32,050 --> 00:38:37,075
capital "G" means go to the bottom of the file, "o" opens a new line below, 

657
00:38:37,075 --> 00:38:38,900
and now I can just type in stuff. 

658
00:38:38,900 --> 00:38:40,200
So, I'm in insert mode. 

659
00:38:43,550 --> 00:38:48,125
Okay, so I've typed in whatever change I want to make, "Escape" to go back to normal mode. 

660
00:38:48,125 --> 00:38:53,050
If I do ":w" (command mode, right), let me go back here. 

661
00:38:53,050 --> 00:38:55,575
Okay, now at least my program prints something when I run it. 

662
00:38:55,575 --> 00:38:59,500
Another issue with this program is that it starts at 0 instead of 1, 

663
00:38:59,500 --> 00:39:01,175
so let's go fix that. 

664
00:39:01,175 --> 00:39:05,525
So, I want to go over to this "range" thing, 

665
00:39:05,525 --> 00:39:09,900
and it shouldn't be going from 0 to "limit", it should be going from 1 to "limit+1". 

666
00:39:09,900 --> 00:39:12,875
One command which I didn't show you about is how you search in vim, 

667
00:39:12,875 --> 00:39:18,175
so you press forward slash ("/") to close this and restart it. 

668
00:39:18,175 --> 00:39:21,700
If you press forward slash("/"), it starts search, 

669
00:39:21,700 --> 00:39:27,450
so if I type in "range" ,enter, my cursor goes from wherever it was before to the first instance of "range" it found. 

670
00:39:27,475 --> 00:39:29,725
So, it's a really efficient way of moving where I want to move. 

671
00:39:29,725 --> 00:39:37,250
"ww" to move forward two words, I to go into insert mode,   add the "1", comma space, escape, I'm back in normal mode. 

672
00:39:37,250 --> 00:39:39,100
This is a very common pattern in Vim:  

673
00:39:39,100 --> 00:39:42,875
you stay in normal mode, you go somewhere, you go into insert mode, you make a tiny change,

674
00:39:42,875 --> 00:39:45,425
and you jump right back to normal mode like normal mode is home, 

675
00:39:45,425 --> 00:39:47,325
and that's where you should be most of the time. 

676
00:39:47,325 --> 00:39:54,775
I also want to add a "+1", so "e" to go to the end of this word, "a" for apend "+1", "Escape". 

677
00:39:55,725 --> 00:39:57,575
Alright, fix that problem. 

678
00:39:57,575 --> 00:40:02,800
Another issue is that this program prints "fizz" for both divisible by three and five, 

679
00:40:02,800 --> 00:40:04,000
so let's fix that. 

680
00:40:04,000 --> 00:40:07,325
 "/fizz" searches for "fizz", been oppressed, 

681
00:40:07,325 --> 00:40:08,775
and it goes to the next match. 

682
00:40:08,775 --> 00:40:13,005
"ci'"  changes what's inside the quote(''), 

683
00:40:13,025 --> 00:40:16,900
so it's deleted the "fizz" and put me in insert mode right in between those two quotes(''), 

684
00:40:16,900 --> 00:40:20,525
and I can type in whatever I want, "Escape" to go back to normal mode. 

685
00:40:23,000 --> 00:40:26,450
So, great, I've fixed that particular problem. 

686
00:40:26,450 --> 00:40:34,475
Another problem with this program is that it prints "fizz" and "buzz" on separate lines for multiples of 15, 

687
00:40:34,550 --> 00:40:39,200
so let's go and fix that. 

688
00:40:39,650 --> 00:40:42,875
Let me go down to this line here. 

689
00:40:42,875 --> 00:40:43,536
One way I can ...

690
00:40:43,550 --> 00:40:48,000
don't actually worry about like the actual contents of this program, like this some stupid program that doesn't matter--

691
00:40:48,000 --> 00:40:53,200
pay attention to what keys I'm pressing in vim   that allow me to make changes to this program really efficiently. 

692
00:40:53,400 --> 00:40:55,200
So, my cursor is on this line. 

693
00:40:55,200 --> 00:40:59,325
I press "$" to go to the end of this line, "i" for insert mode, okay, 

694
00:40:59,325 --> 00:41:01,825
and I'm typing some stuff, "Escape" to go back to normal mode. 

695
00:41:01,850 --> 00:41:05,450
Now, I want to make the same change the print below. 

696
00:41:05,500 --> 00:41:06,400
Look at this. 

697
00:41:06,400 --> 00:41:07,800
"jj.", 

698
00:41:08,800 --> 00:41:13,750
So what "." does in vim is it repeats the previous editing command that was made, 

699
00:41:13,750 --> 00:41:19,425
and so this is a really nice way of doing repetitive tasks without typing the same thing over and over again. 

700
00:41:19,425 --> 00:41:26,850
So in that particular case, that inserted comma end quote and so it applied the same thing on this line when I press ".". 

701
00:41:27,400 --> 00:41:32,400
And then when I guess one final part of this demo is we will fix the issue that 

702
00:41:32,400 --> 00:41:37,475
this program maybe should take a command line argument   instead of having this hard-coded 10 down here. 

703
00:41:37,475 --> 00:41:41,975
So how do we do that? I'll press "gg" to go to the top, capital "O", 

704
00:41:41,975 --> 00:41:46,525
so now I've opened a line above and I'm going to type in some text like "imports sys ",

705
00:41:46,525 --> 00:41:48,675
"Escape" to go back to normal mode, 

706
00:41:48,675 --> 00:41:54,375
And then I want to go down to where this 10 is. So "/10" makes me jump straight down there. 

707
00:41:54,375 --> 00:41:58,275
"ci(" to edit what's inside the parentheses("()") 

708
00:41:58,275 --> 00:42:02,350
and now I can type in like whatever thing I need to type in here 

709
00:42:02,350 --> 00:42:08,800
and then once I've done this, my program does "fizz_buzz" correctly.  

710
00:42:08,800 --> 00:42:11,600
I think I missed one change I wanted to make, but it doesn't matter. 

711
00:42:11,600 --> 00:42:14,675
This demonstrates that you can make lots of changes really fast. 

712
00:42:15,050 --> 00:42:19,375
So any questions about this demo or the overall idea we've been talking about? 

713
00:42:22,450 --> 00:42:26,175
Okay, so this will be covered Tuesday, 

714
00:42:26,175 --> 00:42:32,150
so the kind of outside environment I'm running vim on the left and my shell on the right, 

715
00:42:32,150 --> 00:42:35,025
and then this is tmux on the outside. 

716
00:42:35,400 --> 00:42:41,025
One variant of that question might be like how do you switch between different Vim windows 

717
00:42:41,025 --> 00:42:43,725
and you can see the lecture notes for that, but there's a key binding for that. 

718
00:42:43,725 --> 00:42:47,450
So if you have the same window open or multiple things open, there's a way of doing that. 

719
00:42:47,450 --> 00:42:48,250
Question? 

720
00:42:51,074 --> 00:42:52,424
ah, good question. 

721
00:42:52,424 --> 00:42:57,725
So delete takes a motion and then removes those contents but keeps you in normal mode, 

722
00:42:57,725 --> 00:42:59,325
so you can keep just moving around in a file. 

723
00:42:59,325 --> 00:43:01,900
What change does is very similar to delete, 

724
00:43:01,900 --> 00:43:05,550
it takes motions and treats them in the same way, deletes those contents, 

725
00:43:05,575 --> 00:43:07,075
but then puts you in insert mode, 

726
00:43:07,075 --> 00:43:09,825
and so it saves you from typing one extra keystroke. 

727
00:43:10,725 --> 00:43:14,950
So if I'm here, for example, I want to delete "main", "dw" deletes a word, 

728
00:43:15,325 --> 00:43:19,475
but now if I press whatever key likes I press "j", it just moved me down. 

729
00:43:19,475 --> 00:43:24,375
If I undo that, do "cw" for change a word, now it's actually put me into insert mode, 

730
00:43:24,375 --> 00:43:26,325
and I can type in whatever I want it to insert. 

731
00:43:26,375 --> 00:43:31,150
So "dwi" is the same thing as "cw", 

732
00:43:31,150 --> 00:43:32,475
but it saves a keystroke. 

733
00:43:32,575 --> 00:43:35,450
One thing we've linked in the resources is something called "Vim golf". 

734
00:43:35,450 --> 00:43:37,975
Basically, people have set up a game online 

735
00:43:37,975 --> 00:43:44,475
where you can get an editing task and try to figure out   the minimal number of keystrokes necessary to complete that editing task.

736
00:43:44,475 --> 00:43:45,825
It's actually really addictive. 

737
00:43:45,825 --> 00:43:49,150
So I'd only suggest going on their chest and script time. 

738
00:43:51,000 --> 00:43:53,125
I think I saw a hand for another question. 

739
00:43:53,175 --> 00:43:58,603
Yeah, uh, period. 

740
00:43:58,950 --> 00:44:01,775
Yeah, one of the most useful of vim commands. 

741
00:44:01,800 --> 00:44:02,700
Good question. 

742
00:44:02,700 --> 00:44:07,925
Any other questions? Cool. 

743
00:44:09,225 --> 00:44:11,850
So I think we have about five minutes left, 

744
00:44:11,850 --> 00:44:15,525
and I'm gonna briefly talk about a thing that's also covered in detail in the notes, 

745
00:44:15,525 --> 00:44:17,150
so make sure you look at the notes for this. 

746
00:44:17,150 --> 00:44:21,300
Vim is a programmer's text editor, 

747
00:44:21,300 --> 00:44:23,750
and so of course, it's highly programmable. 

748
00:44:23,750 --> 00:44:28,575
Not only through its interface that's a programming language but also a couple of different ways. 

749
00:44:28,575 --> 00:44:32,175
There are lots of settings that you can tweak to match your preferences, 

750
00:44:32,200 --> 00:44:36,075
and you can also install plugins for them that do all sorts of useful stuff. 

751
00:44:36,075 --> 00:44:42,000
So the way vim is configured is through a file on disk called "vimrc", 

752
00:44:42,000 --> 00:44:46,000
and you'll see this is a common pattern in a lot of shell-based tools. 

753
00:44:46,000 --> 00:44:48,875
There'll be a plain text file that configures how the tool works, 

754
00:44:48,875 --> 00:44:52,325
and so if I edit this file and it may or may not exist on your machine yet, 

755
00:44:52,325 --> 00:44:58,775
but I've downloaded the, we've created a kind of default "vimrc" for you and linked it on the course website, 

756
00:44:58,775 --> 00:45:00,025
so you can start with that one. 

757
00:45:00,025 --> 00:45:02,875
If I do "vim ~/.vimrc", 

758
00:45:02,875 --> 00:45:08,732
I can see here a bunch of comments and then   particular commands like by default, we want syntax highlighting on, 

759
00:45:08,732 --> 00:45:10,425
and we want line numbers. 

760
00:45:10,425 --> 00:45:14,100
If we didn't do some of these things like let me remove the stuff that sets line numbers, 

761
00:45:14,100 --> 00:45:18,875
if I remove those configurations and relaunch vim, notice that I no longer have line numbers on the left. 

762
00:45:18,950 --> 00:45:24,125
But yeah, so in short, there's a lot of stuff you can configure with vim.

763
00:45:24,125 --> 00:45:27,225
We've given you a very basic configuration 

764
00:45:27,225 --> 00:45:31,700
that tries to remove some of the kind of weird behavior that's on by default in vim, 

765
00:45:31,700 --> 00:45:34,575
but we don't really try to enforce too many of our other opinions on you. 

766
00:45:34,575 --> 00:45:38,750
But of course, like the three of us used vim a lot and we have heavily customized vimrcs. 

767
00:45:38,750 --> 00:45:42,900
So we've linked to our personal configurations too if you want to take anything from that, 

768
00:45:42,900 --> 00:45:46,675
and also, like thousands or millions of people share their vimrcs on Github, 

769
00:45:46,675 --> 00:45:48,575
so there's lots of places to look for inspiration. 

770
00:45:48,575 --> 00:45:50,850
There are also cool blog posts on this topic. 

771
00:45:51,250 --> 00:45:56,075
Another thing you can do in vim is you can extend it with plugins that do all sorts of useful things. 

772
00:45:56,150 --> 00:46:00,325
This lets you do things like fuzzy file finding, which a lot of text editors come with by default, 

773
00:46:00,325 --> 00:46:01,800
so you can get like a pop-up window, 

774
00:46:01,800 --> 00:46:05,150
you can type in a name of a file or approximately the name of a file 

775
00:46:05,150 --> 00:46:10,375
and find it very quickly, or there are things that show you like visualizations of undo history. 

776
00:46:10,375 --> 00:46:15,750
There are things that show you like file explorers, things like that. 

777
00:46:15,750 --> 00:46:19,225
So we've linked to a couple of our favorite plugins on the course website, 

778
00:46:19,275 --> 00:46:22,800
and so I highly recommend becoming familiar with how to install a plugin 

779
00:46:22,800 --> 00:46:25,350
because it takes like three seconds and some of them are really cool. 

780
00:46:27,125 --> 00:46:32,675
And then finally, the last topic I'll briefly mention before we finish today's lecture 

781
00:46:32,675 --> 00:46:35,075
is vim mode and other programs. 

782
00:46:35,075 --> 00:46:39,450
So turns out that a lot of programmers were really excited about vim's interface, 

783
00:46:39,450 --> 00:46:43,175
and so they've implemented similar functionality in other tools. 

784
00:46:43,175 --> 00:46:47,775
For example, like I've configured my Python REPL to run in vim mode. 

785
00:46:47,775 --> 00:46:49,225
So I can type in stuff here, 

786
00:46:49,225 --> 00:46:52,675
and if I press "Escape", now I'm in normal mode in my Python REPL, 

787
00:46:52,675 --> 00:46:58,125
and I can move back and forth and like press "x" here to delete a thing, like "cw" to change a word 

788
00:46:58,125 --> 00:47:00,125
and do all those good things. 

789
00:47:00,675 --> 00:47:02,625
And it's not just the Python REPL. 

790
00:47:02,625 --> 00:47:05,050
Like, I have my terminal behaving this way too. 

791
00:47:05,050 --> 00:47:08,950
So like, I can type in whatever I want here and "Escape", 

792
00:47:08,950 --> 00:47:10,250
and I'm in normal mode. 

793
00:47:10,250 --> 00:47:14,275
I can go here and like go into visual mode inside my terminal and like select blocks of text, 

794
00:47:14,275 --> 00:47:16,275
press tilder("~") to change the case, whatever. 

795
00:47:16,275 --> 00:47:24,575
So we've linked to how exactly you can enable vim mode for like bash, zsh, fish, 

796
00:47:24,625 --> 00:47:28,975
a lot of readline-based programs like Jupyter Notebook, a whole bunch of other things. 

797
00:47:29,000 --> 00:47:31,800
And if it's not another place, you can probably find it by googling it 

798
00:47:31,800 --> 00:47:34,750
because a lot of people like to have this sort of functionality. 

799
00:47:34,775 --> 00:47:37,350
And if you're really gonna commit to learning vim, 

800
00:47:37,350 --> 00:47:42,000
I think it's valuable to enable this sort of vim emulation mode in every tool you use. 

801
00:47:42,000 --> 00:47:44,225
It's like one, or like make you learn the tool a lot better, 

802
00:47:44,225 --> 00:47:49,175
and two, once you become good at vim,   like those skills will now transfer to all your other tools you use. 

803
00:47:51,725 --> 00:47:55,100
Okay, so I think that's it for our rapid introduction to vim. 

804
00:47:55,100 --> 00:47:58,150
There's some other neat material that we weren't able to fit in today's lecture, 

805
00:47:58,150 --> 00:47:59,425
but it's in the lecture notes. 

806
00:47:59,425 --> 00:48:02,475
And then finally, I highly recommend going through the exercises for today. 

807
00:48:02,475 --> 00:48:03,900
Like, at least for me personally, 

808
00:48:03,900 --> 00:48:06,725
I think spending time learning my text editor 

809
00:48:06,725 --> 00:48:11,025
has been like the most beneficial thing out of the kinds of things we're teaching in this class. 

810
00:48:11,900 --> 00:48:14,025
So yeah, that's it for today's lecture, 

811
00:48:14,025 --> 00:48:15,575
and we'll see you tomorrow. 

812
00:48:15,925 --> 00:48:19,150
Note that we've changed tomorrow's lecture to data wrangling. 

813
00:48:19,150 --> 00:48:21,725
Thursday and Tuesday lectures are now switched. 

814
00:48:21,725 --> 00:48:25,875
This is reflected on the course website in case anybody was going to come to one but not the other. 

