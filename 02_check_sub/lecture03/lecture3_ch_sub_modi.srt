1
00:00:00,000 --> 00:00:02,225
芜湖~
Okay, cool. 

2
00:00:02,225 --> 00:00:06,575
欢迎来到“缺失的学期”第三堂课。
So, welcome to the third lecture of the missing semester of your CS education. 

3
00:00:06,575 --> 00:00:09,075
今天我们要讲述的是文本编辑器。
Today we're going to be talking about text editors. 

4
00:00:09,075 --> 00:00:11,200
我非常喜欢这个话题。
This is a topic that I really like. 

5
00:00:11,200 --> 00:00:14,275
我认为这是我们在这门课程中教授的最有价值的话题之一，
I think it's one of the most valuable topics that we're teaching in this class ,

6
00:00:14,275 --> 00:00:15,725
因为作为程序员，
because as programmers, 

7
00:00:15,725 --> 00:00:19,375
你们花费了大量的时间来编辑文本和程序，
you spend so much of your time editing text and editing programs that 

8
00:00:19,375 --> 00:00:22,950
如果你们投入时间使自己更高效地编辑，
if you invest time into making yourself more efficient at doing this, 

9
00:00:23,000 --> 00:00:25,925
你们将会节省大量的时间，
you'll save a ton of time, 

10
00:00:25,950 --> 00:00:29,325
也许在你们的本科阶段或职业生涯中，能够节省数百个小时。
probably hundreds of hours over the course of your undergrad or over the course of your career. 

11
00:00:30,450 --> 00:00:36,250
文本编辑器与其他编辑程序有所不同，
So text editors are a little bit different than other programs you might use to edit, say, 

12
00:00:36,350 --> 00:00:40,800
例如用于编辑英语散文的程序，因为编程与撰写英语散文不同。
things like English prose because programming is different than writing English prose. 

13
00:00:40,800 --> 00:00:42,275
在编程时，
When you're programming, 

14
00:00:42,300 --> 00:00:44,779
你需要花费大量的时间阅读你所编写的内容，
you spend a lot of time reading what you've written, 

15
00:00:44,825 --> 00:00:47,050
花费大量的时间在缓冲区中导航，
you spend a lot of time navigating around a buffer, 

16
00:00:47,050 --> 00:00:50,150
并花费大量的时间进行小的编辑，
and you spend a lot of time making little edits to code all over the place, 

17
00:00:50,200 --> 00:00:54,375
而不是像写文章时那样连续写作。
rather than just writing in a long stream like you do when you're writing an essay or something. 

18
00:00:54,400 --> 00:00:57,500
因此，用于这些不同目的的程序也不同，对吧？
And so it makes sense that there are different programs for these different purposes, right? 

19
00:00:57,500 --> 00:00:59,575
比如说，用于写文章的 Microsoft Word 
So yeah, things like Microsoft Word for writing essays 

20
00:00:59,625 --> 00:01:03,125
和用于写代码的 Vim、Emacs、VS Code 和 Sublime 等等。
and things like vim and Emacs and VS Code and Sublime for writing code. 

21
00:01:04,825 --> 00:01:09,875
学习文本编辑器并成为熟练使用者的方法是从教程开始学习。
So, the way you learn a text editor and become really good at it is you start with a tutorial, 

22
00:01:09,900 --> 00:01:13,223
这基本上就是今天讲座的内容，
and so that's basically going to be the function of today's lecture,

23
00:01:13,223 --> 00:01:15,223
再加上我们为你们提供的练习。
plus the exercises we've given you. 

24
00:01:15,275 --> 00:01:20,850
然后，在教程之后，你需要使用编辑器来完成所有的编辑任务。
And then after the tutorial, you need to stick with the editor for all your editing tasks. 

25
00:01:20,900 --> 00:01:23,225
当你学习一个复杂的工具时，
And when you're learning a sophisticated tool, 

26
00:01:23,300 --> 00:01:24,572
比如今天我们要教你 Vim，
so today we're going to teach you vim, 

27
00:01:24,572 --> 00:01:27,075
这是很多程序员使用的一个强大的编辑器，
which is one powerful editor that a lot of programmers use, 

28
00:01:27,300 --> 00:01:29,400
当你刚刚开始学习这个强大的工具的时候,
when you're learning such a sophisticated tool, 

29
00:01:29,400 --> 00:01:31,450
可能会让你的编辑速度有所下降.
it may be the case that initially 

30
00:01:31,450 --> 00:01:34,550

switching to this tool slows you down a little bit when you're programming, 

31
00:01:34,575 --> 00:01:40,850
但请坚持下去，因为我保证，大约使用新的编辑器编程20个小时后，
but stick with it because I'd say that in about 20 hours of programming using a new editor, 

32
00:01:40,975 --> 00:01:44,525
你会重新达到使用旧工具编程的速度。
you'll be back to the same speed at which you programmed using your old tool, 

33
00:01:44,550 --> 00:01:46,275
之后，你会开始受益，
and then after that, the benefits will start, 

34
00:01:46,275 --> 00:01:48,850
随着你的不断学习，你会变得越来越快。
and you'll get faster and faster as you learn more. 

35
00:01:49,100 --> 00:01:52,100
对于像 Vim 这样复杂的程序，
With these sophisticated programs like vim, 

36
00:01:52,150 --> 00:01:55,950
学习基础并不需要太长时间，但需要一辈子去掌握。
it takes not way too long to learn the basics but a lifetime to master. 

37
00:01:55,950 --> 00:01:59,250
因此，在你使用这个工具的整个过程中，
And so throughout the time you're using this tool, 

38
00:01:59,250 --> 00:02:01,093
请确保你随时查询相关资料来帮助你进行编辑。
make sure you look things up as you go.

39
00:02:01,100 --> 00:02:04,850
如果你遇到这样的情况，
If you ever get to a point where you're like, 

40
00:02:04,875 --> 00:02:05,800
“哦，这种做事情的方式真的很低效，有更好的方式吗？”
"Oh, this is a really inefficient way of doing things. Is there a better way?" 

41
00:02:05,800 --> 00:02:08,100
答案几乎总是肯定的，
The answer is almost always yes 

42
00:02:08,650 --> 00:02:12,450
因为这些文本编辑器是由程序员为程序员编写的，
because these text editors were written by programmers for programmers 

43
00:02:12,450 --> 00:02:13,335
所以当然，
and so of course, 

44
00:02:13,335 --> 00:02:16,935
像编写这些工具的人一样，他们遇到了相同的问题并解决了它们，
like the people who wrote these tools, ran into the same kinds of issues and fixed them 

45
00:02:16,950 --> 00:02:18,700
这样你就不必再去处理这些问题了。
so that you don't need to deal with these anymore. 

46
00:02:18,700 --> 00:02:22,925
因此，在你学习的过程中，确保你查阅资料时要注意及时搜索，
And so yeah, as you're learning, make sure you look things up as you go, 

47
00:02:22,950 --> 00:02:26,225
可以使用谷歌或者随时给我们发邮件，如果有问题可以来参加办公时间，
either use Google or feel free to send us emails if you have questions or come to office hours, 

48
00:02:26,425 --> 00:02:28,950
我们会帮助你快速地解决问题。
and we'll help you figure out how to do things really fast. 

49
00:02:30,200 --> 00:02:32,275
至于要学习哪种编辑器，
As far as which editor to learn, 

50
00:02:32,300 --> 00:02:35,800
在之前的几个版本中，我们实际上避免教授特定的编辑器，
in previous iterations of this class, we actually avoided teaching a specific editor 

51
00:02:35,800 --> 00:02:37,975
因为我们不想把我们的观点强加给大家，
because we didn't want to enforce our opinions on you guys, 

52
00:02:38,225 --> 00:02:40,898
但我们认为教你如何使用一种特定的工具并善加利用它非常有用。
but we actually think that it's really useful to teach you 

53
00:02:40,898 --> 00:02:42,898

how to use one particular tool and use it well. 

54
00:02:42,898 --> 00:02:46,273
因此，人们对编辑器有着非常强烈的观点，
And so people have really strong opinions about editors, 

55
00:02:46,273 --> 00:02:49,523
所以你可以在课程笔记中查看更多关于这个主题的链接。
so you can see the course notes for more links on this topic. 

56
00:02:50,800 --> 00:02:55,000
回顾这些年来哪些编辑器比较受欢迎，
Looking at which editors have been popular over the years, 

57
00:02:55,675 --> 00:02:57,075
我相信你们都听说过 Stack Overflow，
Stack Overflow, I'm sure you've all heard of that, 

58
00:02:57,075 --> 00:03:00,005
他们每年都会进行一次调查，询问开发人员各种问题，
does a survey every year asking developers various questions, 

59
00:03:00,005 --> 00:03:02,450
其中一个问题是你使用哪种文本编辑器，
and one thing to ask is which text editor do you use, 

60
00:03:02,450 --> 00:03:07,125
目前最受欢迎的图形编辑器似乎是 VS Code，
and it seems to be that currently, the most popular kind of graphical editor is VS Code, 

61
00:03:07,150 --> 00:03:11,975
而基于命令行接口的最受欢迎的编辑器是 Vim。
and the most popular editor that is based within a command line interface is vim. 

62
00:03:12,025 --> 00:03:14,400
因此，我们将会教授你 Vim，
So we're going to be teaching you vim, 

63
00:03:14,450 --> 00:03:15,650
这样做有几个原因。
and there are a couple of reasons for this. 

64
00:03:15,675 --> 00:03:17,175
其一是我们所有的讲师，
One is that all the instructors, 

65
00:03:17,175 --> 00:03:19,850
包括我、Jon和Jose，都将 Vim 作为我们的主要编辑器使用，
so me, Jon, and Jose, use vim as our primary editor, 

66
00:03:19,950 --> 00:03:21,250
我们使用它已经很多年了，
and we've been doing this for many years, 

67
00:03:21,250 --> 00:03:22,550
也非常满意。
and we've been very happy with it. 

68
00:03:23,700 --> 00:03:27,225
我们认为它背后有很多有趣的思想，
We think that there are a lot of interesting ideas behind vim, 

69
00:03:27,225 --> 00:03:32,000
因此即使你最终不会使用这个特定的工具，
so even if you don't end up using this particular tool in the long term,

70
00:03:32,000 --> 00:03:34,000
学习这些思想也是有价值的。
I think it's valuable to learn these ideas. 

71
00:03:34,100 --> 00:03:38,725
此外，许多工具都非常兴奋地关注 Vim 中的思想，
Also, a lot of tools have actually been really excited about the ideas in vim, 

72
00:03:38,725 --> 00:03:41,625
并支持 Vim 模拟模式。
and so they support a vim emulation mode. 

73
00:03:41,800 --> 00:03:47,625
例如，今天最流行的编辑器 VS Code 支持 Vim 绑定。
For example, VS Code, what is apparently the most popular editor in use today, supports vim bindings, 

74
00:03:47,625 --> 00:03:51,725
截止目前，这个Vim仿真模式已经有大约1.4百万次下载。
and this vim emulation mode as of now has like 1.4 million downloads. 

75
00:03:51,725 --> 00:03:54,802
在本次讲座的过程中，
As you'll see over the course of this lecture, 

76
00:03:54,802 --> 00:04:01,577
你会发现很多不同的工具都可以支持Vim仿真模式，包括你的shell、Python REPL和Jupiter notebook等等，
a lot of different tools, including your shell, including things like the Python,REPL and Jupyter notebook, 

77
00:04:01,625 --> 00:04:05,400
甚至你的网络浏览器也可以支持Vim仿真模式。
and all sorts of other things, even your web browser, can support a vim emulation mode. 

78
00:04:05,425 --> 00:04:08,900
所以，我们今天将教授你这个非常棒的工具，
So yeah, we're going to be teaching you this really neat tool today.

79
00:04:09,475 --> 00:04:14,625
并且在这个讲座中，我们无法涵盖所有内容，因为它是一个非常强大的工具，
And in this lecture, we can't really cover all of them, right, it's a very powerful tool, 

80
00:04:14,625 --> 00:04:19,925
但是我们的目标是教授你核心的哲学，即其背后的真正棒的想法，
but our goal is to teach you the core philosophy of them, like the really neat ideas behind it, 

81
00:04:19,950 --> 00:04:21,525
以及一些基础内容，
and then in addition to that, 

82
00:04:21,525 --> 00:04:25,525
比如如何打开文件、关闭文件、在文件中导航、进行编辑，
some of the basics like how do you open a file, close a file, navigate around a file, make edits, 

83
00:04:25,575 --> 00:04:26,475
或者别的什么。
and things like that. 

84
00:04:26,550 --> 00:04:31,650
你可能无法记住本次讲座中的每一个小细节，因为我们会快速地浏览一些材料，
You may not remember every single little detail from this lecture because we're gonna go pretty fast through some of the material, 

85
00:04:31,700 --> 00:04:33,175
但是所有内容都在讲义中，
but it's all on the lecture notes, 

86
00:04:33,200 --> 00:04:36,925
而且练习还会为你提供一些教程和链接。
and then the exercises actually give you links to some tutorials and things. 

87
00:04:36,925 --> 00:04:42,250
因此，我强烈建议你至少完成所有非高级练习。
So I highly recommend that you actually go through all the exercises, at least the non-advanced exercises. 

88
00:04:42,900 --> 00:04:45,250
目前有问题吗？太好了。
Any questions so far?

89
00:04:46,935 --> 00:04:48,310
好的，
Great.

90
00:04:48,725 --> 00:04:53,600
Vim的一个非常酷的想法是它是一个模态编辑器。
Okay so one of the really cool ideas behind vim is that vim is a modal editor. 

91
00:04:53,600 --> 00:04:56,400
这是什么意思？"模态"源于"mode"这个词，
What does this mean? Modal comes from the word mode, 

92
00:04:56,400 --> 00:04:59,475
这意味着Vim有多个操作模式。
and this means that vim has multiple operating modes, 

93
00:04:59,500 --> 00:05:03,875
这种想法的发展源于编程时
and this is kind of developed from the idea that when you're programming, 

94
00:05:03,875 --> 00:05:06,050
经常需要做不同类型的事情，
there are often times where you're doing different types of things. 

95
00:05:06,100 --> 00:05:07,525
例如有时你在阅读代码，
Like sometimes you're reading code, 

96
00:05:07,525 --> 00:05:09,650
有时你在对代码进行小修改，
sometimes you're making small edits to code, 

97
00:05:09,650 --> 00:05:13,075
例如找到某个位置并更改某个小细节，
like you're finding a particular point and changing a little thing somewhere. 

98
00:05:13,075 --> 00:05:18,100
有时你只是一口气写很多代码，例如从头开始写一个函数。
Sometimes you're just writing a lot of code in one go, like suppose you're just writing a function from scratch. 

99
00:05:18,200 --> 00:05:21,675
因此，有不同的操作模式来处理这些不同类型的任务。
And so there are different operating modes for doing these different types of things. 

100
00:05:22,200 --> 00:05:27,525
因此，我实际上会在黑板上写下这个内容，这样我将来可以很方便地参考。
And so I'm actually going to write this down on the blackboard so I'll have a useful thing to refer to later. 

101
00:05:27,575 --> 00:05:33,675
当你启动Vim时，它会启动到所谓的正常模式。
When you start vim up, it starts up in what's called normal mode. 

102
00:05:33,700 --> 00:05:37,400
在这种模式下，所有不同的键组合都会以一种方式进行操作。
And in this mode, all the different key combinations behave in one way. 

103
00:05:37,425 --> 00:05:41,750
然后有不同的键组合可以将您从正常模式切换到其他模式，
And then there are different key combinations that switch you between normal mode and other modes, 

104
00:05:41,750 --> 00:05:43,850
这些模式会更改不同键的含义。
which change the meaning of different keys. 

105
00:05:43,850 --> 00:05:51,300
因此，在大多数情况下，您将会在正常模式或所谓的插入模式下花费大部分时间。
So for the most part, you'll be spending most of your time in vim in normal mode or what is called insert mode. 

106
00:05:53,550 --> 00:05:58,150
要进入插入模式，您需要按下“i”键，
And to go to insert mode, you press the key "i" for normal mode, 

107
00:05:58,150 --> 00:06:02,300
要从插入模式返回正常模式，您需要按下“Escape”键。
and to go from insert mode back to normal mode, you press the "Escape" key. 

108
00:06:04,900 --> 00:06:07,800
这里是关于符号的一些说明，因为我们以后会用到。
A little note on notation because we'll need this later. 

109
00:06:08,475 --> 00:06:11,255
在我在本课程中使用的符号
In the notation, I'm going to be using in this lecture 

110
00:06:11,255 --> 00:06:14,500
以及Vim用于给您反馈的符号中，
and what's also in the lecture notes and what vim uses to give you feedback, 

111
00:06:14,500 --> 00:06:17,175
有几种不同的方式来谈论不同的键。
they have a couple of different ways of talking about different keys. 

112
00:06:17,200 --> 00:06:21,467
因此，当他们谈论裸键时，比如键盘上的“i”键，他们会说'i'。
So when they're talking about bare keys like just the "i" key on your keyboard, they'll just say "i" .

113
00:06:21,525 --> 00:06:25,075
但是对于不同的键组合，比如当您按下“Ctrl”和某个键时，
But for different key combinations, like when you press "Ctrl" and something 

114
00:06:25,100 --> 00:06:30,650
比如说，"Ctrl-V"，它是大约三种表示方法中的一个。
like say, Ctrl-V, it's notated in one of approximately three ways. 

115
00:06:30,650 --> 00:06:35,075
其中一种表示方式是插入符号("^")，然后是控制字符“v”。
One way that can be notated is a caret and then the control character "v". 

116
00:06:35,075 --> 00:06:36,900
所以这就是"^v"。
So this is "^v". 

117
00:06:37,000 --> 00:06:39,176
另一种可能会写成
Another way this might be written I think,

118
00:06:39,176 --> 00:06:42,025
我认为我们在课堂笔记中是这样写的，是"Ctrl-v；
we've written it this way in lecture notes as "Ctrl-v", 

119
00:06:42,025 --> 00:06:43,700
这可能是您更常见的方式。
this is probably the one you're more used to seeing. 

120
00:06:43,700 --> 00:06:50,250
在其中的一些部分，这是以"<c-v>"的形式写出的。
And then in some parts of vim, this is written as "<c-v>".

121
00:06:50,325 --> 00:06:52,775
所以这是一些以后有用的符号表示。
So just a little bit of notation that will be useful later. 

122
00:06:53,650 --> 00:06:57,150
所以，Vim有几种不同的模式，
So yeah, vim has a couple of different modes, 

123
00:06:57,150 --> 00:06:59,596
其中正常模式是用于
where normal mode is designed for 

124
00:06:59,596 --> 00:07:03,675
在文件中导航，阅读内容，从文件到文件等。
navigating around a file, reading things, going from file to file, things like that. 

125
00:07:03,675 --> 00:07:06,300
然后插入模式是您键入文本的地方。
And then insert mode is where you type in text. 

126
00:07:06,350 --> 00:07:09,975
因此，在此处按下的大多数键将进入文本缓冲区，
So most keys that you press here will just go into your text buffer, 

127
00:07:10,000 --> 00:07:13,600
而在正常模式下按下的键不会放入缓冲区，
whereas keys that you press here are not being put into the buffer 

128
00:07:13,600 --> 00:07:16,325
而是用于导航或进行编辑。
and instead are used for things like navigation or making edits. 

129
00:07:19,100 --> 00:07:21,750
实际上，情况要复杂得多。
And actually, the picture is a little bit more complicated than this. 

130
00:07:21,750 --> 00:07:23,425
还有许多其他模式，
There are a whole bunch of other modes, 

131
00:07:23,425 --> 00:07:26,550
我将在此处写下它们，因为以后我们会参考它们。
and I'm just gonna write them down here because we'll have them here to refer to later. 

132
00:07:26,600 --> 00:07:30,050
因此，Vim还有一种替换模式，
And so vim also has a replace mode, 

133
00:07:30,050 --> 00:07:35,650
用于覆盖文本，而不是插入文本并将其推到前面。
for rather than inserting text and kind of pushing what's ahead of it forward, it will overwrite text. 

134
00:07:35,700 --> 00:07:39,050
然后，它具有许多不同的选择模式，
And then it has a bunch of different modes for selection, 

135
00:07:43,425 --> 00:07:45,550
因此它具有称为可视模式的模式，
so it has a mode called visual mode, 

136
00:07:45,550 --> 00:07:50,000
还具有可视行和可视块。
and then it has visual line and visual block. 

137
00:07:51,625 --> 00:08:00,850
这一个通过按下 r键输入；这一个通过按下 v键输入；这一个通过按下 Shift-b 输入，
This one is entered via the "r" key; this was entered via the "v" key; this one is entered via "s-v", 

138
00:08:00,850 --> 00:08:04,025
这一个则是通过按下 Ctrl-v 输入。
and this one is entered via "<c-v>". 

139
00:08:04,800 --> 00:08:16,000
然后，还有一个命令行模式，可以通过冒号键（“：”）进入。
And then there's the command line mode, which is entered via the ":" key. 

140
00:08:19,175 --> 00:08:32,650
好的，既然我们已经将它们写在板子上以便以后参考，现在我们可以试着实践一下了。
Okay, so now that we have that on the board to refer to later, we can actually try some of this out. 

141
00:08:33,675 --> 00:08:36,700
我们注意到的一件事是，
All right, so one thing we noticed looking at that picture 

142
00:08:36,700 --> 00:08:40,050
从正常模式转到任何其他模式，我们需要按下某个键，
is that to go from normal mode to any of the other modes, we press some key, 

143
00:08:40,100 --> 00:08:42,375
但是从其他任何模式回到正常模式时，
but to go from any of the other modes back to normal mode, 

144
00:08:42,375 --> 00:08:43,725
我们会浪费大量的时间，
where we spend a lot of our time, 

145
00:08:43,725 --> 00:08:45,900
因为我们使用键盘上的 Escape 键。
we use the "Escape" on our keyboard. 

146
00:08:46,725 --> 00:08:50,500
因此，由于在使用 Vim 时你会频繁按下 Escape 键，。
So for this reason, since you'll be pressing the "Escape" a lot when using vim, 

147
00:08:50,500 --> 00:08:54,075
很多程序员会重新绑定键盘上的某个键为 Escape 键，
a lot of programmers rebind one of the keys on their keyboard to be Escape, 

148
00:08:54,075 --> 00:08:59,150
因为用左手小指去按键盘角落的那个小 Escape 键非常不方便
because it's really inconvenient to reach up with your left pinkie to press that tiny little "Escape" in the corner of your keyboard. 

149
00:08:59,200 --> 00:09:01,650
因此，许多人使用大写锁定键（“CapsLK”），
And so a lot of people use the "CapsLK" key instead, 

150
00:09:01,650 --> 00:09:03,800
因为它就在主键盘区，
so it's right there in the home row, 

151
00:09:04,000 --> 00:09:08,475
我们在讲义中提供了如何进行按键重绑定的链接。
and we have some links in the lecture notes for how you can do this key rebinding. 

152
00:09:13,575 --> 00:09:17,125
好的，既然我们已经讨论了 vim 的核心思想之一，
Okay, so now that we've talked about kind of one of the core ideas of vim, 

153
00:09:17,125 --> 00:09:19,600
即模态编辑的思想，我们可以讨论一些基础知识，
the idea of modal editing, we can talk about some of the basics, 

154
00:09:19,600 --> 00:09:24,400
比如如何打开这个文本编辑器，如何打开和保存文件等。
like how do you open up this text editor, how do you open file save files, and things like that. 

155
00:09:24,550 --> 00:09:29,850
因此，这是一个基于命令行的程序，虽然也有一些图形化的变体，
And so this is a command-line based program, although there are some graphical variants, 

156
00:09:29,850 --> 00:09:33,150
但是你启动这个程序的方式是运行 Vim。
and the way you start this program is by running "vim". 

157
00:09:33,225 --> 00:09:37,950
你可能会注意到，在我屏幕的左下角，他们实际上看到了我刚才输入的内容。
One thing you might notice is that in the bottom left corner of my screen, they actually saw what I just typed. 

158
00:09:37,950 --> 00:09:42,425
在这节课上这将十分有用，当我输入 Vim 命令时，
This will be useful later in this lecture, where I'm actually typing in commands for vim, 

159
00:09:42,425 --> 00:09:44,175
我会说出我输入的内容，
and I'll be saying what I'm typing, 

160
00:09:44,175 --> 00:09:45,650
但你也会在屏幕上看到它。
but you'll also see it on the screen. 

161
00:09:45,650 --> 00:09:49,225
所以，如果我按下Ctrl+c键，你会看到那边显示^c。
So if I press "Ctrl+c", you'll see it says "^c" over there. 

162
00:09:49,225 --> 00:09:51,850
这段字大家都能看清楚吗？
Is that text big enough for everybody to read? 

163
00:09:52,650 --> 00:10:00,325
太好了，那么我们打开Vim的方法就是在命令行中运行vim程序，
Great. okay, So the way we open Vim is just by running the program "Vim" on our command line, 

164
00:10:00,325 --> 00:10:02,775
大多数系统都预装了它。
and this comes pre-installed on most systems. 

165
00:10:02,775 --> 00:10:05,900
如果你没有它，你可以使用你的包管理器进行安装。
If you don't have it, you can install it using your package manager. 

166
00:10:05,900 --> 00:10:09,425
如果我们想要用它来编辑特定的文件，Vim也可以接受一个参数，
vim can also take an argument if we want to use it to edit a particular file 

167
00:10:09,425 --> 00:10:12,450
而不仅仅是打开程序
instead of just opening up the program then later opening a file.

168
00:10:12,475 --> 00:10:18,000
例如，我有一个文件在这个目录中；这实际上是这个讲座的讲义。
So for example, I have a file in this directory; this is actually the lecture notes for this lecture. 

169
00:10:18,025 --> 00:10:20,600
所以，我可以输入"vim editors.md"，按"ENTER"，
So, I can do "vim editors.md" and press "ENTER", 

170
00:10:20,650 --> 00:10:22,650
然后瞬间就开始了。
and then boom, vim is started. 

171
00:10:23,225 --> 00:10:28,825
在这个讲座中，我将不会在完整的Exton中运行Vim。
And then in this lecture, I'm not running vim in the completely Exton configuration.

172
00:10:28,850 --> 00:10:35,150
我配置了一些默认行为比较好的东西，
I've configured a couple of things that behave a little bit nicer by default,

173
00:10:35,150 --> 00:10:39,700
比如在左边有行号，或者在底部有更多的状态信息等等。
little things like having line numbers on the left or having some more status information on the bottom. 

174
00:10:39,700 --> 00:10:42,000
如果你想使用这个默认配置开始，
If you want to start with this default configuration, 

175
00:10:42,000 --> 00:10:46,025
我们在讲义中有一个链接，你可以自动得到一个稍微更加合理的配置。
we have a link to this in the lecture notes so you can get a slightly more sane config by default. 

176
00:10:48,650 --> 00:10:51,467
那么，一旦你打开了Vim，你要怎么做呢？
So, once you've opened vim, what do you do? 

177
00:10:51,467 --> 00:10:53,800
嗯，就像我之前说的那样，Vim开始在normal模式下。
Well, as I said earlier, vim starts in normal mode. 

178
00:10:53,800 --> 00:10:58,925
所以，如果我开始打字，比如输入“X”，它不会将“X”插入到缓冲区中。
So, if I just start typing letters like, say, type "x", it doesn't insert "x" into the buffer. 

179
00:10:58,925 --> 00:11:02,750
你可以看到左上角的光标：它实际上删除了一个字符。
You can see the cursor up in the top left: it actually deleted one of the characters. 

180
00:11:02,750 --> 00:11:05,300
那是因为我在normal模式下，而不是insert模式。
That's because I'm in normal mode, not insert mode. 

181
00:11:05,300 --> 00:11:10,200
所以，insert模式基本上是你过去使用过的所有其他文本编辑器所熟悉的，
So, insert mode is basically what you're used to with all the other text editors you've used in the past, 

182
00:11:10,200 --> 00:11:11,906
其中有一个光标，当你打出一个字符，
where there's a cursor somewhere, you press the character, 

183
00:11:11,906 --> 00:11:14,306
它就会进入到你的缓冲区。
and it just goes into your buffer. 

184
00:11:14,600 --> 00:11:17,775
在Vim中，你开始是在normal模式下，
I'm instead in vim, you start in normal mode, 

185
00:11:17,775 --> 00:11:19,800
你可以按“i”键进入insert模式。
and you can press "i" to go into insert mode. 

186
00:11:19,800 --> 00:11:24,950
所以，我按下了“i”，然后注意到底部左侧的提示说“INSERT--”。
so see I've pressed "i", and then in the bottom left, notice that it says "INSERT--".

187
00:11:25,125 --> 00:11:29,175
底部左侧总是告诉你你现在处于哪个模式下，除了normal模式，此时是空白的。
The bottom left always tells you what mode you're in, unless this normal mode, in which case it's blank. 

188
00:11:29,250 --> 00:11:35,000
现在，我处于insert模式下，如果我按下“x”键，它就会被插入到我的文本缓冲区中，
Now that I'm in insert mode, if I press the "x" character, for example, it just gets inserted into my text buffer, 

189
00:11:35,025 --> 00:11:37,375
我可以退格删除它，输入其他内容，
and I can backspace over it, type other stuff, 

190
00:11:37,375 --> 00:11:41,475
现在我的文本编辑器就像你预期的任何其他程序一样运行。
and now my text editor kind of behaves like you'd expect any other program to behave. 

191
00:11:42,000 --> 00:11:46,675
从这个点开始，如果我想停止插入字符，我该如何回到正常模式呢？
So from this point, how do I go back to normal mode if I want to stop inserting characters? 

192
00:11:47,250 --> 00:11:53,900
是的，确切地说，我按“Escape”键。这就是我的按键可视化功能的一个实例，
Yes, exactly. I press "Escape". And that's the symbol my keystroke visualizer uses for "Escape", 

193
00:11:53,900 --> 00:11:56,175
所以请注意这一点。
so just be aware of that. 

194
00:11:57,650 --> 00:12:01,775
Vim 认为使用鼠标效率低下。
Vim has this idea that using the mouse is inefficient. 

195
00:12:01,775 --> 00:12:06,225
就像你的手从键盘上移动到鼠标上需要很多时间一样，
Like, your hands are on the keyboard, moving your hand over to the mouse takes a lot of time, right? 

196
00:12:06,225 --> 00:12:10,700
你不想在编程时浪费那几毫秒的时间，对吧？
You don't want to waste those couple of milliseconds while you're programming, like in the middle of things. 

197
00:12:10,700 --> 00:12:15,125
因此，所有 Vim 功能都可以通过键盘操作。
So, instead, all vim functionality can be accessed just through the keyboard. 

198
00:12:15,125 --> 00:12:20,900
它可以像打开文件、保存文件等你可能习惯的方式进行操作，
And it's all sorts of things you might be used to doing, like opening files by going, like, "file open", or "file save", 

199
00:12:20,900 --> 00:12:23,825
也可以通过键盘访问。
or things like that, or instead accessed through the keyboard. 

200
00:12:23,850 --> 00:12:25,125
如何实现呢？
How is that done? 

201
00:12:25,125 --> 00:12:28,625
通过另一个 Vim 模式，
That's done through one of the other vim modes that are on the board over there. 

202
00:12:28,625 --> 00:12:31,150
即命令行模式来实现。
In particular, through command line mode. 

203
00:12:31,450 --> 00:12:35,400
因此，如果你处于正常模式，并按下“：”键，
So, if you're in normal mode and you press the ":" key, 

204
00:12:35,400 --> 00:12:37,000
你将看到光标……
you'll notice that the cursor……

205
00:12:37,000 --> 00:12:40,725
我猜我的可视化功能刚刚显示过了，只不过它现在已经自动消失了
I guess my visualizer is covering the thing right now but it's gone.

206
00:12:40,725 --> 00:12:45,600
你会注意到光标跳转到左下角，并显示我刚才输入的“：”符号。
The cursor jumps to the bottom left and it shows that ":" I just typed. 

207
00:12:45,650 --> 00:12:47,925
现在，我可以输入命令。
And now, I can type in a command. 

208
00:12:47,975 --> 00:12:52,600
你可以将其想象为我们过去几天谈论过的命令 shell，
So, you can think of this almost like the command shell that we've talked been talking about over the last few days, 

209
00:12:52,600 --> 00:12:54,750
只不过这是 Vim 的命令 shell，
except this is vim's command shell, 

210
00:12:54,750 --> 00:12:57,275
所以你在这里应该输入Vim命令，而不是 shell 命令。
so you give vim commands here, instead of shell commands. 

211
00:12:57,550 --> 00:13:00,950
有很多内置命令可以完成你所需的所有任务，
And there are a bunch of built-in commands that do all the things that you're used to. 

212
00:13:00,950 --> 00:13:04,675
例如你可能想了解的一个命令是如何退出编辑器。
Like, for example, one command that you might want to know is how to quit this editor. 

213
00:13:04,675 --> 00:13:06,450
如果你处于正常模式，
You might notice that if you're in normal mode,  

214
00:13:06,450 --> 00:13:09,186
我可以按“Escape”键从命令行模式返回到正常模式，
I can press "Escape" to go back from command line mode to normal mode,

215
00:13:09,200 --> 00:13:14,325
而且与许多程序不同的是，我按“Ctrl-c”并不能退出 Vim。
and I press "Ctrl-c", unlike what happens to a lot of programs, this doesn't quit vim. 

216
00:13:14,450 --> 00:13:16,875
那么我该如何退出 Vim 呢？我可以按“：”，
So, how do I quit vim? I can press ":", 

217
00:13:16,875 --> 00:13:18,850
然后进入命令行模式，
and then go into command line mode, 

218
00:13:18,850 --> 00:13:20,525
我可以输入命令“quit”。
and then I can type in the command "quit". 

219
00:13:20,550 --> 00:13:21,550
“Q-U-I-T”。
"Q-U-I-T". 

220
00:13:21,850 --> 00:13:23,200
你会看到我 ……
You'll see that  

221
00:13:23,200 --> 00:13:27,250
也许我应该把这个移到中间或者其他地方
I maybe I should move this over to the middle or something.

222
00:13:27,250 --> 00:13:30,442
看吧，它显示“:quit”，然后我按下 ENTER键，就退出 Vim 了。
See, it says ":quit" and I press "ENTER",and it quits vim.

223
00:13:30,675 --> 00:13:32,275
我可以再次打开 Vim。
I can open vim up again. 

224
00:13:32,275 --> 00:13:35,175
其实这个命令有一个缩写形式，只需要输入“:q”，
There's actually a short form for this command, just ":q", 

225
00:13:35,350 --> 00:13:37,350
就可以达到同样的效果。
and that'll do the same thing. 

226
00:13:37,575 --> 00:13:40,375
还有很多类似这样有用的命令。
And, there are a bunch of other useful commands like this. 

227
00:13:40,475 --> 00:13:44,275
所以，还有一些其他方便的命令需要知道，比如如何保存文件？
So, some other handy ones to know are how do you save a file? 

228
00:13:44,275 --> 00:13:47,275
假设我在这里进行了一些编辑，比如“hello world”。
So, suppose I make some edits here, like "hello world". 

229
00:13:47,350 --> 00:13:49,975
所以，我按下“i”进入插入模式
So, I pressed "i" to go into insert mode 

230
00:13:50,850 --> 00:13:52,625
或者让我重做一遍
or let me redo that.

231
00:13:52,625 --> 00:13:54,500
我按下“i”进入插入模式。
I press "i" to go into insert mode. 

232
00:13:54,500 --> 00:13:57,900
现在，我可以使用向下箭头...
Right now, I can use "the down arrow" to... 

233
00:14:00,000 --> 00:14:04,000
我觉得我稍微需要修改一下。Jon，你可以修复一下配置吗？
I think I've slightly I should fix that. Can you fix the config, actually, Jon? 

234
00:14:05,675 --> 00:14:06,775
不要在意。
Never mind that. 

235
00:14:06,775 --> 00:14:07,575
好的，
Okay, 

236
00:14:07,575 --> 00:14:12,125
假设我跳到这一行，
so, suppose I go down to this line, 

237
00:14:12,400 --> 00:14:14,825
然后按下“i”进入插入模式，
and I press "i" to go into insert mode, 

238
00:14:14,825 --> 00:14:15,850
输入一些文本，
and type in some text, 

239
00:14:15,950 --> 00:14:18,225
然后按下“Escape”回到正常模式。
and then press "Escape" to go back to normal mode. 

240
00:14:18,300 --> 00:14:21,625
那么，我该如何保存这个文件呢？嗯，这里有另一个命令。
Now, how do I actually save this file? Well, there's another command for that. 

241
00:14:21,625 --> 00:14:23,625
所以，输入“：”进入命令模式，
So, ":" to go into command mode, 

242
00:14:23,625 --> 00:14:25,600
然后我可以输入“w”,
and then I can type "w"

243
00:14:25,600 --> 00:14:28,100
然后按“Enter”。
and press "Enter". 

244
00:14:28,100 --> 00:14:29,800
“w”代表写入。
"w" stands for write. 

245
00:14:29,800 --> 00:14:34,825
底部显示“editors.md”等等，
And, it says in the bottom "editors.md" whatever blah blah written. 

246
00:14:34,975 --> 00:14:39,200
意思是文件已经保存，所以现在，如果我输入“：q”退出。
And so, this means it saved the file and so now if I ":q" to quit 

247
00:14:39,200 --> 00:14:43,325
然后重新打开同一个文件，你会看到更改已经被保存了
and open the same file, again, you'll see that the changes have been persisted. 

248
00:14:45,700 --> 00:14:47,825
还有一些其他命令...
There are a couple other there's... 

249
00:14:47,825 --> 00:14:51,175
所以，有很多不同的 Vim 命令，因为不同的原因非常有用。
So, there's a ton of different vim commands that are useful for different reasons. 

250
00:14:51,175 --> 00:14:54,500
但是我现在会再向你解释几个命令。
But, I'll just explain a couple more to you now. 

251
00:14:54,500 --> 00:14:57,625
一个非常有用的命令是“help”，准确的说是“:help”。
One command that's really useful is "help", ":help".

252
00:14:57,625 --> 00:15:00,300
你可以通过输入“：help”，
And you can do ":help", 

253
00:15:00,300 --> 00:15:04,225
再输入一个特别的按键或是命令
and then type in a particular key, or a particular command, 

254
00:15:04,225 --> 00:15:06,750
你就可以得到对应的帮助文档。
and get help for that keystroke or that command. 

255
00:15:06,775 --> 00:15:13,275
所以，如果我想知道“:w”命令的作用，我可以使用“:help :w”，
So, if I want to know what ":w" does, I can do ":help :w", 

256
00:15:13,950 --> 00:15:20,575
这会给我带来“:w”或“:write”的文档。
and that'll give me the documentation on ":w" or ":write". 

257
00:15:20,625 --> 00:15:24,725
如果我执行“:q”，它会关闭这个窗口并把我带回到之前的位置。
If I do ":q", it'll close this window and bring me back to where I was before. 

258
00:15:24,725 --> 00:15:30,425
请注意，“:help :w”和“:help w”是不同的，
And, notice that ":help :w" is different from ":help w", 

259
00:15:30,425 --> 00:15:38,825
因为w键是正常模式下按下w键，
because the "w" key is the w that, like, when you're in normal mode and press "w", 

260
00:15:38,825 --> 00:15:41,475
这里是不需要加“：”的。
what happens is just the "w" key here without the ":". 

261
00:15:41,600 --> 00:15:45,950
如果我查找“：w”的帮助，那就是“:w”命令的帮助。
And, if I look for help for ":w", that's the help for the "w" command. 

262
00:15:48,425 --> 00:15:57,625
现在，你已经掌握了基本的操作方法，对吧？
So, now you basically have the bare fundamentals needed to use vim, right?

263
00:15:57,625 --> 00:15:59,175
你可以打开编辑器，
You can open the editor, 

264
00:15:59,175 --> 00:16:01,500
编辑一个特定的文件，
use it to edit a particular file, 

265
00:16:01,500 --> 00:16:04,125
按“i”键进入插入模式并输入一些文本，
press "i" to go into insert mode and type in some text, 

266
00:16:04,125 --> 00:16:05,975
按“Esc”键回到正常模式，
press "Escape" to go back to normal mode, 

267
00:16:05,975 --> 00:16:08,300
然后“：w”保存更改，“：q”退出。
and then ":w:" to save your changes, ":q" to quit. 

268
00:16:08,300 --> 00:16:14,700
所以，你已经掌握了使用Vim编辑文件的基本技能，尽管有些效率低下。
So, like already you have the bare fundamentals necessary to edit files using vim, that will be somewhat inefficiently. 

269
00:16:14,700 --> 00:16:18,875
到目前为止有问题吗？是的，在后面。
So, any questions so far?  Yeah in the back. 

270
00:16:22,350 --> 00:16:26,100
问题是，正常模式有什么好处？
Yeah so the question is, What's the benefit of the normal mode? 

271
00:16:26,100 --> 00:16:28,633
我们将在五分钟内更详细地讨论这个问题。
And, we'll talk about that in more detail, in like five minutes. 

272
00:16:28,633 --> 00:16:32,450
但简单来说，插入模式只用于输入文本。
But, in short, insert mode is just for typing in text. 

273
00:16:32,450 --> 00:16:34,150
所以，在插入模式，我可以输入文本。
So, I'm in insert mode, I can type in text. 

274
00:16:34,150 --> 00:16:39,525
但是实际上，当我编程时，我花了很多时间移动我的文件并进行小的修改。
But, when I'm programming, I actually spend a lot of time moving around my file making small little changes. 

275
00:16:39,525 --> 00:16:45,800
所以我来到这里，想把这个“https”链接改成“http”链接。
So, I go here and like, oh maybe I want to change this "https" link to an "http". 

276
00:16:45,800 --> 00:16:49,150
我可以在正常模式下进行小的编辑和修改，
I can make like small point edits, things like that, in normal mode. 

277
00:16:49,150 --> 00:16:51,600
我们将在五分钟内看到更多这样的内容。
And we'll see a whole lot more of that in about five minutes. 

278
00:16:51,600 --> 00:16:58,300
好问题！还有其他问题吗？
Good question! Any other questions? Okay cool. 

279
00:16:58,350 --> 00:17:00,175
好的，继续讲，
So, moving along, 

280
00:17:02,650 --> 00:17:06,675
我认为还有一件事情有点有用，
one other thing that's kind of useful to know, I think, 

281
00:17:06,725 --> 00:17:15,250
在高层次上，Vim的缓冲区模型与窗口模型和选项卡模型。
is, at a high level, vim's model of buffers versus windows versus tabs. 

282
00:17:15,250 --> 00:17:19,950
那么，你之前使用的编辑器，比如Sublime Text或VS Code，
So, it's probably the case that whatever program you were using before, like Sublime Text or VS Code or whatever, 

283
00:17:19,950 --> 00:17:22,275
你肯定可以在它们中打开多个文件，
you could open multiple files in it, right, 

284
00:17:22,275 --> 00:17:26,225
并可能有多个标签页和多个窗口。
and you could probably have multiple tabs open and have multiple windows open of your editor. 

285
00:17:26,225 --> 00:17:29,250
Vim也有这些不同的概念，
So, vim also has a notion of those different things. 

286
00:17:29,250 --> 00:17:32,950
但它的模式与大多数其他程序有些不同。
But, its model is a little bit different than most other programs. 

287
00:17:32,950 --> 00:17:39,700
Vim维护了一组打开的缓冲区——这是它用于打开文件的术语，它有一组打开的文件。
So, vim maintains a set of open buffers--that's the word it uses for open files.And so, it has a set of open files, 

288
00:17:39,700 --> 00:17:43,250
然后，与此分开，您可以有多个标签页，
and then kind of separately from that, you can have a number of tabs, 

289
00:17:43,250 --> 00:17:44,900
每个标签页可以有窗口。
and tabs can have windows. 

290
00:17:44,900 --> 00:17:49,425
这使得Vim与您之前使用的程序略有不同，
The kind of weird thing which makes vim a little bit different than the program you've probably used in the past is that 

291
00:17:49,425 --> 00:17:54,250
因为缓冲区和窗口之间不一定是一对一的对应关系。
there isn't necessarily a one-to-one correspondence between buffers and windows. 

292
00:17:54,275 --> 00:17:56,250
例如，我可以在这里做一件事,
So, one thing I can do, for example, here 

293
00:17:56,250 --> 00:17:58,775
稍后我们将向您展示组合键和其他内容
and we'll show you the key combinations and stuff for this later

294
00:17:58,775 --> 00:18:01,775
你可以创建两个不同的窗口。
but one thing you can do is create two different windows. 

295
00:18:01,775 --> 00:18:02,975
这样一来，我在上面有一个窗口，
So, I have one window up here, 

296
00:18:02,975 --> 00:18:04,700
在下面也有一个窗口。
and then one window down here. 

297
00:18:04,700 --> 00:18:07,650
请注意，同样的文件在两个窗口中都打开。
And, notice that the same files open in both windows. 

298
00:18:07,675 --> 00:18:11,450
因此，如果我在这里进行一些编辑，它们实际上也会在下面的窗口中发生，
So, if I make some edits over here, they actually happen in the bottom window, as well, 

299
00:18:11,450 --> 00:18:13,750
因为两个窗口中打开的是同一个缓冲区。
because it's the same buffer that's open in both windows. 

300
00:18:14,575 --> 00:18:19,550
这对于同时查看文件的两个不同部分非常有用。
And, this is kind of useful, for, say, looking at two different parts of a single file at the same time. 

301
00:18:19,550 --> 00:18:21,450
所以你想能够在文件的顶部查看程序的导入，
Like, so you want to be able to look at the top of a file, 

302
00:18:21,450 --> 00:18:26,225
同时在下面的其他地方工作。
say at an import to your program, while you're down below, working somewhere else. 

303
00:18:26,225 --> 00:18:32,075
所以这是一个有用的东西需要记住，Vim有这种想法——有几个标签页，
So, this is one helpful thing to keep in mind, that vim has this idea of - there are a number of tabs, 

304
00:18:32,075 --> 00:18:35,650
每个标签页有一些窗口，
and each tab has some number of windows, 

305
00:18:35,650 --> 00:18:39,025
然后每个窗口对应一个缓冲区。
and then each window has, uh, corresponds to some buffer. 

306
00:18:39,025 --> 00:18:42,900
但是，一个特定的缓冲区可以在零个或多个窗口中同时打开。
But, a particular buffer can be open in zero or more windows at a time. 

307
00:18:42,900 --> 00:18:45,575
这是我最初学习Vim时困惑的一件事，
Just one thing that confused me when I was initially learning vim, 

308
00:18:45,575 --> 00:18:47,400
所以我想早些解释一下。
so I want to explain that early on. 

309
00:18:47,400 --> 00:18:52,725
然后，我们之前提到的“：q”命令不完全是退出。
And then, the ":q" command, which we talked about earlier, is not exactly quit. 

310
00:18:52,725 --> 00:18:54,925
它有点像关闭当前窗口，
It's kind of close the current window, 

311
00:18:54,925 --> 00:18:57,150
然后当没有更多的打开窗口时，Vim才会退出。
and then, when there are no more open windows, vim will quit. 

312
00:18:57,150 --> 00:19:02,500
所以，如果我在这里输入“:q”，它只会关闭上面的窗口，因为那是我所在的窗口，
So, here, if I do ":q", it'll only close the window, I think, on the top here because that's the one I was in, 

313
00:19:02,500 --> 00:19:05,800
现在剩下的窗口变成了全屏模式。
and, now, the remaining window becomes fullscreen. 

314
00:19:05,800 --> 00:19:07,625
我可以再次输入“:q”来关闭这个窗口。
I can do ":q" again to close this. 

315
00:19:07,625 --> 00:19:09,525
现在我们在我打开的第二个选项卡中。
Now we're in the second tab that I'd opened. 

316
00:19:09,525 --> 00:19:13,025
如果我再次输入“:q”，好的，现在Vim退出了。
If I do ":q" final time, okay, now, vim exits. 

317
00:19:14,125 --> 00:19:16,650
如果你不想一遍一遍地按“:q”，
And if you don't want to press ":q""" way too many times... 

318
00:19:16,650 --> 00:19:18,475
好，现在我这里有是三个窗口
Okay, so, here I have three split windows. 

319
00:19:18,475 --> 00:19:23,350
你可以输入“:qa”来关闭所有打开的窗口。
If I do ":qa", for quit all, it closes all the open windows. 

320
00:19:25,775 --> 00:19:30,200
好的，回答你的“正常模式究竟是用来干什么的”问题。
All right, so, now, to answer your question of "What is normal mode actually for?" 

321
00:19:30,200 --> 00:19:32,650
这是Vim中另一个非常酷的想法，
This is another, really cool idea in vim, 

322
00:19:32,650 --> 00:19:36,875
我认为这实际上是这个程序最基本和有趣的想法。
and I think this is actually, like, the most fundamentally interesting idea of this program. 

323
00:19:37,225 --> 00:19:39,300
就是像你们都是程序员一样，
It's that, like, you're all programmers, 

324
00:19:39,300 --> 00:19:40,750
你们都喜欢编程
you like programming; 

325
00:19:41,250 --> 00:19:44,300
Vim有这样一种想法，就是Vim的正常模式，
vim has this idea that vim's normal mode, 

326
00:19:44,300 --> 00:19:48,075
Vim的界面本身就是一种编程语言。
like, vim's interface, itself, is a programming language. 

327
00:19:48,150 --> 00:19:49,900
让我重复一下，
And, let me repeat that. 

328
00:19:49,900 --> 00:19:54,300
这是一种非常有趣的想法：界面就是一种编程语言。
That's like a kind of fundamentally interesting idea - the interface is a programming language. 

329
00:19:54,350 --> 00:19:58,375
这是什么意思？这意味着不同的按键组合有不同的效果，
What does that mean? It means that different key combinations have different effects, 

330
00:19:58,400 --> 00:20:01,750
一旦你学会了不同的效果，你就可以将它们结合在一起
and, once you learn the different effects, you can actually combine them together

331
00:20:01,750 --> 00:20:03,100
就像在编程语言中一样，
Just like in a programming language， 

332
00:20:03,100 --> 00:20:06,925
你可以学习不同的函数或者其他的，然后将它们粘合在一起，制作一个有趣的程序。
you can learn different functions and stuff and then glue them all together to make an interesting program. 

333
00:20:06,925 --> 00:20:10,375
同样，一旦你学会了Vim的不同的移动和编辑命令等等，
In the same way, once you learn vim's different movement and editing commands, 

334
00:20:10,375 --> 00:20:15,600
你就可以通过编程Vim来与Vim交流。
and things like that, you can talk to vim by programming vim through its interface. 

335
00:20:15,600 --> 00:20:21,325
一旦这变成了肌肉记忆，你就可以以你思考的速度编辑文件。
And, once this becomes muscle memory, you can basically edit files at the speed at which you think. 

336
00:20:21,325 --> 00:20:25,500
对于我来说，我不认为我能够用过去使用的任何其他文本编辑器做到这一点，
Like at least for me, I don't think I've been able to do this with any other text editor that I've used in the past, 

337
00:20:25,500 --> 00:20:27,400
但这个编辑器非常接近。
but this one gets pretty close. 

338
00:20:28,300 --> 00:20:31,650
那么，让我们深入了解正常模式的工作原理。
So, let's dig into how exactly normal mode works. 

339
00:20:31,650 --> 00:20:36,200
你可以尝试跟着这个进行操作，打开Vim中的一些随机文件，
So, you can try to follow along with this, like, open up some random file in vim, 

340
00:20:36,200 --> 00:20:39,050
并跟随我输入的一些键组合。
and follow some of the key combinations I type in. 

341
00:20:39,050 --> 00:20:42,950
所以，一个基本的事情是你可能想做的，就是在文本中浏览，
So, one basic thing that you might want to do, is just navigate around a buffer. 

342
00:20:42,950 --> 00:20:45,025
移动你的光标上下左右。
Like, move your cursor up/down/ left/right. 

343
00:20:45,025 --> 00:20:49,125
在 Vim 中，你可以使用 hjkl 键来实现，而不是箭头键。
And so the way you do that in vim, is using the "hjkl" keys, not the arrow keys. 

344
00:20:49,125 --> 00:20:51,344
虽然默认情况下箭头键也可以工作，但尽量避免使用它们，
Though they do work by default, try to avoid them, 

345
00:20:51,344 --> 00:20:54,075
因为你不想一直将手移动到箭头键，
because you don't want to have to move your hand all the way over to the arrow keys. 

346
00:20:54,075 --> 00:20:55,875
这浪费了很多时间。
like there's a ton of time you're wasting, right? 

347
00:20:55,875 --> 00:20:58,150
而 hjkl 键在键盘的主键区上，
"hjkl" is right on the home row. 

348
00:20:58,150 --> 00:21:04,475
j键向下移动，k键向上移动，h键向左移动，l键向右移动。
And, so, "j" moves down, "k" moves up, "h" moves left, and "l" moves right.

349
00:21:04,800 --> 00:21:07,000
这可能现在看起来有点不直观，
And, this may seem a little unintuitive now, 

350
00:21:07,000 --> 00:21:09,225
这里有很多历史原因
there was some historical reason for it, 

351
00:21:09,250 --> 00:21:12,750
例如早期vi设计师使用的键盘有“hjkl”键，
like the keyboard the original vi developer used had the "hjkl" keys, 

352
00:21:12,750 --> 00:21:15,925
例如通过标记和排布使得更加合理
like labeled and arranged in a way that made this more reasonable. 

353
00:21:15,925 --> 00:21:18,400
但是很快就会成为肌肉记忆。
But, this will very soon become muscle memory. 

354
00:21:18,400 --> 00:21:22,500
这是在普通模式下移动光标的基本方法。
So, this is the basic way you can move your cursor around while in normal mode. 

355
00:21:23,650 --> 00:21:25,050
现在，还能做什么呢？
Now, what else can you do? 

356
00:21:25,050 --> 00:21:28,350
如果我们像这样移动文件，速度会非常慢。
Well, if we had to move around files like this, it'd be really slow. 

357
00:21:28,350 --> 00:21:30,875
我们不想按住这些键，
We don't want to have to hold down these keys, 

358
00:21:30,875 --> 00:21:33,225
然后等待 Vim 完成它的操作。
and like, wait for a long time for vim to do its thing. 

359
00:21:33,225 --> 00:21:36,675
所以，还有其他不同的按键组合可以进行不同的移动。
And so, there are all these other, different key combinations for doing different movements. 

360
00:21:36,675 --> 00:21:38,650
顺便说一下，这些都在讲义中，
Also, by the way, this is all in the lecture notes, 

361
00:21:38,650 --> 00:21:41,700
所以你不需要现在就记住每个键及其含义。
so you don't need to memorize every single key and its meaning right now. 

362
00:21:42,275 --> 00:21:46,675
只要试着理解 Vim 的界面是一种编程语言的总体思想。
Just try to understand the overall idea that vim's interface is a programming language. 

363
00:21:46,675 --> 00:21:49,350
还有一件事情可以做，就是按下 w键。
So, another thing you can do is press the "w" key. 

364
00:21:49,350 --> 00:21:51,775
这将使光标向前移动一个单词。
This moves the cursor forward by one word. 

365
00:21:51,775 --> 00:21:56,500
类似地，b键向后移动一个单词。
And then, similarly, the "b" key moves the cursor backward by one word. 

366
00:21:56,500 --> 00:22:00,100
因此，在同一行内进行更有效的移动。
So, this allows slightly more efficient movement within the line. 

367
00:22:00,100 --> 00:22:03,575
还有 e键可以将光标移动到单词末尾。
There's also the "e" key for moving to the end of a word. 

368
00:22:03,625 --> 00:22:05,425
我将它移动到一边。
I'm going to move this over a little bit. 

369
00:22:05,675 --> 00:22:07,575
例如，如果我在这里，
So, if I'm here, for example, 

370
00:22:07,575 --> 00:22:11,750
按“E”键，它会跳到这个单词的末尾，下一个单词的末尾，依次类推。
and I press the "e" key it'll go to the end of this word, end of this word, end of the next word and so on. 

371
00:22:12,750 --> 00:22:15,425
你也可以整行移动，
You can also move by whole lines, 

372
00:22:15,425 --> 00:22:19,300
所以“0”移动到行的开头，“$”移动到行的末尾，
so "0" moves to the beginning of a line, "$" moves to the end of a line, 

373
00:22:19,300 --> 00:22:23,725
“^”移动到行的第一个非空字符。
and "^" moves to the first non-empty character on a line. 

374
00:22:23,725 --> 00:22:28,397
让我举个例子。
So, let me find one of those, for example. 

375
00:22:29,175 --> 00:22:32,730
在这里，我的光标就在这里；
So, here, my cursor's right here;   

376
00:22:32,730 --> 00:22:37,050
如果我按“0”，我的光标就会移到行的开头，“$”是当前行的末尾；
if I press "0", my cursor goes to the beginning of the line, "$", end of the current line; 

377
00:22:37,050 --> 00:22:40,900
如果我按“^”，光标会停留在哪个字符上呢？
and if I press "^", where, like, on what character will the curser end up? 

378
00:22:40,925 --> 00:22:42,175
有人能猜到吗？
Can anybody guess? 

379
00:22:43,350 --> 00:22:49,400
按“^”会移到行的第一个非空字符上，有点像正则表达式中的“^”。
So, "^" goes to the first non-empty character on a line, kind of like Regex "^". 

380
00:22:51,275 --> 00:22:54,075
没错！它会移到这个连字符（“-”）上。
Yeah, exactly! It goes to this "-". 

381
00:22:55,975 --> 00:22:58,100
我们再谈谈一些移动命令。
Let's talk about some more movement commands. 

382
00:22:58,100 --> 00:23:01,075
有一些方法可以在缓冲区中上下滚动，
There're ways to scroll up and down in a buffer, 

383
00:23:01,075 --> 00:23:04,175
所以“Ctrl-u”向上滚动，
so "Ctrl-u" goes up, 

384
00:23:04,175 --> 00:23:06,875
“Ctrl-d”向下滚动。
and "Ctrl-d" scrolls down. 

385
00:23:06,875 --> 00:23:10,350
这比按住k或j键要好得多。
So, this is better than holding down the "k" or "j" keys, for example. 

386
00:23:10,350 --> 00:23:13,475
当然这比整页移动要慢得多。
This is a lot slower than moving by entire pages. 

387
00:23:13,475 --> 00:23:15,375
“Ctrl-d”和"Ctrl-u"。
"Ctrl-d" and "Ctrl-u". 

388
00:23:16,950 --> 00:23:19,675
还有一些方法可以整个缓冲区移动。
There's also ways to move by the entire buffer. 

389
00:23:19,675 --> 00:23:21,850
所以，大写的“G”会移动到底部...
So, "G" moves all the way down... 

390
00:23:21,850 --> 00:23:23,950
“gg”会移动到顶部。
"gg" moves all the way up. 

391
00:23:25,675 --> 00:23:28,325
其中一些移动键是助记符；
Some of these movement keys are mnemonics;   

392
00:23:28,325 --> 00:23:30,325
因此，它们更容易记住，
so, they're like, a little bit easier to remember for that reason right,

393
00:23:30,325 --> 00:23:33,075
例如，“w”是单词，“b”是单词开头，“e”是单词结尾。
like, "w" is word, "b" is beginning of word, "e" is end of word. 

394
00:23:33,075 --> 00:23:34,775
它们都很合理。
Those all seem pretty logical. 

395
00:23:34,775 --> 00:23:37,825
“0”，“^”和“$”符号，有点受到正则表达式的启发，
"0", "^" and "$", kind of inspired from Regex, 

396
00:23:37,825 --> 00:23:39,225
因此它们有点合理。
so those make a little bit of sense. 

397
00:23:39,225 --> 00:23:42,700
还有一些其他的按键，可能没有太多意义，
There's some other ones that, like, don't necessarily make way too much sense, 

398
00:23:42,700 --> 00:23:44,225
但是键盘上的键只有那么多，
but, there are only so many keys on your keyboard, 

399
00:23:44,225 --> 00:23:45,225
你能怎么办呢？
so what are you going to do? 

400
00:23:45,925 --> 00:23:51,100
例如，按下 "l" 键将光标移动到屏幕上显示的最低行。
For example, the "l" key moves your cursor to the lowest line that's shown on the screen. 

401
00:23:51,100 --> 00:23:53,775
 "l" 表示最低，"m" 表示中间，
"l" for lowest makes sense, "m" for middle, 

402
00:23:53,775 --> 00:23:56,450
"h" 表示最高，我想这很有道理。
and then "H" for highest, I guess. 

403
00:23:59,700 --> 00:24:03,000
还有很多其他有趣的移动方式，
And, there's a whole bunch of other interesting movements like this. 

404
00:24:03,000 --> 00:24:05,775
我们显然无法在此处全部介绍，
So, we're obviously not going to be able to cover all of them right now, 

405
00:24:05,800 --> 00:24:10,575
但你可以通过 Vim 教程练习进行学习，这是本课程的第一个练习。
but you'll be able to go through them in the vim tutor exercise, which is exercise number one for this lecture. 

406
00:24:10,575 --> 00:24:17,825
现在我想再谈谈其他一些移动方式，也许我只谈论其中一种。
Some other ones I want to talk about now - maybe I'll talk about one more. 

407
00:24:17,825 --> 00:24:19,400
还有一种叫做 "查找" 的移动方式。
There's another movement called "find". 

408
00:24:19,400 --> 00:24:20,725
这也很有用。
This is also kind of useful. 

409
00:24:20,725 --> 00:24:21,850
假设我在这一行上，
Suppose I'm on this line, 

410
00:24:21,850 --> 00:24:24,850
我想跳转到第一个等于...
and I want to jump to the first character that equal to... 

411
00:24:24,850 --> 00:24:26,725
比如我想跳到第一个 "o"。
Like, I want to jump to the first "o". 

412
00:24:26,725 --> 00:24:28,250
我可以按下 "fo"，
I can press "fo", 

413
00:24:28,250 --> 00:24:31,325
光标就会移动到第一个 "o"。
and my cursor moves to the first "o". 

414
00:24:31,325 --> 00:24:32,725
我就会找到 "o"。
I've like, found "o". 

415
00:24:32,725 --> 00:24:35,825
我可以按下 "fw" 就会跳到第一个 "w"，我想是在这里。
I can do "fw" and it'll move to the first "w", which I think is right here. 

416
00:24:35,825 --> 00:24:38,200
我可以按下 "fc"来查找第一个 "c"。
"fc" find the first "c". 

417
00:24:38,949 --> 00:24:41,099
我也可以做相同的事情，但是向后移动。
I can also do the same thing, but backwards. 

418
00:24:41,099 --> 00:24:45,300
如果我按下大写的 "F"，然后再按下 "w"，我就可以找到它前面的 "w"。
If I do "Fw", I can find the "w" that's before it. 

419
00:24:45,400 --> 00:24:48,750
大写的 "F" 和 "s"：找到前面的 "s"。
"Fs" find the "s" that's before that. 

420
00:24:48,750 --> 00:24:52,300
然后，还有一种查找的变种——“t”（表示“to”），
And then, there's a variant of "f" for "find" - "t" for "to", 

421
00:24:52,350 --> 00:24:54,300
所以我可以跳转到“o”，
so I can jump to "o", 

422
00:24:54,300 --> 00:24:56,800
直到找到 o 为止。
and it jumps, like, until it's found "o". 

423
00:24:56,800 --> 00:24:58,550
但不是在它的顶部，而是在它之前一个字符的位置。
But not on top of it, right before it. 

424
00:24:58,550 --> 00:25:05,975
而大写字母 T，比如说 “T”，向后跳到字符 “T”，但不是跳到它的顶部，而是跳到它的前一个字符。
And "T" say, "T" jumps backwards to the t except not all the way on top of it, one character before. 

425
00:25:06,275 --> 00:25:07,900
所以，你已经可以看到
And so, you can already see

426
00:25:07,900 --> 00:25:12,225
我谈到Vim 是一种编程语言的想法，你可以组合这些命令。
that idea I talked about of like, vim is a programming language; you can, like, compose these commands. 

427
00:25:12,225 --> 00:25:18,800
“f”和“t”是“查找”和“到”的意思，你可以查找特定的字符，或者跳转到特定的字符。
"f" and "t" are "find" and "to", and you can say find a particular character, or jump to a particular character. 

428
00:25:19,400 --> 00:25:21,950
这些是几个 Vim 的移动命令。
So, those are a couple of vim movement commands. 

429
00:25:21,950 --> 00:25:28,325
那么，对于这些命令有没有问题？有问题吗？
So, any questions about those so far? So this is... yeah, question? 

430
00:25:28,725 --> 00:25:31,750
好的，很棒。
No? Okay, cool. 

431
00:25:31,750 --> 00:25:33,825
这些是 Vim 的移动命令，
So, those are vim movement commands. 

432
00:25:33,825 --> 00:25:37,050
它们可以帮助你在正常模式下快速地在文件中导航。
This is how you can navigate around a file quickly in normal mode. 

433
00:25:37,050 --> 00:25:40,700
现在，另一类有用的命令是编辑命令。
Now, another category of useful commands are editing commands. 

434
00:25:40,700 --> 00:25:47,000
我们已经谈到的一个是“i”命令，用于从“正常”模式切换到“插入”模式，
So, one we kind of already talked about is the "i" command for moving from normal mode to insert mode, 

435
00:25:47,000 --> 00:25:49,000
在那里你可以开始编写文本。
where you can start just writing text. 

436
00:25:49,000 --> 00:25:50,990
所以，假设我跳到这里并按下“i”键，
So, suppose I go up here and I press "i". 

437
00:25:50,990 --> 00:25:53,875
现在我可以输入任何文本，比如“Hello World”，然后按下“Enter”键。
Now I can type in whatever text I want "Hello world", "Enter". 

438
00:25:56,250 --> 00:25:58,350
然后，按下“Escape”键回到正常模式，
Then, press "Escape" to go back to normal mode, 

439
00:25:58,350 --> 00:26:00,475
我就对我的缓冲区进行了修改。
and I've made a change to my buffer. 

440
00:26:00,475 --> 00:26:03,925
但是，在处理编程语言时，
But, there are a whole bunch of other commands for making efficient edits 

441
00:26:03,925 --> 00:26:06,800
还有很多其他命令可以进行高效的编辑。
that makes sense for when you're dealing with programming languages. 

442
00:26:06,825 --> 00:26:11,675
一个有用的命令是我之前无意中使用过的“o”命令。
So, one useful command that I accidentally used earlier, before teaching you about it, is the "o" command. 

443
00:26:11,675 --> 00:26:14,000
假设我的光标在这里，
So, suppose my cursor is, like, over here, 

444
00:26:14,000 --> 00:26:19,750
如果我从正常模式按下“o”，它会在光标下方打开一个新行。
and if I press "o", from normal mode, what it does, is it opens a new line below where my cursor is. 

445
00:26:19,750 --> 00:26:21,350
这就是“o”的含义。
That's what "o" stands for. 

446
00:26:21,350 --> 00:26:22,975
它会创建一个新行
And it, so it creates a new line,

447
00:26:22,975 --> 00:26:24,000
并进入插入模式，
and it put me into insert mode. 

448
00:26:24,000 --> 00:26:26,750
这样我就可以开始输入一些文本，
So, now I can start typing in some text, press "Escape", 

449
00:26:26,750 --> 00:26:28,050
按下Esc键回到正常模式.
and go back to normal mode. 

450
00:26:28,100 --> 00:26:32,150
就像“o”命令一样，还有一个大写的“O”命令，
And then, just like the "o" command, there's a capital "O" command, 

451
00:26:32,150 --> 00:26:38,850
所以如果我在这里，按下大写的“O”，它会将我放到当前位置的上方的插入模式中。
so if I'm here and I do capital "O", it puts me into insert mode above where I currently am. 

452
00:26:40,425 --> 00:26:42,825
还有另一个Vim命令可以删除东西。
There's another vim command for deleting things. 

453
00:26:42,825 --> 00:26:48,125
假设我的光标在这个单词上方，
So, suppose my cursor is, like, on top of this word right here, 

454
00:26:48,125 --> 00:26:50,275
我按下d键。
and I press the "d" key. 

455
00:26:50,275 --> 00:26:51,350
“d”代表删除。
"d" for delete. 

456
00:26:51,350 --> 00:26:56,650
噢，没有反应.好吧，原来d键需要与移动命令结合使用。
Oh, nothing happens; turns out that the d key needs to be combined with a movement command. 

457
00:26:56,650 --> 00:27:00,075
所以，记得我们刚刚讨论过不同的移动命令，比如hjkl
So, remember we just talked about different movement commands, like "hjkl", 

458
00:27:00,075 --> 00:27:03,625
、word、backward word等等。
and, like, word, and backward word, and things like that. 

459
00:27:03,650 --> 00:27:04,950
所以我按下d键。
So, I press "d". 

460
00:27:05,875 --> 00:27:08,550
我按下d键，然后按下w键，
I press "d" and I can press "w", 

461
00:27:08,550 --> 00:27:10,075
它就删除了一个单词。
and it's deleted a word. 

462
00:27:10,875 --> 00:27:12,350
让我撤销一下。
So, let me undo that. 

463
00:27:12,350 --> 00:27:14,825
在Vim中撤销只需要按u键。
Undoing in vim is just "u" for undo. 

464
00:27:14,825 --> 00:27:16,850
注意我的光标在这里。
So, notice my cursor's right here. 

465
00:27:16,850 --> 00:27:19,400
我按下“dw”,它删除了一个单词。
I do "dw", it's deleted a word. 

466
00:27:19,400 --> 00:27:20,425
我可以移动光标，
I can move around, 

467
00:27:20,425 --> 00:27:22,100
然后再删除另一个单词。
and then delete another word. 

468
00:27:22,100 --> 00:27:26,800
假设我在……
Suppose I'm... uh, keeps getting in the way. Suppose I'm, like, 

469
00:27:26,800 --> 00:27:28,225
在单词的中间，
somewhere in the middle of a word, 

470
00:27:28,225 --> 00:27:29,950
想要删除到单词末尾。
and I want to delete to the end of a word. 

471
00:27:29,950 --> 00:27:38,300
你猜我需要使用哪个键的组合呢？是 "d" 和什么？是 "de"，没错。
Any guesses for what combination of keys I'd use for that? "d" and what? "de", exactly. 

472
00:27:38,300 --> 00:27:40,250
删除到单词末尾。
Delete to the end of the word. 

473
00:27:42,200 --> 00:27:44,900
另一个有用的编辑命令是 "c" 命令，
Another useful editing command is the "c" command. 

474
00:27:44,900 --> 00:27:46,500
c 代表 "change"（改变）。
"c" stands for change. 

475
00:27:46,500 --> 00:27:48,936
所以，改变和删除非常相似，
So, change is really similar to delete,

476
00:27:48,936 --> 00:27:52,450
但改变会将你置于插入模式，因为我想删除一个东西，
except change puts you in insert mode, because, like, I want to delete a thing, 

477
00:27:52,450 --> 00:27:53,975
但要将它改变为其他东西。
but change it to something else. 

478
00:27:53,975 --> 00:27:55,050
因此，如果我在这里，
So, if I'm here, 

479
00:27:55,050 --> 00:27:58,200
输入 "ce"，就像是将其改变到单词的末尾。
and I do "ce", it's like, change to the end of the word. 

480
00:27:58,200 --> 00:28:01,275
它会删除内容直到单词的末尾，
And, it gets rid of the contents until the end of the word, 

481
00:28:01,275 --> 00:28:02,850
并注意到它将我置于插入模式。
and notice it put me in insert mode. 

482
00:28:02,850 --> 00:28:05,425
现在，我输入的任何字符都会进入缓冲区。
So now, whatever characters I type go into the buffer. 

483
00:28:05,425 --> 00:28:08,750
如果我按下 "Escape"，我就会回到正常模式。
If I press "Escape", I go back into normal mode. 

484
00:28:08,750 --> 00:28:14,175
因此，c 和 d 是相似的：它们都需要一个移动作为参数。
And so, "c" and "d" are analogs: they both take motions as arguments. 

485
00:28:14,175 --> 00:28:18,300
它们将删除或更改该运动。
And, they will either delete that motion, or change that motion. 

486
00:28:18,300 --> 00:28:23,275
例如，如果你按下 "c" 键，
So, for example, if you press the "c" key, 

487
00:28:23,275 --> 00:28:26,587
也有这种模式，如果你连续按两次特定的编辑键,
there's also this pattern that, if you press a particular editing key twice, 

488
00:28:26,587 --> 00:28:28,725
它会在给定的行上产生相应的效果。
it'll have that effect on the given line. 

489
00:28:28,725 --> 00:28:31,350
所以，如果我按下 "dd"，那就会删除该行。
So, if I press "dd", that deletes the line. 

490
00:28:31,350 --> 00:28:33,925
如果我按下 "cc"，那就会删除给定的行，
If I press "cc", that deletes the given line, 

491
00:28:33,925 --> 00:28:37,375
但将我置于插入模式，这样我就可以用其他行替换它。
but puts me in insert mode, so I can replace it with some other line. 

492
00:28:38,950 --> 00:28:42,600
我们将涵盖一些其他的编辑命令，
We'll cover a couple other, uh, editing commands, 

493
00:28:42,600 --> 00:28:45,500
因为稍后我们将看到所有这些命令如何相互作用。
because then later we'll see how all these things interact together. 

494
00:28:45,500 --> 00:28:47,675
因此，另一个有用的命令是 "x" 命令。
So, another useful one is the "x" command. 

495
00:28:47,675 --> 00:28:50,050
假设我的光标在某个特定的字符上。
So, suppose my cursor is over some particular character. 

496
00:28:50,050 --> 00:28:53,050
如果我按下"x"，它只会删除该字符。
If I press "x", it just deletes that character. 

497
00:28:56,600 --> 00:28:58,550
还有另一种命令叫做"r"。
There's another command called "r". 

498
00:28:58,550 --> 00:29:00,200
如果我在某个特定的字符上，
If I'm over a particular character, 

499
00:29:00,200 --> 00:29:03,000
按下"r"，它会将另一个字符作为参数，
and I press "r", it takes another character as an argument, 

500
00:29:03,000 --> 00:29:06,150
并用另一个字符替换该特定字符。
and it replaces that particular character with some other character. 

501
00:29:10,675 --> 00:29:13,450
我将介绍另外几个编辑命令。
And, I'll cover a couple more editing commands. 

502
00:29:13,450 --> 00:29:15,325
其中一个我在前几分钟已经提过了
So, I think one I talked about a moment ago

503
00:29:15,325 --> 00:29:18,200
当然，你可以撤销在Vim中所做的更改。
but, of course you can undo changes you've made in vim. 

504
00:29:18,200 --> 00:29:20,900
而且你在普通模式下按下"u"就可以了。
And the way you do that is by pressing "u" while you're in normal mode. 

505
00:29:20,900 --> 00:29:23,000
所以，"u"代表撤销很容易记住。
So, "u" for undo is pretty easy to remember. 

506
00:29:23,000 --> 00:29:26,400
我按下了"u"多次；它撤销了我所做的所有更改。
So, I press "u" a whole bunch of times, it's undone all the changes I've made. 

507
00:29:26,500 --> 00:29:29,375
然后，撤销的相反是重做。
And then, the opposite of undo is, of course, redo. 

508
00:29:29,375 --> 00:29:32,200
在Vim中，重做的绑定键是“Ctrl-r”。
And, the binding for that in vim is "Ctrl-r". 

509
00:29:37,800 --> 00:29:44,300
好的，我将讲一下复制和粘贴，因为...哦，是的，有问题吗？
All right, one other editing command I'm going to talk about is copy and paste because... Oh yes, question? 

510
00:29:54,225 --> 00:29:56,025
那是一个很好的问题！
That's a great question! 

511
00:29:56,025 --> 00:30:01,175
问题是，“'undo'是撤销自进入插入模式以来所做的所有更改，还是只撤销最后一个字符？”
So, the question is, "Does 'undo' undo everything you've done since you've gone into insert mode, or just the last character?" 

512
00:30:01,200 --> 00:30:03,450
实际上比这还要复杂一些。
It's  actually a little bit more complicated than that. 

513
00:30:03,450 --> 00:30:06,350
"撤销"会撤销你所做的最后一次更改。
"Undo" does, like, undoes the last change you've made. 

514
00:30:06,350 --> 00:30:07,825
所以，如果你进入插入模式，
So, if you went into insert mode, 

515
00:30:07,825 --> 00:30:08,650
输入了一些东西，
and typed in some stuff, 

516
00:30:08,650 --> 00:30:09,675
然后回到正常模式，
and went back into normal mode, 

517
00:30:09,675 --> 00:30:13,350
然后按下"u"进行"undo"，它会撤销你在插入模式中所做的所有更改。
and then press "u" for "undo", it'll undo all you've done in insert mode. 

518
00:30:13,350 --> 00:30:17,625
但是，如果你做了其他类型的编辑命令，比如说我按下"x"删除一个字符...
But, if you've done some other type of editing command, like, say I press "x" to delete a character... 

519
00:30:17,625 --> 00:30:22,425
如果我按"u"进行撤销，它只会撤销那个编辑命令所做的更改。
If I do "u" for undo, it'll just undo that change that that editing command made. 

520
00:30:23,500 --> 00:30:30,525
现在，这回答了你的问题吗？(是的)很好，还有其他问题吗？好的。
Now, does that answer the question? Great! Any other questions? Cool!

521
00:30:30,525 --> 00:30:34,450
我也会讲一下复制和粘贴，因为那是一个受欢迎的命令。
So, I'll talk about copy and paste as well, because that's a popular one. 

522
00:30:34,450 --> 00:30:37,025
y命令表示复制，
The "y" command stands for copying, 

523
00:30:37,050 --> 00:30:38,800
而p命令则表示粘贴。
and the "p" command stands for pasting. 

524
00:30:38,800 --> 00:30:40,800
y代表"copy"，是因为“yank”
"y" for copy, because, "yank". 

525
00:30:40,800 --> 00:30:44,800
“yank”是Vim用于复制的术语。
Like, that's the word they... That's the terminology that vim uses for copying. 

526
00:30:44,800 --> 00:30:49,500
这些命令也可以接受一个动作作为参数。
And, these commands are "y" also takes a motion as an argument. 

527
00:30:49,575 --> 00:30:52,700
例如，如果我键入yy，它将复制当前行。
So if I do like, "yy", it copies the current line. 

528
00:30:52,700 --> 00:30:54,492
如果我按下“p”进行“粘贴”，
And, if I press "p" for paste, 

529
00:30:54,492 --> 00:30:57,975
请注意现在这两行是相同的，因为我刚刚粘贴了一行。
notice that now these two lines are identical, because I've just pasted a line below. 

530
00:30:57,975 --> 00:30:59,475
 "u"表示“撤销”。
"u" for undo. 

531
00:30:59,475 --> 00:31:02,350
但是如果我做类似“yw”的操作，它会复制单词。
But if I do something like "yw", it's copied the word. 

532
00:31:02,350 --> 00:31:03,550
然后我可以按下“p”，
And then I can do "p", 

533
00:31:03,550 --> 00:31:07,400
它会在光标所在位置再次粘贴该单词。
and it just pasted that word again, right where my cursor was. 

534
00:31:07,400 --> 00:31:14,000
在复制和粘贴的上下文中，特别有用的一件事是能够选择一块文本并将其复制。
One useful thing, especially in the context of copy and paste,is to be able to select a block of stuff and copy it, right? 

535
00:31:14,000 --> 00:31:17,750
这可能是您在以前使用的任何编辑器中使用复制和粘贴的方式。
Like, this is probably how you used copy and paste in whatever editor you were using before. 

536
00:31:17,750 --> 00:31:20,700
因此，这就涉及到了视觉模式。
And so, that's where we get into the visual modes. 

537
00:31:20,700 --> 00:31:23,800
这些是一组彼此相关的模式，
So, these are another set of modes that are all related to each other, 

538
00:31:23,800 --> 00:31:25,400
可以从普通模式进入，
and that can be reached from normal mode, 

539
00:31:25,400 --> 00:31:27,825
用于选择文本块。
and they're used for selecting chunks of text. 

540
00:31:27,825 --> 00:31:30,525
其中一个模式是普通视觉模式。
So, one mode is, just, regular visual mode. 

541
00:31:30,525 --> 00:31:32,200
您可以通过按v进入该模式。
You can enter that by pressing "v". 

542
00:31:32,200 --> 00:31:37,700
进入此模式后，您可以使用大多数常规的普通模式命令来移动光标。
And then, once you're in this mode,you can use most of the regular normal mode commands to move your pointer around. 

543
00:31:37,700 --> 00:31:39,350
它会选择两点之间的所有文本。
And it selects everything in between. 

544
00:31:39,350 --> 00:31:44,650
因此，我可以使用hjkl来移动光标，或使用“w”按单词移动，或使用不同的命令
So I can use, like, "hjkl" just to move the cursor, or I can use "w" to move by words, or different things like that, 

545
00:31:44,650 --> 00:31:46,725
来选择文本块。
and it will select a block of text. 

546
00:31:46,725 --> 00:31:51,600
一旦我选择了这个文本块，就有许多不同类型的有用的操作可以进行。
And, once I've selected this block of text   there are a whole bunch of different types of useful things you could do with it. 

547
00:31:51,600 --> 00:31:54,275
最常见的操作之一是将其复制。
One of the most popular things to do is copying this. 

548
00:31:54,275 --> 00:31:56,850
所以，一旦我选择了文本块，我可以按y复制，
So, once I've selected, I can do "y" to copy, 

549
00:31:56,850 --> 00:31:59,050
然后回到正常模式。
and it puts me back into normal mode. 

550
00:31:59,050 --> 00:32:01,750
现在，它已经将所选文本块复制到粘贴缓冲区中。
And now, it's copied this to the paste buffer. 

551
00:32:01,750 --> 00:32:03,000
然后，如果我去其他地方，
And then if I go somewhere else, 

552
00:32:03,000 --> 00:32:06,100
按下“p”，它会将我刚刚复制的整个文本块粘贴在那里。
and press "p", it pastes in that whole chunk of text I copied. 

553
00:32:07,000 --> 00:32:12,950
这类似于视觉模式，可以选择连续的文本流。
And it's similar to visual mode, which selects kind of a contiguous stream of text. 

554
00:32:12,975 --> 00:32:16,925
有个视觉行模式，可以通过按大写V可到达该模式，
There's visual line mode so that can be reached by pressing "V", 

555
00:32:16,925 --> 00:32:19,150
并且一次选择整行。
and that selects whole lines at a time. 

556
00:32:19,175 --> 00:32:22,600
然后还有视觉块模式，可以通过按“Ctrl-v”
And then there's visual block mode, which can be selected by pressing "Ctrl-v", 

557
00:32:22,625 --> 00:32:24,850
来选择矩形块文本。
and that can select rectangular blocks of text. 

558
00:32:24,850 --> 00:32:27,500
因此，这是您以前的编辑器无法完成的操作。
So this is something your old editor couldn't do. 

559
00:32:29,650 --> 00:32:30,750
好的，
Alright, 

560
00:32:30,750 --> 00:32:33,600
还有很多其他的 Vim 编辑命令需要学习。
so, there's a lot more vim editing commands to learn. 

561
00:32:33,600 --> 00:32:35,700
有许多非常奇怪和花哨的事情。
There's lots of, like, really weird and fancy things. 

562
00:32:35,700 --> 00:32:41,075
例如，波浪线命令（“~”）可以更改字符或当前所选内容的大小写。
Like, for example, the "~" command changes the case of the character,or the selection that you've currently selected. 

563
00:32:41,075 --> 00:32:43,500
因此，例如，我可以选择 Visual Studio Code 
So for example, I can take this, like, "Visual Studio Code", 

564
00:32:43,500 --> 00:32:47,350
并翻转整个内容的大小写，然后按“~”。
and flip the case on the whole thing, by selecting it and pressing "~". 

565
00:32:47,600 --> 00:32:51,525
还有许多类似的东西，它们随着你的学习会变得越来越深奥。
And, there's a whole bunch of other things like that, they get more and more esoteric as you go. 

566
00:32:51,525 --> 00:32:53,125
因此，我们不会涵盖所有这些内容，
So, we're not going to cover all of those, 

567
00:32:53,125 --> 00:32:55,375
但您将在练习中了解到它们。
but you'll get to those in the exercises. 

568
00:32:55,725 --> 00:32:57,575
这些是 Vim 编辑命令，
So, those are vim editing commands, 

569
00:32:57,575 --> 00:33:00,150
其中许多可以与移动命令组合使用。
and a lot of them can be composed with movement commands. 

570
00:33:00,150 --> 00:33:07,675
对于以上内容是否有疑问呢？很棒。
So, any questions about either of those so far? Cool. 

571
00:33:07,675 --> 00:33:15,100
接下来，与正常模式相关的另一个命令类别是数量。
So, moving along, another category of things of commands that are mostly relevant to normal mode are counts. 

572
00:33:15,100 --> 00:33:17,950
您可以给它们一个数字，
So, you can give them a number, to do a particular thing, 

573
00:33:17,950 --> 00:33:19,300
以执行某个特定操作一定数量的次数。
some number of times. 

574
00:33:19,300 --> 00:33:21,875
假设我的光标在这里，
So suppose my cursor is here, 

575
00:33:21,875 --> 00:33:24,775
我想要向下移动1 2 3 4行。
and I want to move down, like 1, 2, 3, 4 lines. 

576
00:33:24,800 --> 00:33:28,125
一种方法是按下“j”键四次，向下移动四次，
One way I can do that is by pressing "j" four times, go down four times. 

577
00:33:28,125 --> 00:33:30,525
而“kkkk”则向上移动四次。
"kkkk" goes up four times. 

578
00:33:31,325 --> 00:33:34,750
但是，我可以使用计数来代替多次按同一个键。
But, rather than pressing a particular key again, and again, I can use a count. 

579
00:33:34,775 --> 00:33:40,650
所以，如果我按下“4”、“j”，它会执行四次“j”操作，对吧？Vim的界面就像是一个编程语言。
So if I press "4j", it does "j" four times, right? Vim's interface is a programming language. 

580
00:33:40,650 --> 00:33:42,800
如果我按下“4k”，它会向上移动四次。
If I do "4k", it moves up four times. 

581
00:33:42,850 --> 00:33:44,150
如果我在这里，
If I am here, 

582
00:33:44,150 --> 00:33:46,850
按下“v”进入可视模式...
and I press "v" to go into visual mode... 

583
00:33:46,850 --> 00:33:49,575
好的，现在我可以移动光标并选择文本块。
Okay so now I can move my cursor around, and select blocks of text. 

584
00:33:49,575 --> 00:33:52,450
我可以按“eee”选择几个单词，
I can do, like, "eee" to select a couple of words, 

585
00:33:52,450 --> 00:34:00,325
但我也可以回到这里。按“v”进入可视模式 - 并按三个“e”选择向前的三个“单词结尾”。
but, I could also go back here. "v" for visual mode and press "3e" to select, like, "three ends of words" forward. 

586
00:34:01,475 --> 00:34:04,700
当然，这些还可以与编辑命令相结合使用。
And then of course these can also be combined with editing commands. 

587
00:34:04,700 --> 00:34:08,700
比如，假设我想删除七个单词。
So, like, suppose I want to delete seven words. 

588
00:34:08,700 --> 00:34:11,450
我可以把光标移动到某个位置，
I can do that by moving my cursor somewhere, 

589
00:34:11,450 --> 00:34:13,350
然后输入“7dw”。
and doing "7dw". 

590
00:34:13,350 --> 00:34:14,725
删除七个单词。
Seven delete words. 

591
00:34:15,950 --> 00:34:20,475
这对于这样的情况特别有用：我的光标在屏幕上的某个位置，
And so, this is particularly useful for things like, suppose my cursor is somewhere on the screen, 

592
00:34:20,475 --> 00:34:24,275
我正在查看屏幕上的其他地方，或者我想让光标移动到那一行。
and I'm looking somewhere else on the screen, or, I want my cursor to go to that particular line. 

593
00:34:24,275 --> 00:34:27,200
请注意，我在左边设置了相对行号。
Notice that I've set up relative line numbering on the left. 

594
00:34:27,200 --> 00:34:30,200
因此，无论我的光标在哪里，它都显示当前行号，
So, wherever my cursor is, it shows the current line number, 

595
00:34:30,200 --> 00:34:32,925
但在其他地方，它只是相对于我的位置的偏移量。
but everywhere else, it's just the offset from where I am. 

596
00:34:32,925 --> 00:34:34,800
现在假设我的光标在这里，
Now, suppose my cursor is here, 

597
00:34:34,800 --> 00:34:38,200
但我想向下移动到像“Microsoft Word”这样的位置，
but I want to move down to the like "Microsoft Word" down here, 

598
00:34:38,200 --> 00:34:39,775
也就是往下8行。
so that's eight lines down. 

599
00:34:39,775 --> 00:34:45,650
那么，我应该按哪些键的组合来实现呢？也就是说，最有效的方法是什么？是的，就是这样！
So, what combination of keys would I press, to do that? Like, what's the most efficient way? Yeah, exactly! 

600
00:34:45,650 --> 00:34:48,900
我们试一试——按下8j，我的光标就移动到了这一行。
Let's try that out. "8j" and my cursor moved down to this line. 

601
00:34:51,725 --> 00:34:58,375
好的。最后，Vim中的一个关键意义类别是修改器。
Okay. And then, one final category of key meanings in vim is something called modifiers. 

602
00:34:58,375 --> 00:35:01,350
到目前为止，我们已经介绍了移动、编辑、计数，
So we have, so far, movement, edits, counts, 

603
00:35:01,350 --> 00:35:03,200
最后是修改器。
and, finally, we have modifiers. 

604
00:35:03,200 --> 00:35:07,150
修改器可以稍微改变移动命令的含义。
So, modifiers kind of change the meaning of a movement command a little bit. 

605
00:35:07,150 --> 00:35:12,300
其中两个特别有用的修改器是“a”和“i”。
And, a couple modifiers that are especially useful are the "a" and "i" modifier. 

606
00:35:12,300 --> 00:35:16,825
a代表around（周围），i代表inside（内部）。
So, "a" stands for like around and "i" stands for inside. 

607
00:35:17,150 --> 00:35:22,675
为了看到这个特别有用，我可以把光标移动到这里，例如。
And, to see where this is really useful, I can move my cursor to somewhere like here, for example. 

608
00:35:22,675 --> 00:35:27,225
希望你们中大多数人都熟悉markdown语法——如果不熟悉也没有关系。
So, hopefully, most of you are familiar with markdown syntax and if not it doesn't matter too much. 

609
00:35:27,225 --> 00:35:32,500
这是一个markdown链接；方括号（“[]”）中呈现出一段文本，括号中则是链接（“()”）。
Uh, this is a link in markdown, it's a text rendered in square brackets("[]"), and then the link in parentheses("()"). 

610
00:35:32,525 --> 00:35:34,175
假设我的光标在这里，
Suppose my cursor is inside here, 

611
00:35:34,175 --> 00:35:37,275
我想更改与此链接相对应的文本。
and I want to change the text corresponding to this link. 

612
00:35:37,650 --> 00:35:40,600
嗯，我可以通过向后移动b，
Well, one way I could do that is, like, move back here with "b", 

613
00:35:40,600 --> 00:35:42,625
然后2dw，
and, like, "2dw", 

614
00:35:42,625 --> 00:35:44,325
再按“i”进入插入模式来进行更改。
and then "i" to go into insert mode. 

615
00:35:44,325 --> 00:35:46,450
这是我可以进行此更改的众多方法之一，
That's one of the many ways I can make this change, 

616
00:35:46,450 --> 00:35:50,150
我可以输入任何其他想要的内容——按u撤消，再按一次u。
and I can type in whatever other thing I want, "u" to undo, "u" to undo. 

617
00:35:50,150 --> 00:35:56,200
我还可以使用另一种方法，即更改两个单词——“c2w”，然后输入其他文本。
Another way I could have done that is change two words "c2w" and then type in some other text. 

618
00:35:56,200 --> 00:36:03,700
但是，我可以用修饰符命令来实现相同的更改，
But, one final way I could do the same change is using the modifier commands to talk about 

619
00:36:03,700 --> 00:36:08,600
以说明我想如何与括号和方括号这些不同类型的分组交互。
how I want to interact with these different types of grouping things like parentheses("()") and square brackets("[]"). 

620
00:36:08,600 --> 00:36:14,250
因此，最后一种方法是更改方括号内部-“c”“i”“[”
So, one final way of doing this is change inside square brackets "ci["

621
00:36:14,250 --> 00:36:19,525
这将使我进入插入模式，删除方括号内部的内容后。
and that puts me into insert mode, after deleting the contents that are inside the brackets. 

622
00:36:19,575 --> 00:36:23,550
你看到我们如何将所有这些不同的元素结合起来，例如我们谈到的“更改”，
So, do you see how we can take all these different ingredients, like we talked about "change", 

623
00:36:23,550 --> 00:36:25,400
我们可以将其与不同的移动命令组合在一起。
and we could combine that with different movement commands. 

624
00:36:25,400 --> 00:36:27,725
我们谈到了“inside”修饰符。
We talked about inside, how it's a modifier. 

625
00:36:27,725 --> 00:36:29,475
然后我们谈到了...
And then we talked about, uh... 

626
00:36:29,475 --> 00:36:31,625
我们没有谈到括号。
we didn't talk about parentheses("()"). 

627
00:36:31,650 --> 00:36:34,750
但是，如果你的光标悬停在不同的分组元素，
But, if your cursor is hovering over a different, uh, 

628
00:36:34,750 --> 00:36:37,425
如括号或方括号上，
different types of grouping things like parentheses("()"), or square brackets("[]"), 

629
00:36:37,425 --> 00:36:41,850
你可以按百分号移动键在匹配的括号之间来回跳转。
you can press the percent movement key to jump back and forth between matching parentheses("()"). 

630
00:36:41,850 --> 00:36:50,825
如果我走到这里并输入“di(”，我可以删除括号内的内容。
If I go over here and I do "di(". I can delete the contents inside these parentheses. 

631
00:36:51,325 --> 00:36:55,000
因此，这些是Vim的修饰符。
And so, those are vim, uh, modifiers. 

632
00:36:55,000 --> 00:36:56,450
我想我们谈到了“i”，
I guess we talked about "i", 

633
00:36:56,450 --> 00:36:57,350
但是我们没有谈到“a”。
but we didn't talk about "a". 

634
00:36:57,350 --> 00:37:02,900
如果我执行“da(”，它将删除一个完整的、包括括号的分组，
If I do "da(", it deletes a whole, like parenthesized group including the parentheses("()"). 

635
00:37:03,075 --> 00:37:06,925
所以“i”表示内部，而“a”表示周围或包括。
So "i" is inside, "a"  is around or including .

636
00:37:09,950 --> 00:37:14,216
这些基本上是您在与Vim界面交互时
All right so those are basically the different categories of things you can combine together,

637
00:37:14,216 --> 00:37:16,766
可以组合在一起的不同类别的东西。
when interacting with vim's interface. 

638
00:37:16,825 --> 00:37:21,450
所以，有关这一点或这个界面作为编程语言的整体思路有任何问题吗？
So, any questions about that or the overall idea of this interface being a programming language?

639
00:37:24,625 --> 00:37:25,725
很好。
Cool. 

640
00:37:25,800 --> 00:37:32,700
那么，让我们做一个快速演示，以展示此编辑器的强大功能。
So, let's do a quick demo, to kind of demonstrate the power of this editor. 

641
00:37:32,700 --> 00:37:39,275
它将帮助我们了解这个工具如何快速运作，并与我们思考的速度相匹配。
And, it will kind of help us see how this tool can work really fast and kind of match the speed at which we think. 

642
00:37:39,275 --> 00:37:44,875
这里有一个非常破损的“fizzbuzz”实现，实际上什么都没有打印。
So, over here is a very broken "fizzbuzz" implementation that doesn't actually print anything. 

643
00:37:44,875 --> 00:37:49,275
希望你们中的大多数人都听说过“fizzbuzz”，如果没有，我将简要解释一下。
Uh, hopefully, most of you have heard of "fizzbuzz" - if not, I'll explain it super briefly. 

644
00:37:49,275 --> 00:37:53,425
“fizzbuzz”是一项编程练习，在此练习中，您将打印从1到n的数字，
Uh, "fizzbuzz" is a programming exercise where you print the numbers 1 through n, 

645
00:37:53,425 --> 00:37:58,200
但当数字可以被3整除时，您将打印fizz-当它可以被5整除时，您将打印buzz。
but when the number is divisible by 3, you print fizz; when it's divisible by 5, you print buzz. 

646
00:37:58,200 --> 00:38:00,325
同时，当它能被3和5同时整除
And, when it's divisible by both 3 and 5,

647
00:38:00,350 --> 00:38:01,725
它会打印fizzBuzz，
you print fizzbuzz. 

648
00:38:01,725 --> 00:38:03,925
如果不符合条件，就直接打印数字。
And, if none of those apply, you just print the number. 

649
00:38:03,925 --> 00:38:09,725
所以你应该打印1，2，Fizz，4，Buzz等等。
So, you should print like "1", "2", "fizz', "4", "buzz", and so on. 

650
00:38:09,725 --> 00:38:14,650
但是，如果我运行这个程序，它不会打印任何东西。
But, if I run this program, it doesn't print anything. 

651
00:38:14,975 --> 00:38:18,500
现在它们在左边，然后把它们放在右边的终端里。
Here, I have them on the left, in just a terminal on the right.

652
00:38:19,300 --> 00:38:21,650
好的，所以这里有一堆问题。
Okay,so there's a bunch of issues with this. 

653
00:38:21,650 --> 00:38:23,775
其中一个问题是main从来没有被调用，
One is that main is never called, 

654
00:38:23,775 --> 00:38:25,550
所以让我们从修复它开始。
so let's start off with fixing that. 

655
00:38:25,550 --> 00:38:32,050
这就是我会如何进行更改的方式，请注意它只需要很少的按键：
So, here's how I would make this change and notice how few keystrokes this requires: 

656
00:38:32,050 --> 00:38:37,075
大写G表示跳到文件底部，o表示在下面打开一个新行，
capital "G" means go to the bottom of the file, "o" opens a new line below, 

657
00:38:37,075 --> 00:38:38,900
现在我可以输入一些东西了。
and now I can just type in stuff. 

658
00:38:38,900 --> 00:38:40,200
所以，我处于插入模式。
So, I'm in insert mode. 

659
00:38:43,550 --> 00:38:48,125
好的，我输入了我想要做出的任何更改，按Escape回到正常模式。
Okay, so I've typed in whatever change I want to make, "Escape" to go back to normal mode. 

660
00:38:48,125 --> 00:38:53,050
如果我输入:w（命令模式，右边），让我回到这里。
If I do ":w" (command mode, right), let me go back here. 

661
00:38:53,050 --> 00:38:55,575
好的，现在至少当我运行它时，我的程序会打印一些东西。
Okay, now at least my program prints something when I run it. 

662
00:38:55,575 --> 00:38:59,500
这个程序的另一个问题是它从0开始而不是从1开始，
Another issue with this program is that it starts at 0 instead of 1, 

663
00:38:59,500 --> 00:39:01,175
所以让我们去修复它。
so let's go fix that. 

664
00:39:01,175 --> 00:39:05,525
所以，我想去到这个范围
So, I want to go over to this "range" thing, 

665
00:39:05,525 --> 00:39:09,900
哎呀，这个范围的问题，它不应该从“0”到“限制”，而应该从“1”到“限制+1”。
and it shouldn't be going from 0 to "limit", it should be going from 1 to "limit+1". 

666
00:39:09,900 --> 00:39:12,875
我没有向你展示过的一个命令是如何在vim中搜索，
One command which I didn't show you about is how you search in vim, 

667
00:39:12,875 --> 00:39:18,175
所以按斜杠（/）关闭它并重新开始。
so you press forward slash ("/") to close this and restart it. 

668
00:39:18,175 --> 00:39:21,700
如果你按斜杠，它会开始搜索，
If you press forward slash("/"), it starts search, 

669
00:39:21,700 --> 00:39:27,450
所以如果我输入“范围”（enter），我的光标会从之前的任何位置跳转到它找到的第一个“范围”。
so if I type in "range" ,enter, my cursor goes from wherever it was before to the first instance of "range" it found. 

670
00:39:27,475 --> 00:39:29,725
所以，这是一种非常高效的移动方式。
So, it's a really efficient way of moving where I want to move. 

671
00:39:29,725 --> 00:39:37,250
“ww”可以向前移动两个单词，I可以进入插入模式，添加“1，”（逗号空格），然后退出，回到正常模式。
"ww" to move forward two words, I to go into insert mode,   add the "1", comma space, escape, I'm back in normal mode. 

672
00:39:37,250 --> 00:39:39,100
这是Vim中非常常见的模式：
This is a very common pattern in Vim:  

673
00:39:39,100 --> 00:39:42,875
保持在正常模式下，移动到某个地方，进入插入模式，进行微小的更改，
you stay in normal mode, you go somewhere, you go into insert mode, you make a tiny change,

674
00:39:42,875 --> 00:39:45,425
然后立即返回正常模式，就像正常模式是主页一样，
and you jump right back to normal mode like normal mode is home, 

675
00:39:45,425 --> 00:39:47,325
大部分时间都应该在那里。
and that's where you should be most of the time. 

676
00:39:47,325 --> 00:39:54,775
我还想添加一个“+1”，所以按e键到这个单词的末尾，按a进入插入模式，然后输入“+1”，“Esc”。
I also want to add a "+1", so "e" to go to the end of this word, "a" for apend "+1", "Escape". 

677
00:39:55,725 --> 00:39:57,575
好了，问题解决了。
Alright, fix that problem. 

678
00:39:57,575 --> 00:40:02,800
这个程序的另一个问题是对于能被3和5整除的数都打印“fizz”，
Another issue is that this program prints "fizz" for both divisible by three and five, 

679
00:40:02,800 --> 00:40:04,000
所以让我们来解决这个问题。
so let's fix that. 

680
00:40:04,000 --> 00:40:07,325
输入“/fizz”搜索"fizz"，
 "/fizz" searches for "fizz", been oppressed, 

681
00:40:07,325 --> 00:40:08,775
接下来查找下一个匹配项
and it goes to the next match. 

682
00:40:08,775 --> 00:40:13,005
“ci'”改变了‘ ’里面的内容
"ci'"  changes what's inside the quote(''), 

683
00:40:13,025 --> 00:40:16,900
接下来删除“fizz”，然后回到插入模式，更改引号内的内容，
so it's deleted the "fizz" and put me in insert mode right in between those two quotes(''), 

684
00:40:16,900 --> 00:40:20,525
最后按Esc回到正常模式。
and I can type in whatever I want, "Escape" to go back to normal mode. 

685
00:40:23,000 --> 00:40:26,450
很好，我解决了这个问题。
So, great, I've fixed that particular problem. 

686
00:40:26,450 --> 00:40:34,475
这个程序的另一个问题是，对于15的倍数，它在不同的行上打印“fizz”和“buzz”，
Another problem with this program is that it prints "fizz" and "buzz" on separate lines for multiples of 15, 

687
00:40:34,550 --> 00:40:39,200
所以我们要去解决这个问题。
so let's go and fix that. 

688
00:40:39,650 --> 00:40:42,875
让我到达这一行。
Let me go down to this line here. 

689
00:40:42,875 --> 00:40:43,536
我可以……
One way I can ...

690
00:40:43,550 --> 00:40:48,000
实际上不用关心像程序的实际内容或是一些不重要的，愚蠢的程序内容
don't actually worry about like the actual contents of this program, like this some stupid program that doesn't matter

691
00:40:48,000 --> 00:40:53,200
多关心我在vim中输入了什么，又是怎么高效地修改程序的
pay attention to what keys I'm pressing in vim that allow me to make changes to this program really efficiently. 

692
00:40:53,400 --> 00:40:55,200
我的光标在这一行上。
So, my cursor is on this line. 

693
00:40:55,200 --> 00:40:59,325
按“$”将光标移动到行尾，按i进入插入模式，
I press "$" to go to the end of this line, "i" for insert mode, okay, 

694
00:40:59,325 --> 00:41:01,825
然后输入一些内容，按Esc回到正常模式。
and I'm typing some stuff, "Escape" to go back to normal mode. 

695
00:41:01,850 --> 00:41:05,450
现在，我想进行与下面的打印相同的更改。
Now, I want to make the same change the print below. 

696
00:41:05,500 --> 00:41:06,400
看这里，
Look at this. 

697
00:41:06,400 --> 00:41:07,800
“jj.”
"jj.", 

698
00:41:08,800 --> 00:41:13,750
“.”这个命令在vim中表示重复执行前一个编辑命令，
So what "." does in vim is it repeats the previous editing command that was made, 

699
00:41:13,750 --> 00:41:19,425
这是一种不用一遍又一遍地输入相同内容来完成重复任务的好方法。
and so this is a really nice way of doing repetitive tasks without typing the same thing over and over again. 

700
00:41:19,425 --> 00:41:26,850
在这个例子中，它插入了“,”和“''”，并且当我按下“.”时，它在这一行上执行了同样的操作。
So in that particular case, that inserted comma and quote and so it applied the same thing on this line when I press ".". 

701
00:41:27,400 --> 00:41:32,400
接下来，我们将解决这个程序的另一个问题，
And then when I guess one final part of this demo is we will fix the issue that 

702
00:41:32,400 --> 00:41:37,475
即它可能应该使用命令行参数来代替这里硬编码的10。
this program maybe should take a command line argument instead of having this hard-coded 10 down here. 

703
00:41:37,475 --> 00:41:41,975
那么我们该怎么做呢？我按“gg”回到开头，然后按大写O，
So how do we do that? I'll press "gg" to go to the top, capital "O", 

704
00:41:41,975 --> 00:41:46,525
在上面打一行文字，如“imports this”，
so now I've opened a line above and I'm going to type in some text like "imports sys ",

705
00:41:46,525 --> 00:41:48,675
按escape回到正常模式，
"Escape" to go back to normal mode, 

706
00:41:48,675 --> 00:41:54,375
然后我想到达这里的10，所以输入/10就跳到那里了。
And then I want to go down to where this 10 is. So "/10" makes me jump straight down there. 

707
00:41:54,375 --> 00:41:58,275
“ci(”用于编辑括号内的内容，
"ci(" to edit what's inside the parentheses("()") 

708
00:41:58,275 --> 00:42:02,350
现在我可以在这里输入任何我需要输入的内容,
and now I can type in like whatever thing I need to type in here 

709
00:42:02,350 --> 00:42:08,800
一旦完成，我的程序就能正确地执行fizzbuzz了。
and then once I've done this, my program does "fizz_buzz" correctly.  

710
00:42:08,800 --> 00:42:11,600
我想我漏了一个我想要的修改，但这没关系。
I think I missed one change I wanted to make, but it doesn't matter. 

711
00:42:11,600 --> 00:42:14,675
这证明了您可以快速地进行许多更改。
This demonstrates that you can make lots of changes really fast. 

712
00:42:15,050 --> 00:42:19,375
对于这个演示或我们一直在谈论的总体思路，有任何问题吗？
So any questions about this demo or the overall idea we've been talking about? 

713
00:42:22,450 --> 00:42:26,175
好的，这将在周二进行介绍，
Okay, so this will be covered Tuesday, 

714
00:42:26,175 --> 00:42:32,150
我在左边运行Vim的外部环境和右边的Shell，
so the kind of outside environment I'm running vim on the left and my Shell on the right, 

715
00:42:32,150 --> 00:42:35,025
这是外部的team ox。
and then this is tmux on the outside. 

716
00:42:35,400 --> 00:42:41,025
一个相关的问题可能是如何在不同的vim窗口之间切换，
One variant of that question might be like how do you switch between different Vim windows 

717
00:42:41,025 --> 00:42:43,725
您可以查看讲座笔记中的快捷键，
and you can see the lecture notes for that, but there's a key binding for that. 

718
00:42:43,725 --> 00:42:47,450
可以在同一个窗口或多个窗口之间进行切换。
So if you have the same window open or multiple things open, there's a way of doing that. 

719
00:42:47,450 --> 00:42:48,250
有问题吗？
Question? 

720
00:42:51,074 --> 00:42:52,424
啊，好问题。
ah, good question. 

721
00:42:52,424 --> 00:42:57,725
所以，delete命令接受一个运动命令，然后删除这些内容但保持在正常模式下，
So delete takes a motion and then removes those contents but keeps you in normal mode, 

722
00:42:57,725 --> 00:42:59,325
所以您可以继续执行其他操作。
so you can keep just moving around in a file. 

723
00:42:59,325 --> 00:43:01,900
而change命令非常类似于delete命令，
What change does is very similar to delete, 

724
00:43:01,900 --> 00:43:05,550
它也接受运动命令并以相同的方式处理它们，在文件中移动并删除这些内容。
it takes motions and treats them in the same way, deletes those contents, 

725
00:43:05,575 --> 00:43:07,075
但是它随后会进入插入模式，
but then puts you in insert mode, 

726
00:43:07,075 --> 00:43:09,825
从而节省了您打一个额外按键的时间。
and so it saves you from typing one extra keystroke. 

727
00:43:10,725 --> 00:43:14,950
例如，如果我在这里，我想删除“main”，可以用“dw”删除一个单词，
So if I'm here, for example, I want to delete "main", "dw" deletes a word, 

728
00:43:15,325 --> 00:43:19,475
但现在如果我按下J这样的按键，它会让我向下移动。
but now if I press whatever key likes I press "j", it just moved me down. 

729
00:43:19,475 --> 00:43:24,375
如果我撤消这个操作，再输入cw4更改一个单词，现在它实际上已经进入了插入模式，
If I undo that, do "cw" for change a word, now it's actually put me into insert mode, 

730
00:43:24,375 --> 00:43:26,325
我可以输入任何我想要插入的内容。
and I can type in whatever I want it to insert. 

731
00:43:26,375 --> 00:43:31,150
因此，“dwi”与“cw”相同，
So "dwi" is the same thing as "cw", 

732
00:43:31,150 --> 00:43:32,475
但后者节省了一个按键。
but it saves a keystroke. 

733
00:43:32,575 --> 00:43:35,450
我们在资源中提供了一个名为“vim golf”的东西。
One thing we've linked in the resources is something called "Vim golf". 

734
00:43:35,450 --> 00:43:37,975
基本上，人们在网上设置了一个游戏，
Basically, people have set up a game online 

735
00:43:37,975 --> 00:43:44,475
您可以得到一个编辑任务，并尝试找出完成编辑所需的最小按键数。
where you can get an editing task and try to figure out the minimal number of keystrokes necessary to complete that editing task.

736
00:43:44,475 --> 00:43:45,825
它实际上非常容易上瘾。
It's actually really addictive. 

737
00:43:45,825 --> 00:43:49,150
所以我只建议在空闲时间进行游戏。
So I'd only suggest going on their chest and script time. 

738
00:43:51,000 --> 00:43:53,125
我想我看到有人举手提问了。
I think I saw a hand for another question. 

739
00:43:53,175 --> 00:43:58,603
对，句号。
Yeah, uh, period. 

740
00:43:58,950 --> 00:44:01,775
这是vim命令中最有用的之一。
Yeah, one of the most useful of vim commands. 

741
00:44:01,800 --> 00:44:02,700
好问题。
Good question. 

742
00:44:02,700 --> 00:44:07,925
还有其他问题吗？太棒了。
Any other questions? Cool. 

743
00:44:09,225 --> 00:44:11,850
所以我想我们还有大约五分钟的时间，
So I think we have about five minutes left, 

744
00:44:11,850 --> 00:44:15,525
我将简要介绍一个在笔记中也详细介绍的东西，
and I'm gonna briefly talk about a thing that's also covered in detail in the notes, 

745
00:44:15,525 --> 00:44:17,150
请务必查看这个笔记。
so make sure you look at the notes for this. 

746
00:44:17,150 --> 00:44:21,300
Vim是一款程序员的文本编辑器，
Vim is a programmer's text editor, 

747
00:44:21,300 --> 00:44:23,750
因此，它具有高度的可编程性。
and so of course, it's highly programmable. 

748
00:44:23,750 --> 00:44:28,575
不仅通过它的界面（它本身就是一种编程语言）而且还有其他几种方式。
Not only through its interface that's a programming language but also a couple of different ways. 

749
00:44:28,575 --> 00:44:32,175
有许多设置可以进行微调以匹配您的偏好，
There are lots of settings that you can tweak to match your preferences, 

750
00:44:32,200 --> 00:44:36,075
您还可以安装插件来完成各种有用的事情。
and you can also install plugins for them that do all sorts of useful stuff. 

751
00:44:36,075 --> 00:44:42,000
Vim 的配置方式是通过一个名为“vimrc”的磁盘文件来实现的，
So the way vim is configured is through a file on disk called "vimrc", 

752
00:44:42,000 --> 00:44:46,000
这在很多基于 shell 的工具中都是一种常见模式。
and you'll see this is a common pattern in a lot of shell-based tools. 

753
00:44:46,000 --> 00:44:48,875
这个纯文本文件配置了工具的运行方式。
There'll be a plain text file that configures how the tool works, 

754
00:44:48,875 --> 00:44:52,325
如果我编辑这个文件，它可能还没有在你的机器上存在，
and so if I edit this file and it may or may not exist on your machine yet, 

755
00:44:52,325 --> 00:44:58,775
但我们已经为你创建了一个默认的“vimrc”并在课程网站上提供了链接，
but I've downloaded the, we've created a kind of default "vimrc" for you and linked it on the course website, 

756
00:44:58,775 --> 00:45:00,025
你可以从那里开始。
so you can start with that one. 

757
00:45:00,025 --> 00:45:02,875
如果我输入 “vim ~/.vimrc”，
If I do "vim ~/.vimrc", 

758
00:45:02,875 --> 00:45:08,732
我可以看到一堆注释，然后是特定的命令，比如默认情况下，我们希望有语法高亮,
I can see here a bunch of comments and then particular commands like by default, we want syntax highlighting on, 

759
00:45:08,732 --> 00:45:10,425
同时我们需要行号
and we want line numbers. 

760
00:45:10,425 --> 00:45:14,100
如果我们没有进行一些配置，比如让我删除设置行号的那些内容，
If we didn't do some of these things like let me remove the stuff that sets line numbers, 

761
00:45:14,100 --> 00:45:18,875
如果我删除了这些配置并重新启动 vim，注意到左边就没有行号了。
if I remove those configurations and relaunch vim, notice that I no longer have line numbers on the left. 

762
00:45:18,950 --> 00:45:24,125
总之，你可以通过Vim配置很多东西，
But yeah, so in short, there's a lot of stuff you can configure with vim.

763
00:45:24,125 --> 00:45:27,225
我们已经为你提供了一个非常基本的配置，
We've given you a very basic configuration 

764
00:45:27,225 --> 00:45:31,700
请尝试消除 Vim 中默认情况下的一些奇怪行为，
that tries to remove some of the kind of weird behavior that's on by default in vim, 

765
00:45:31,700 --> 00:45:34,575
但我们不会在你身上强加太多的其他观点。
but we don't really try to enforce too many of our other opinions on you. 

766
00:45:34,575 --> 00:45:38,750
当然，像我们三个人一样，都经常使用 Vim，我们已经完全习惯了vimrc。
But of course, like the three of us used vim a lot and we have heavily customized vimrcs. 

767
00:45:38,750 --> 00:45:42,900
所以如果你想借鉴一些东西，我们也链接了我们的个人配置，
So we've linked to our personal configurations too if you want to take anything from that, 

768
00:45:42,900 --> 00:45:46,675
此外，像数千万人一样，他们会在 Github 上分享他们的 vimrc，
and also, like thousands or millions of people share their vimrcs on Github, 

769
00:45:46,675 --> 00:45:48,575
所以有很多地方可以寻找灵感。
so there's lots of places to look for inspiration. 

770
00:45:48,575 --> 00:45:50,850
因为在这个平台有很多nice的博客
There are also cool blog posts on this topic. 

771
00:45:51,250 --> 00:45:56,075
在 Vim 中，你还可以使用插件来扩展它，这些插件可以做很多有用的事情。
Another thing you can do in vim is you can extend it with plugins that do all sorts of useful things. 

772
00:45:56,150 --> 00:46:00,325
这让你可以做一些模糊文件查找之类的事情，这是很多文本编辑器默认就有的，
This lets you do things like fuzzy file finding, which a lot of text editors come with by default, 

773
00:46:00,325 --> 00:46:01,800
所以你可以得到一个弹出窗口，
so you can get like a pop-up window, 

774
00:46:01,800 --> 00:46:05,150
输入一个文件名或大致的文件名，
you can type in a name of a file or approximately the name of a file 

775
00:46:05,150 --> 00:46:10,375
非常快速地找到它，或者有些插件可以显示撤销历史的可视化效果，
and find it very quickly, or there are things that show you like visualizations of undo history. 

776
00:46:10,375 --> 00:46:15,750
有些则可以显示文件浏览器，还有很多其它功能的。
There are things that show you like file explorers, things like that. 

777
00:46:15,750 --> 00:46:19,225
所以我们在课程网站上链接了一些我们最喜欢的插件，
So we've linked to a couple of our favorite plugins on the course website, 

778
00:46:19,275 --> 00:46:22,800
我强烈建议你熟悉如何安装插件，
and so I highly recommend becoming familiar with how to install a plugin 

779
00:46:22,800 --> 00:46:25,350
因为这只需要三秒钟，而且其中一些非常酷。
because it takes like three seconds and some of them are really cool. 

780
00:46:27,125 --> 00:46:32,675
在下课前，我将简要讲述一下一个话题
And then finally, the last topic I'll briefly mention before we finish today's lecture 

781
00:46:32,675 --> 00:46:35,075
Vim 模式和其他程序
is vim mode and other programs. 

782
00:46:35,075 --> 00:46:39,450
事实上，许多程序员都对 Vim 的界面感到兴奋，
So turns out that a lot of programmers were really excited about vim's interface, 

783
00:46:39,450 --> 00:46:43,175
因此他们在其他工具中实现了类似的功能。
and so they've implemented similar functionality in other tools. 

784
00:46:43,175 --> 00:46:47,775
例如，我已经将 Python REPL 配置为在 Vim 模式下运行。
For example, like I've configured my Python REPL to run in vim mode. 

785
00:46:47,775 --> 00:46:49,225
因此，我可以在这里键入内容，
So I can type in stuff here, 

786
00:46:49,225 --> 00:46:52,675
如果我按下 Escape 键，现在我就在 Python REPL 中的普通模式中了。
and if I press "Escape", now I'm in normal mode in my Python REPL, 

787
00:46:52,675 --> 00:46:58,125
我可以前后移动，按 x删除内容，使用“cw”更改一个单词
and I can move back and forth and like press "x" here to delete a thing, like "cw" to change a word 

788
00:46:58,125 --> 00:47:00,125
或是其它有意思的事。
and do all those good things. 

789
00:47:00,675 --> 00:47:02,625
不仅如此，
And it's not just the Python REPL. 

790
00:47:02,625 --> 00:47:05,050
我的终端也是这样工作的。
Like, I have my terminal behaving this way too. 

791
00:47:05,050 --> 00:47:08,950
我可以在这里键入任何内容，然后按 Escape 键，
So like, I can type in whatever I want here and "Escape", 

792
00:47:08,950 --> 00:47:10,250
就在普通模式中了。
and I'm in normal mode. 

793
00:47:10,250 --> 00:47:14,275
我可以进入终端内部的可视化模式，选择文本块，
I can go here and like go into visual mode inside my terminal and like select blocks of text, 

794
00:47:14,275 --> 00:47:16,275
按“~”键更改大小写，等等。
press tilder("~") to change the case, whatever. 

795
00:47:16,275 --> 00:47:24,575
因此，我们提供了如何为 bash、zsh、fish，
So we've linked to how exactly you can enable vim mode for like bash, zsh, fish, 

796
00:47:24,625 --> 00:47:28,975
以及很多基于 readline 的程序（如 Jupyter、Notebook）启用 Vim 模式的链接，还有许多其他工具。
a lot of readline-based programs like Jupyter Notebook, a whole bunch of other things. 

797
00:47:29,000 --> 00:47:31,800
如果没有提供链接，您可能可以通过搜索找到它，
And if it's not another place, you can probably find it by googling it 

798
00:47:31,800 --> 00:47:34,750
因为许多人喜欢这种功能。
because a lot of people like to have this sort of functionality. 

799
00:47:34,775 --> 00:47:37,350
如果您真的打算学习 Vim，
And if you're really gonna commit to learning vim, 

800
00:47:37,350 --> 00:47:42,000
我认为在使用的每个工具中启用这种 Vim 模拟模式是很有价值的。
I think it's valuable to enable this sort of vim emulation mode in every tool you use. 

801
00:47:42,000 --> 00:47:44,225
一是可以更好地学习工具，
It's like one, or like make you learn the tool a lot better, 

802
00:47:44,225 --> 00:47:49,175
二是一旦你变得擅长 Vim，这些技能将转移到你使用的所有其他工具上。
and two, once you become good at vim,like those skills will now transfer to all your other tools you use. 

803
00:47:51,725 --> 00:47:55,100
好的，这就是我们对 Vim 的快速介绍。
Okay, so I think that's it for our rapid introduction to vim. 

804
00:47:55,100 --> 00:47:58,150
我们无法在今天的讲座中涵盖所有有趣的内容，
There's some other neat material that we weren't able to fit in today's lecture, 

805
00:47:58,150 --> 00:47:59,425
但这些内容在讲义中都有涉及。
but it's in the lecture notes. 

806
00:47:59,425 --> 00:48:02,475
最后，我强烈建议您完成今天的练习。
And then finally, I highly recommend going through the exercises for today. 

807
00:48:02,475 --> 00:48:03,900
至少对我个人来说，
Like, at least for me personally, 

808
00:48:03,900 --> 00:48:06,725
我认为学习文本编辑器
I think spending time learning my text editor 

809
00:48:06,725 --> 00:48:11,025
是我们这门课教授的最有益的知识。
has been like the most beneficial thing out of the kinds of things we're teaching in this class. 

810
00:48:11,900 --> 00:48:14,025
好了，今天的讲座就到这里，
So yeah, that's it for today's lecture, 

811
00:48:14,025 --> 00:48:15,575
明天见。
and we'll see you tomorrow. 

812
00:48:15,925 --> 00:48:19,150
请注意，我们已将明天的讲座改为数据整理。
Note that we've changed tomorrow's lecture to data wrangling. 

813
00:48:19,150 --> 00:48:21,725
周二和周四的讲座现在已经互换了。
Thursday and Tuesday lectures are now switched. 

814
00:48:21,725 --> 00:48:25,875
如果有人只打算来听其中一个讲座，请查看课程网站。
This is reflected on the course website in case anybody was going to come to one but not the other. 

